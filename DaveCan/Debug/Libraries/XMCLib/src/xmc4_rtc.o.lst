   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc4_rtc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_RTC_IsRunning,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_RTC_IsRunning:
  25              	.LFB137:
  26              	 .file 1 "D:/practica/proiect/DaveCan/Libraries/XMCLib/inc/xmc_rtc.h"
   1:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
   2:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @file xmc_rtc.h
   3:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @date 2016-05-19
   4:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
   5:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @cond
   6:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  **************************************************************************************************
   7:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
   9:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * All rights reserved.                        
  11:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                                             
  12:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * following conditions are met:   
  14:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                                                                              
  15:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * disclaimer.                        
  17:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * 
  18:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * 
  21:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * products derived from this software without specific prior written permission.                  
  23:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                                                                              
  24:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                                                                              
  32:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  **************************************************************************************************
  35:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
  36:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Change History
  37:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * --------------
  38:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
  39:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * 2015-02-20:
  40:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *     - Initial
  41:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *      
  42:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * 2015-05-20:
  43:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *     - Documentation updates <br>
  44:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *     - In xmc1_rtc file XMC_RTC_Init function
  45:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *       is modified by adding the RTC running condition check
  46:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *   
  47:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * 2015-06-20:
  48:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  49:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
  50:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * 2016-05-19:
  51:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *     - Added XMC_RTC_SetTimeStdFormat() and XMC_RTC_SetAlarmStdFormat()
  52:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
  53:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @endcond 
  54:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
  55:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */
  56:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
  57:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #ifndef XMC_RTC_H
  58:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #define XMC_RTC_H
  59:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
  60:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**************************************************************************************************
  61:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * HEADER FILES
  62:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  **************************************************************************************************
  63:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
  64:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #include <xmc_common.h>
  65:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #include <time.h>
  66:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
  67:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
  68:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
  69:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @addtogroup XMClib XMC Peripheral Library
  70:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @{
  71:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */
  72:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
  73:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
  74:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @addtogroup RTC
  75:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @brief RTC driver for XMC microcontroller family.
  76:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
  77:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Real-time clock (RTC) is a clock that keeps track of the current time. Precise
  78:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * real time keeping is with a 32.768 KHz external crystal clock or a 32.768 KHz
  79:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * high precision internal clock. It provides a periodic time based interrupt and
  80:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * a programmable alarm interrupt on time match. It also supports wakeup from
  81:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * hibernate.
  82:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
  83:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The RTC low level driver provides functions to configure and initialize the RTC
  84:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * hardware peripheral. 
  85:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * 
  86:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @{
  87:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */
  88:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
  89:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**************************************************************************************************
  90:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * MACROS
  91:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  **************************************************************************************************
  92:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
  93:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**************************************************************************************************
  94:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * ENUMS
  95:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  **************************************************************************************************
  96:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
  97:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
  98:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *  Status return values for RTC low level driver
  99:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */
 100:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** typedef enum XMC_RTC_STATUS
 101:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** {
 102:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_STATUS_OK    = 0U, /**< Operation successful */
 103:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_STATUS_ERROR = 1U, /**< Operation unsuccessful */
 104:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_STATUS_BUSY  = 2U  /**< Busy with a previous request */
 105:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** } XMC_RTC_STATUS_t;
 106:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 107:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 108:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Events which enables interrupt request generation
 109:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */
 110:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** typedef enum XMC_RTC_EVENT
 111:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** {
 112:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_EVENT_PERIODIC_SECONDS = RTC_MSKSR_MPSE_Msk, /**< Mask value to enable an event on period
 113:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_EVENT_PERIODIC_MINUTES = RTC_MSKSR_MPMI_Msk, /**< Mask value to enable an event on period
 114:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_EVENT_PERIODIC_HOURS   = RTC_MSKSR_MPHO_Msk, /**< Mask value to enable an event on period
 115:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_EVENT_PERIODIC_DAYS    = RTC_MSKSR_MPDA_Msk, /**< Mask value to enable an event on period
 116:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_EVENT_PERIODIC_MONTHS  = RTC_MSKSR_MPMO_Msk, /**< Mask value to enable an event on period
 117:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_EVENT_PERIODIC_YEARS   = RTC_MSKSR_MPYE_Msk, /**< Mask value to enable an event on period
 118:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_EVENT_ALARM            = RTC_MSKSR_MAI_Msk   /**< Mask value to enable an event on period
 119:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** } XMC_RTC_EVENT_t;
 120:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 121:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 122:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *  Months used to program the date  
 123:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */
 124:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** typedef enum XMC_RTC_MONTH
 125:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** {
 126:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_MONTH_JANUARY   = 0U, 
 127:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_MONTH_FEBRUARY  = 1U,     
 128:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_MONTH_MARCH     = 2U,         
 129:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_MONTH_APRIL     = 3U,       
 130:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_MONTH_MAY       = 4U,         
 131:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_MONTH_JUNE      = 5U,         
 132:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_MONTH_JULY      = 6U,           
 133:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_MONTH_AUGUST    = 7U,         
 134:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_MONTH_SEPTEMBER = 8U,    
 135:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_MONTH_OCTOBER   = 9U,      
 136:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_MONTH_NOVEMBER  = 10U,     
 137:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_MONTH_DECEMBER  = 11U     
 138:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** } XMC_RTC_MONTH_t;
 139:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 140:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 141:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *  Week days used program the date 
 142:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */
 143:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** typedef enum XMC_RTC_WEEKDAY
 144:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** {
 145:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_WEEKDAY_SUNDAY    = 0U, 
 146:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_WEEKDAY_MONDAY    = 1U,      
 147:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_WEEKDAY_TUESDAY   = 2U,      
 148:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_WEEKDAY_WEDNESDAY = 3U,    
 149:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_WEEKDAY_THURSDAY  = 4U,     
 150:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_WEEKDAY_FRIDAY    = 5U,       
 151:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_WEEKDAY_SATURDAY  = 6U      
 152:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** } XMC_RTC_WEEKDAY_t;
 153:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 154:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**************************************************************************************************
 155:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * DATA STRUCTURES
 156:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  **************************************************************************************************
 157:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /*Anonymous structure/union guard start*/
 158:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #if defined(__CC_ARM)
 159:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   #pragma push
 160:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   #pragma anon_unions
 161:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #elif defined(__TASKING__)
 162:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   #pragma warning 586
 163:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #endif
 164:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 165:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 166:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 167:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Alarm time values of RTC  <br>
 168:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 169:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The structure presents a convenient way to set/obtain the 
 170:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * alarm time values for seconds, minutes, hours, days, month and year of RTC. 
 171:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The XMC_RTC_SetAlarm() and XMC_RTC_GetAlarm() can be
 172:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * used to populate the structure with the alarm time value of
 173:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * RTC 
 174:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */ 
 175:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** typedef struct XMC_RTC_ALARM
 176:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** {
 177:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   union
 178:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   {
 179:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	  uint32_t raw0;
 180:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	  struct
 181:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	  {
 182:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t seconds  : 6; /**< Alarm seconds compare value (0-59: Above this causes this bitfield
 183:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t          : 2; 
 184:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t minutes  : 6; /**< Alarm minutes compare value (0-59: Above this causes this bitfield
 185:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t          : 2;
 186:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t hours    : 5; /**< Alarm hours compare value   (0-23: Above this causes this bitfield
 187:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t          : 3;
 188:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t days     : 5; /**< Alarm days compare value (0-Actual days of month: Above this cause
 189:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t          : 3;
 190:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	  };
 191:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   };
 192:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 193:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   union
 194:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   {
 195:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****     uint32_t raw1;
 196:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	  struct
 197:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	  {
 198:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t          : 8;
 199:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t month    : 4; /**< Alarm month compare value (0-11: Above this causes this bitfield t
 200:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t          : 4;
 201:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t year     : 16; /**< Alarm year compare value */ 
 202:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	  };
 203:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   };
 204:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** } XMC_RTC_ALARM_t;
 205:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 206:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 207:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Time values of RTC  <br>
 208:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 209:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The structure presents a convenient way to set/obtain the 
 210:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * time values for seconds, minutes, hours, days, month and year of RTC. 
 211:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The XMC_RTC_SetTime() and XMC_RTC_GetTime() can be
 212:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * used to populate the structure with the time value of
 213:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * RTC 
 214:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */ 
 215:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** typedef struct XMC_RTC_TIME
 216:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** {
 217:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   union
 218:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   {
 219:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****     uint32_t raw0;
 220:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	  struct
 221:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	  {
 222:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t seconds  : 6; /**< Seconds time value (0-59: Above this causes this bitfield to be se
 223:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t          : 2; 
 224:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t minutes  : 6; /**< Minutes time value (0-59: Above this causes this bitfield to be se
 225:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t          : 2;
 226:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t hours    : 5; /**< Hours time value   (0-23: Above this causes this bitfield to be se
 227:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t          : 3;
 228:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t days     : 5; /**< Days time value (0-Actual days of month: Above this causes this bi
 229:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t          : 3;
 230:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	  };
 231:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   };
 232:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 233:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   union
 234:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   {
 235:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****     uint32_t raw1;
 236:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	  struct
 237:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	  {
 238:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t daysofweek  : 3; /**< Days of week time value (0-6: Above this causes this bitfield t
 239:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t             : 5;
 240:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t month       : 4; /**< Month time value       (0-11: Above this causes this bitfield t
 241:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t             : 4;
 242:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	    uint32_t year        : 16; /**< Year time value */
 243:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 	 };
 244:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   };
 245:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** } XMC_RTC_TIME_t;
 246:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /*Anonymous structure/union guard end*/
 247:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #if defined(__CC_ARM)
 248:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   #pragma pop
 249:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #elif defined(__TASKING__)
 250:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   #pragma warning restore
 251:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #endif
 252:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 253:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 254:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * RTC initialization with time, alarm and clock divider(prescaler) configurations <br>
 255:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 256:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The structure presents a convenient way to set/obtain the time and alarm configurations  
 257:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * for RTC. The XMC_RTC_Init() can be used to populate the structure with the time and alarm
 258:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * values of RTC.
 259:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */  
 260:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** typedef struct XMC_RTC_CONFIG
 261:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** {
 262:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_TIME_t    time;
 263:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   XMC_RTC_ALARM_t   alarm;
 264:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   uint16_t          prescaler;
 265:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** } XMC_RTC_CONFIG_t;
 266:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 267:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /*******************************************************************************
 268:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * EXTENSIONS
 269:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *******************************************************************************/
 270:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 271:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #if UC_FAMILY == XMC1
 272:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #include "xmc1_rtc.h"
 273:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #endif
 274:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 275:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #if UC_FAMILY == XMC4
 276:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #include "xmc4_rtc.h"
 277:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #endif
 278:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 279:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /*******************************************************************************
 280:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * API PROTOTYPES
 281:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  **************************************************************************************************
 282:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 283:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #ifdef __cplusplus
 284:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** extern "C" {
 285:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** #endif
 286:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 287:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 288:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @param config Constant pointer to a constant ::XMC_RTC_CONFIG_t structure containing the
 289:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *               time, alarm time and clock divider(prescaler) configuration. 
 290:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return XMC_RTC_STATUS_t Always returns XMC_RTC_STATUS_OK (It contains only register assignment 
 291:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 292:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 293:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Initialize the RTC peripheral <br>
 294:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 295:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par \if XMC4
 296:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function enables the hibernate domain for accessing RTC peripheral registers, configures 
 297:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * internal clock divider, time and alarm values by writing to the CTR.DIV, TIM0, TIM1, ATIM0 and
 298:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * ATIM1 registers.
 299:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \endif
 300:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 301:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \if XMC1
 302:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function ungates the peripheral clock for RTC, configures 
 303:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * internal clock divider, time and alarm values by writing to the CTR.DIV, TIM0, TIM1, ATIM0 and
 304:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * ATIM1 registers.
 305:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \endif
 306:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */
 307:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** XMC_RTC_STATUS_t XMC_RTC_Init(const XMC_RTC_CONFIG_t *const config);
 308:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 309:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /** 
 310:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 311:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 312:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description</b><br>
 313:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Enables RTC peripheral for programming its registers <br>
 314:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 315:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par \if XMC4
 316:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Enables the hibernate domain for accessing RTC peripheral registers.
 317:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \endif
 318:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 319:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \if XMC1
 320:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Ungates the peripheral clock.
 321:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \endif
 322:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 323:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 324:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_Disable(), XMC_SCU_RESET_DeassertPeripheralReset()
 325:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */ 
 326:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_Enable(void);
 327:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 328:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /** 
 329:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 330:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 331:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description</b><br>
 332:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Disables RTC peripheral for programming its registers <br>
 333:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 334:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par \if XMC4
 335:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Empty function (Hibernate domain is not disabled).
 336:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \endif
 337:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 338:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \if XMC1
 339:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Gates the peripheral clock.
 340:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \endif
 341:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 342:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 343:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_Enable(), XMC_SCU_RESET_AssertPeripheralReset()
 344:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */ 
 345:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_Disable(void);
 346:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 347:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /** 
 348:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 349:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 350:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description</b><br>
 351:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Checks RTC peripheral is enabled for programming its registers <br>
 352:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 353:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par \if XMC4
 354:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Checks the hibernate domain is enabled or not.
 355:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \endif
 356:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 357:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \if XMC1
 358:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Checks peripheral clock is ungated or not.
 359:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \endif
 360:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 361:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 362:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_Enable(), XMC_RTC_Disable(), XMC_SCU_RESET_DeassertPeripheralReset(),
 363:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_SCU_RESET_AssertPeripheralReset()
 364:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */ 
 365:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** bool XMC_RTC_IsEnabled(void);
 366:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  
 367:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 368:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 369:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 370:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description</b><br>
 371:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Enables RTC peripheral to start counting time <br>
 372:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 373:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 374:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function starts the RTC for counting time by setting 
 375:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * CTR.ENB bit. Before starting the RTC, it should not be in
 376:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * running mode and also hibernate domain should be enabled.
 377:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 378:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 379:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_Enable(), XMC_RTC_Stop(), XMC_SCU_RESET_DeassertPeripheralReset()
 380:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */  
 381:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_Start(void);
 382:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 383:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 384:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 385:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 386:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description</b><br>
 387:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Disables RTC peripheral to start counting time <br>
 388:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 389:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 390:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function stops the RTC for counting time by resetting 
 391:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * CTR.ENB. Before stopping the RTC, hibernate domain should be enabled.
 392:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 393:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 394:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_Enable(), XMC_RTC_Start(), XMC_SCU_RESET_AssertPeripheralReset()
 395:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */  
 396:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_Stop(void);
 397:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   
 398:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 399:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @param prescaler Prescaler value to be set                 
 400:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 401:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 402:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 403:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Sets the RTC module prescaler value <br>
 404:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 405:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 406:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function sets the CTR.DIV bitfield to configure the prescalar value. 
 407:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The default value for the prescalar with the 32.768kHz crystal (or the internal clock) 
 408:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * is 7FFFH for a time interval of 1 sec. Before setting the prescaler value RTC should be
 409:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * in stop mode and hibernate domain should be enabled.
 410:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 411:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 412:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_Stop(), XMC_RTC_Enable(), XMC_RTC_GetPrescaler()
 413:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */   
 414:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_SetPrescaler(uint16_t prescaler);
 415:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 416:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 417:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 418:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 419:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 420:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Gets the RTC module prescaler value <br>
 421:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 422:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 423:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function reads the CTR.DIV bitfield to get the prescalar value. The default value 
 424:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * for the prescalar with the 32.768kHz crystal (or the internal clock) is 7FFFH for a 
 425:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * time interval of 1 sec.
 426:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 427:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 428:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_SetPrescaler()
 429:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */   
 430:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** __STATIC_INLINE uint32_t XMC_RTC_GetPrescaler(void)
 431:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** {
 432:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   return (uint32_t)(((uint32_t)RTC->CTR & (uint32_t)RTC_CTR_DIV_Msk) >> (uint32_t)RTC_CTR_DIV_Pos);
 433:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** }
 434:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 435:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 436:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @param timeval Contstant pointer to a constant ::XMC_RTC_TIME_t structure containing the
 437:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                time parameters seconds, minutes, hours, days, daysofweek, month and year.     
 438:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 439:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 440:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 441:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Sets the RTC module time values <br>
 442:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 443:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 444:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function sets the TIM0, TIM1 registers with time values.
 445:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The values can only be written when RTC is disabled.
 446:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * See the structure ::XMC_RTC_TIME_t for the valid range of time value parameters. <br>
 447:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 448:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 449:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_GetTime(), XMC_RTC_Stop() 
 450:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */    
 451:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_SetTime(const XMC_RTC_TIME_t *const timeval);
 452:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 453:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 454:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @param time Pointer to a constant ::XMC_RTC_TIME_t structure containing the time parameters
 455:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *             seconds, minutes, hours, days, daysofweek, month and year. 
 456:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 457:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 458:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 459:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Gets the RTC module time value <br>
 460:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 461:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 462:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function gets the time values from TIM0, TIM1 registers. 
 463:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * See the structure ::XMC_RTC_TIME_t for the valid range of time value parameters. <br>
 464:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 465:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 466:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_SetTime()
 467:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */    
 468:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_GetTime(XMC_RTC_TIME_t *const time);
 469:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 470:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 471:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @param stdtime Pointer to a ::tm structure containing the time parameters seconds,
 472:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                minutes, hours, days, daysofweek, month, year(since 1900) and days in a   
 473:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                year in standard format.           
 474:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 475:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 476:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 477:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Sets the RTC module time value in standard format <br>
 478:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 479:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 480:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function sets the time values from TIM0, TIM1 registers. 
 481:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 482:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 483:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_SetTime(), XMC_RTC_GetTime()
 484:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */     
 485:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_SetTimeStdFormat(const struct tm *const stdtime);
 486:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 487:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 488:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @param stdtime Pointer to a constant ::tm structure containing the time parameters seconds,
 489:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                minutes, hours, days, daysofweek, month, year(since 1900) and days in a   
 490:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                year in standard format.           
 491:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 492:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 493:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 494:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Gets the RTC module time value in standard format <br>
 495:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 496:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 497:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function gets the time values from TIM0, TIM1 registers. 
 498:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * See the structure ::XMC_RTC_TIME_t for the valid range of time value parameters. <br>
 499:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * For days the valid range is (1 - Actual days of month), year (since 1900) and 
 500:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * daysinyear (0 -365).
 501:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 502:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 503:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_SetTime(), XMC_RTC_GetTime()
 504:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */     
 505:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_GetTimeStdFormat(struct tm *const stdtime);
 506:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 507:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 508:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @param alarm Constant pointer to a constant ::XMC_RTC_ALARM_t structure containing the
 509:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                alarm time parameters alarm seconds, alarm minutes, alarm hours, alarm days, 
 510:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                alarm daysofweek, alarm month and alarm year.           
 511:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 512:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 513:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 514:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Sets the RTC module alarm time value <br>
 515:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 516:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 517:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function sets the ATIM0, ATIM1 registers with alarm time values. 
 518:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * See the structure ::XMC_RTC_ALARM_t for the valid range of alarm time value parameters. <br>
 519:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 520:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 521:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_GetAlarm()
 522:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */     
 523:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_SetAlarm(const XMC_RTC_ALARM_t *const alarm);
 524:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 525:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 526:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @param alarm Pointer to a constant ::XMC_RTC_ALARM_t structure containing the
 527:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *             time parameters alarm seconds, alarm minutes, alarm hours, alarm days, 
 528:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *             alarm daysofweek, alarm month and alarm year.           
 529:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 530:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 531:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 532:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Gets the RTC module alarm time value <br>
 533:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 534:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 535:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function gets the alarm time values from ATIM0, ATIM1 registers. 
 536:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * See the structure ::XMC_RTC_ALARM_t for the valid range of alarm time value parameters. <br>
 537:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 538:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 539:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_SetAlarm()
 540:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */    
 541:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_GetAlarm(XMC_RTC_ALARM_t *const alarm);
 542:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 543:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 544:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @param stdtime Pointer to a ::tm structure containing the time parameters alarm seconds,
 545:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                alarm minutes, alarm hours, alarm days, alarm daysofweek, alarm month,  
 546:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                alarm year(since 1900) and alarm days in a year in standard format.           
 547:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 548:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 549:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 550:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Sets the RTC module alarm time value in standard format <br>
 551:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 552:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 553:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function sets the alarm time values from ATIM0, ATIM1 registers. 
 554:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 555:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 556:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_SetAlarm(), XMC_RTC_GetAlarm()
 557:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */     
 558:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_SetAlarmStdFormat(const struct tm *const stdtime);
 559:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 560:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 561:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @param stdtime Pointer to a constant ::tm structure containing the time parameters alarm seconds
 562:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                alarm minutes, alarm hours, alarm days, alarm daysofweek, alarm month,  
 563:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *                alarm year(since 1900) and alarm days in a year in standard format.           
 564:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 565:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 566:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 567:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Gets the RTC module alarm time value in standard format <br>
 568:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 569:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 570:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function gets the alarm time values from ATIM0, ATIM1 registers. 
 571:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * See the structure ::XMC_RTC_ALARM_t for the valid range of alarm time value parameters. <br>
 572:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * For days the valid range is (1 - Actual days of month), year (since 1900) and 
 573:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * daysinyear (0 -365).
 574:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 575:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 576:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_SetAlarm(), XMC_RTC_GetAlarm()
 577:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */     
 578:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_GetAlarmStdFormat(struct tm *const stdtime);
 579:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 580:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 581:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @param event A valid RTC event (::XMC_RTC_EVENT_t) or a valid combination of
 582:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *              logically OR'd events
 583:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 584:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 585:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 586:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Enable RTC periodic and alarm event(s) <br>
 587:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 588:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 589:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function sets the bitfields of MSKSR register to enable interrupt generation 
 590:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * for requested RTC event(s). 
 591:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Setting the masking value for the event(s) containing in the ::XMC_RTC_EVENT_t leads 
 592:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * to a generation of the interrupt.
 593:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 594:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 595:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_DisableEvent()
 596:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */
 597:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_EnableEvent(const uint32_t event);
 598:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 599:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 600:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @param event A valid RTC event (::XMC_RTC_EVENT_t) or a valid combination of
 601:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *              logically OR'd events
 602:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 603:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 604:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 605:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Disable RTC periodic and alarm event(s) <br>
 606:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 607:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 608:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function resets the bitfields of MSKSR register to disable interrupt generation 
 609:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * for requested RTC event(s). 
 610:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Resetting the masking value for the the event(s) containing in the ::XMC_RTC_EVENT_t blocks 
 611:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * the generation of the interrupt.
 612:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * 
 613:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 614:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_EnableEvent()
 615:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */
 616:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_DisableEvent(const uint32_t event);
 617:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 618:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 619:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @param event A valid RTC event (::XMC_RTC_EVENT_t) or a valid combination of
 620:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *              logically OR'd events
 621:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 622:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 623:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 624:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Clears periodic and alarm event(s) status <br>
 625:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 626:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 627:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function sets the bitfields of CLRSR register to clear status bits in RAWSTAT and STSSR regi
 628:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Setting the value for the the RTC event(s) containing in the ::XMC_RTC_EVENT_t clears the 
 629:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * corresponding status bits in RAWSTAT and STSSR registers.
 630:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * 
 631:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 632:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_GetEventStatus()
 633:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */ 
 634:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** void XMC_RTC_ClearEvent(const uint32_t event);
 635:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 636:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 637:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return None
 638:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 639:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 640:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Gets the RTC periodic and alarm event(s) status <br>
 641:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 642:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 643:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function reads the bitfields of STSSR register 
 644:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * to get the status of RTC events. 
 645:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Reading the value of the register STSSR gives the status of the event(s) containing in the ::XMC
 646:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * 
 647:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 648:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_ClearEvent()
 649:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */
 650:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** uint32_t XMC_RTC_GetEventStatus(void);
 651:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** 
 652:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** /**
 653:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * @return bool true if RTC is running
 654:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *              false if RTC is not running
 655:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 656:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Description: </b><br>
 657:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * Checks the running status of the RTC <br>
 658:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 659:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par
 660:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * The function reads the bitfield ENB of CTR register 
 661:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * to get the running status of RTC. 
 662:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  *
 663:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * \par<b>Related APIs:</b><br>
 664:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  * XMC_RTC_Start(), XMC_RTC_Stop()
 665:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****  */ 
 666:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** __STATIC_INLINE bool XMC_RTC_IsRunning(void)
 667:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** {
  27              	 .loc 1 667 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
 668:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h ****   return (bool)(RTC->CTR & RTC_CTR_ENB_Msk);
  39              	 .loc 1 668 0
  40 0004 064B     	 ldr r3,.L3
  41 0006 5B68     	 ldr r3,[r3,#4]
  42 0008 03F00103 	 and r3,r3,#1
  43 000c 002B     	 cmp r3,#0
  44 000e 14BF     	 ite ne
  45 0010 0123     	 movne r3,#1
  46 0012 0023     	 moveq r3,#0
  47 0014 DBB2     	 uxtb r3,r3
 669:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_rtc.h **** }
  48              	 .loc 1 669 0
  49 0016 1846     	 mov r0,r3
  50 0018 BD46     	 mov sp,r7
  51              	.LCFI2:
  52              	 .cfi_def_cfa_register 13
  53              	 
  54 001a 5DF8047B 	 ldr r7,[sp],#4
  55              	.LCFI3:
  56              	 .cfi_restore 7
  57              	 .cfi_def_cfa_offset 0
  58 001e 7047     	 bx lr
  59              	.L4:
  60              	 .align 2
  61              	.L3:
  62 0020 004A0050 	 .word 1342196224
  63              	 .cfi_endproc
  64              	.LFE137:
  66              	 .section .text.XMC_SCU_GetMirrorStatus,"ax",%progbits
  67              	 .align 2
  68              	 .thumb
  69              	 .thumb_func
  71              	XMC_SCU_GetMirrorStatus:
  72              	.LFB175:
  73              	 .file 2 "D:/practica/proiect/DaveCan/Libraries/XMCLib/inc/xmc_scu.h"
   1:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
   2:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @file xmc_scu.h
   3:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @date 2016-03-09
   4:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
   5:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @cond
   6:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
   7:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
   9:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * All rights reserved.                        
  11:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                                             
  12:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * following conditions are met:   
  14:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                                                                              
  15:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * disclaimer.                        
  17:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * 
  18:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * 
  21:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * products derived from this software without specific prior written permission.                  
  23:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                                                                              
  24:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                                                                              
  32:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
  35:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
  36:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Change History
  37:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * --------------
  38:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
  39:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-02-20:
  40:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Initial <br>
  41:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
  42:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-05-20:
  43:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Documentation improved <br>
  44:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *     - XMC_ASSERT() hanging issues have fixed for XMC4 devices. <br>
  45:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
  46:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-06-20:
  47:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Removed STATIC_INLINE property for the below APIs and declared as void
  49:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *       XMC_SCU_INTERRUPT_EnableEvent, XMC_SCU_INTERRUPT_DisableEvent,
  50:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *       XMC_SCU_INTERRUPT_TriggerEvent, XMC_SCU_INTERUPT_GetEventStatus,
  51:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *       XMC_SCU_INTERUPT_ClearEventStatus
  52:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
  53:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-11-30:
  54:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Documentation improved <br>
  55:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *      
  56:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * 2016-03-09:
  57:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Optimization of write only registers
  58:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *      
  59:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @endcond 
  60:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
  61:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
  62:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** #ifndef XMC_SCU_H
  63:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** #define XMC_SCU_H
  64:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  
  65:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
  66:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * HEADER FILES
  67:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
  68:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** #include <xmc_common.h>
  69:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
  70:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
  71:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @addtogroup XMClib XMC Peripheral Library
  72:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @{
  73:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
  74:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  
  75:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
  76:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @addtogroup SCU
  77:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @brief System Control Unit(SCU) driver for XMC microcontroller family.
  78:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
  79:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * System control unit is the SoC power, reset and a clock manager with additional responsibility o
  80:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * providing system stability protection and other auxiliary functions.<br>
  81:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * SCU provides the following features,
  82:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Power control
  83:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4 
  84:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Hibernate control 
  85:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
  86:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Reset control
  87:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Clock control
  88:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Miscellaneous control(boot mode, system interrupts etc.)<br><br>
  89:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
  90:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The SCU driver is divided in to clock control logic, reset control logic, system interrupt contr
  91:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
  92:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * , hibernate control logic, trap control logic, parity control logic 
  93:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
  94:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * and miscellaneous control logic.<br>
  95:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
  96:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Clock driver features:
  97:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows clock configuration using the structure XMC_SCU_CLOCK_CONFIG_t and API XMC_SCU_CLOCK_I
  98:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
  99:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides structure XMC_SCU_CLOCK_SYSPLL_CONFIG_t for configuring the system PLL
 100:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of clock source for system PLL, XMC_SCU_CLOCK_GetSystemPllClockSource()
 101:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for configuring different module clock frequencies XMC_SCU_CLOCK_SetWdtClockDiv
 102:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of clock source for external output, XMC_SCU_CLOCK_SetExternalOutputClockSou
 103:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for enabling external high power oscillator and ultra low power oscillator, XMC
 104:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for getting various clock frequencies XMC_SCU_CLOCK_GetPeripheralClockFrequency
 105:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  XMC_SCU_CLOCK_GetCpuClockFrequency(), XMC_SCU_CLOCK_GetSystemClockFrequency()<br>
 106:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 107:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC1
 108:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of peripheral clock frequency, XMC_SCU_CLOCK_SetFastPeripheralClockSource()
 109:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides API to get the peripheral clock frequency, XMC_SCU_CLOCK_GetFastPeripheralClockFrequ
 110:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 111:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 112:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Reset driver features:
 113:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
 114:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to handle peripheral reset XMC_SCU_RESET_AssertPeripheralReset(), XMC_SCU_RESET_Deasse
 115:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuration of NMI generation for selected events, XMC_SCU_INTERRUPT_EnableNmiReques
 116:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 117:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC1
 118:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to trigger device reset XMC_SCU_RESET_AssertMasterReset()
 119:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to configure multiple sources for reset, XMC_SCU_RESET_EnableResetRequest()
 120:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \endif <br>
 121:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 122:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Interrupt driver features:
 123:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for enabling/ disabling interrupt event generation XMC_SCU_INTERRUPT_EnableEven
 124:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  XMC_SCU_INTERRUPT_DisableEvent()
 125:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides API for registering callback function for events XMC_SCU_INTERRUPT_SetEventHandler()
 126:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 127:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
 128:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Hibernate driver features:
 129:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuration of hibernate domain XMC_SCU_HIB_EnableHibernateDomain(), XMC_SCU_HIB_Dis
 130:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of standby clock source, XMC_SCU_HIB_SetStandbyClockSource()
 131:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of RTC clock source, XMC_SCU_HIB_SetRtcClockSource()
 132:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides API for enabling slow internal clock used for backup clock, XMC_SCU_HIB_EnableIntern
 133:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 134:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Trap driver features:
 135:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows handling of trap XMC_SCU_TRAP_Enable(), XMC_SCU_TRAP_GetStatus(), XMC_SCU_TRAP_Trigger
 136:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 137:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Parity driver features:
 138:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Parity error generated by on-chip RAM can be monitored, XMC_SCU_PARITY_Enable(), XMC_SCU_PARI
 139:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuration of trap generation on detection of parity error, XMC_SCU_PARITY_EnableTr
 140:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 141:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Power driver features:
 142:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to power the USB module XMC_SCU_POWER_EnableUsb(), XMC_SCU_POWER_DisableUsb()
 143:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 144:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 145:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Miscellaneous features:
 146:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to trigger multiple capture compare unit(CCU) channels to be started together XMC_SCU_
 147:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
 148:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of out of range comparator (ORC) XMC_SCU_EnableOutOfRangeComparator()
 149:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of die temperature sensor XMC_SCU_EnableTemperatureSensor(), XMC_SCU_Ca
 150:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of device boot mode XMC_SCU_SetBootMode()<br>
 151:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 152:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC1
 153:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of die temperature sensor XMC_SCU_StartTempMeasurement(), XMC_SCU_SetRa
 154:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuring supply monitor unit using the structure XMC_SCU_SUPPLYMONITOR_t and API XM
 155:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows handling of protected bits XMC_SCU_LockProtectedBits(), XMC_SCU_UnlockProtectedBits()<
 156:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 157:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @{
 158:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 159:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  
 160:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 161:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * MACROS
 162:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 163:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 164:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 165:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * ENUMS
 166:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 167:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 168:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *  Defines the status of SCU API execution, used to verify the SCU related API calls.
 169:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 170:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** typedef enum XMC_SCU_STATUS 
 171:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** {
 172:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****   XMC_SCU_STATUS_OK   = 0UL, /**< SCU related operation successfully completed.*/
 173:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****   XMC_SCU_STATUS_ERROR,      /**< SCU related operation failed. When API cannot fulfill request, th
 174:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****   XMC_SCU_STATUS_BUSY,       /**< Cannot execute the SCU related operation request because
 175:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****                                   another operation is in progress. \a XMC_SCU_STATUS_BUSY is retur
 176:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****                                   processing another request. */
 177:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** } XMC_SCU_STATUS_t;
 178:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 179:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 180:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 181:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * DATA TYPES
 182:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 183:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 184:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 185:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Function pointer type used for registering callback functions on SCU event occurrence.
 186:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 187:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** typedef void (*XMC_SCU_INTERRUPT_EVENT_HANDLER_t)(void);
 188:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 189:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 190:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * DEVICE EXTENSIONS
 191:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 192:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 193:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** #if (UC_FAMILY == XMC1)
 194:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** #include <xmc1_scu.h>
 195:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** #elif (UC_FAMILY == XMC4)
 196:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** #include <xmc4_scu.h>
 197:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** #else
 198:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** #error "Unspecified chipset"
 199:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** #endif
 200:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 201:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 202:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * API Prototypes
 203:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 204:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 205:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** #ifdef __cplusplus
 206:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** extern "C" {
 207:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** #endif
 208:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 209:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 210:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 211:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 212:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @param trigger    CCU slices to be triggered synchronously via software. The value is a bitmask 
 213:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                    in the register CCUCON. <br>
 214:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_CCU_TRIGGER_t for bitmask of individual CCU s
 215:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                    combined using \a OR operation.
 216:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 217:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 218:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 219:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 220:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Generates active edge(low to high) trigger for multiple CCU units at the same time.\n\n
 221:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Before executing this API, all the required CCU timers should configure external start.
 222:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The edge of the start signal should be selected as active edge.
 223:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The input signal for the CCU slice should be selected as SCU input.
 224:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(
 225:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 226:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * the timer using this API.<BR>
 227:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 228:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 229:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 230:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
 231:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** {
 232:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****   SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 233:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** }
 234:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 235:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 236:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 237:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @param trigger  CCU slices to be triggered synchronously via software. The value is a bitmask of
 238:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                    in the register CCUCON. <br>
 239:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_CCU_TRIGGER_t for bitmask of individual CCU s
 240:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                    combined using \a OR operation.
 241:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 242:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 243:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 244:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 245:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Generates passive edge(high to low) trigger for multiple CCU units at the same time.\n\n
 246:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Before executing this API, all the required CCU timers should configure external start.
 247:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The edge of the start signal should be selected as passive edge.
 248:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The input signal for the CCU slice should be selected as SCU input.
 249:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(
 250:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 251:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * the timer using this API.<BR>
 252:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 253:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 254:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 255:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
 256:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** {
 257:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****   SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 258:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** }
 259:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 260:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 261:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 262:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @param config Pointer to structure holding the clock prescaler values and divider values for 
 263:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                configuring clock generators and clock tree.\n
 264:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                \b Range: Configure the members of structure @ref XMC_SCU_CLOCK_CONFIG_t for vari
 265:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                parameters of clock setup.
 266:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 267:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 268:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 269:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 270:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Initializes clock generators and clock tree.\n\n
 271:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC1
 272:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Peripheral clock and system clock are configured based on the input configuration \a config.
 273:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The system clock frequency is tuned by configuring the FDIV and IDIV values of CLKCR register.
 274:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The values of FDIV and IDIV can be provided as part of input configuration.
 275:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The PCLK divider determines the ratio of peripheral clock to the system clock. 
 276:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The source of RTC clock is set based on the input configuration. 
 277:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \a SystemCoreClock variable will be updated with the value of
 278:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * system clock frequency. Access to protected bit fields are handled internally.
 279:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 280:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC4
 281:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Enables the high precision oscillator(fOHP) input and configures the system and peripheral clock
 282:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Based on the system clock source selected in \a config, either fPLL or fOFI will be chosen as sy
 283:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Based on PLL mode(normal or prescaler mode) used, PLL ramps up in steps to achieve target freque
 284:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The clock dividers for CPU, CCU and peripheral clocks will be set based on the input configurati
 285:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The \a SystemCoreClock variable is set with the value of system clock frequency.
 286:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 287:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 288:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GetCpuClockFrequency() \n\n\n
 289:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 290:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config);
 291:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 292:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 293:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 294:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event  Bit mask of the event to enable. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_t
 295:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 296:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 297:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 298:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 299:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 300:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Enables the generation of interrupt for the input events.\n\n
 301:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The events are enabled by setting the respective bit fields in the SRMSK register. \n
 302:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Note: User should separately enable the NVIC node responsible for handling the SCU interrupt.
 303:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The interrupt will be generated when the respective event occurs.
 304:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 305:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * NVIC_EnableIRQ(), XMC_SCU_INTERRUPT_DisableEvent()\n\n\n
 306:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 307:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event);
 308:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 309:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 310:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 311:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 312:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event  Bit mask of the event to disable. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_
 313:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 314:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 315:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 316:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 317:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 318:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Disables generation of interrupt on occurrence of the input event.\n\n
 319:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The events are disabled by resetting the respective bit fields in the SRMSK register. \n
 320:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 321:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * NVIC_DisableIRQ(), XMC_SCU_INTERRUPT_EnableEvent()\n\n\n
 322:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 323:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event);
 324:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 325:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 326:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 327:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event Bit mask of the event to be triggered. \b Range: Use type @ref XMC_SCU_INTERRUPT_EV
 328:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 329:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 330:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 331:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 332:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 333:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Triggers the event as if the hardware raised it.\n\n
 334:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Event will be triggered by setting the respective bitfield in the SRSET register.\n
 335:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Note: User should enable the NVIC node that handles the respective event for interrupt generatio
 336:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 337:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * NVIC_EnableIRQ(), XMC_SCU_INTERUPT_GetEventStatus(), XMC_SCU_INTERRUPT_ClearEventStatus() \n\n\n
 338:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 339:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t  event);
 340:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 341:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 342:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Status of the SCU events.
 343:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 344:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 345:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the status of all SCU events.\n\n
 346:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The status is read from the SRRAW register. To check the status of a particular 
 347:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * event, the returned value should be masked with the bit mask of the event. The bitmask
 348:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * of events can be obtained using the type @ref XMC_SCU_INTERRUPT_EVENT_t. Multiple events'
 349:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * status can be checked by combining the bit masks using \a OR operation. 
 350:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * After detecting the event, the event status should be cleared using software to detect the event
 351:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 352:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_INTERRUPT_ClearEventStatus(), XMC_SCU_INTERRUPT_TriggerEvent(), XMC_SCU_INTERRUPT_SetEve
 353:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 354:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void);
 355:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 356:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 357:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 358:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event  Bit mask of the events to clear. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_t
 359:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 360:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 361:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 362:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 363:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 364:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Clears the event status bit in SRRAW register.\n\n
 365:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The events are cleared by writing value 1 to their bit positions in the SRCLR register.
 366:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The API can be used when polling method is used. After detecting the event, the event status
 367:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * should be cleared using software to detect the event again.
 368:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 369:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 370:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_INTERUPT_GetEventStatus(), XMC_SCU_INTERRUPT_TriggerEvent() \n\n\n
 371:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 372:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event);
 373:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 374:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 375:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 376:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Status representing the reason for device reset.
 377:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 378:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 379:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the value representing the reason for device reset.\n\n
 380:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The return value is an encoded word, which can indicate multiple reasons for the last reset. Eac
 381:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * returned word is representative of a last reset cause. The returned value should be appropriatel
 382:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * the cause of reset. 
 383:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The cause of the last reset gets automatically stored in 
 384:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * the \a SCU_RSTSTAT register. The reset status shall be reset after each
 385:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * startup in order to ensure consistent source indication after the next reset.
 386:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \b Range: The type @ref XMC_SCU_RESET_REASON_t can be used to get the bit masks of the reset cau
 387:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 388:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 389:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_RESET_ClearDeviceResetReason() \n\n\n
 390:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 391:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_RESET_GetDeviceResetReason(void)
 392:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** {
 393:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****   return ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_RSTSTAT_Msk);
 394:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** }
 395:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 396:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None 
 397:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 398:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 399:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Clears the reset reason bits in the reset status register. \n\n
 400:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Clearing of the reset status information in the \a SCU_RSTSTAT register via register bit \a RSTC
 401:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * recommended to ensure a clear indication of the cause of next reset.
 402:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 403:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 404:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_RESET_GetDeviceResetReason() \n\n\n
 405:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 406:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_RESET_ClearDeviceResetReason(void)
 407:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** {
 408:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****   /* Clear RSTSTAT.RSTSTAT bitfield */
 409:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****   SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_RSCLR_Msk;
 410:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** }
 411:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  
 412:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 413:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Value of CPU clock frequency.
 414:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 415:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 416:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the vlaue of CPU clock frequency.\n\n
 417:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The value is stored in a global variable \a \b SystemCoreClock.
 418:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * It is updated when the clock configuration is done using the SCU LLD APIs.
 419:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The value represents the frequency of clock used for CPU operation.
 420:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \b Range: Value is of type uint32_t, and gives the value of frequency in Hertz.
 421:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 422:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 423:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 424:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 425:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
 426:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** {
 427:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****   return SystemCoreClock;
 428:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** }
 429:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 430:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 431:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Value of peripheral clock frequency in Hertz.
 432:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 433:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 434:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the vlaue of clock frequency at which the peripherals are working.\n\n
 435:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The value is derived from the CPU frequency. \b Range: Value is of type uint32_t. It is represen
 436:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 437:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetCpuClockFrequency(),XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 438:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 439:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void); 
 440:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 441:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** #if(UC_SERIES != XMC45)
 442:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  
 443:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 444:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 445:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @param  peripheral The peripheral for which the clock has to be gated. \b Range: Use type @ref X
 446:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                    to identify the peripheral clock to be gated.
 447:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 448:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 449:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 450:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 451:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Blocks the supply of clock to the selected peripheral.\n\n
 452:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Clock gating helps in reducing the power consumption. User can selectively gate the clocks of un
 453:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC1
 454:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * fPCLK is the source of clock to various peripherals. Some peripherals support clock gate. Such a
 455:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * the clock supply for the selected peripheral.
 456:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Software can request for individual gating of such peripheral clocks by enabling the \a SCU_CGAT
 457:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * register bit field. Every bit in \a SCU_CGATSET0 register is protected by the bit protection sch
 458:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * bit fields are handled internally.
 459:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 460:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC4
 461:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * fPERI is the source of clock to various peripherals. Some peripherals support clock gate. Such a
 462:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * the clock supply for the selected peripheral.
 463:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Software can request for individual gating of such peripheral clocks by enabling one of the \a
 464:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * SCU_CGATSET0, \a SCU_CGATSET1 or \a SCU_CGATSET2 register bitfields.
 465:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * 
 466:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 467:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Note: Clock gating shall not be activated unless the module is in reset state. So use \a
 468:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_IsPeripheralClockGated() API before enabling the gating of any peripheral.
 469:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 470:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_IsPeripheralClockGated(), XMC_SCU_CLOCK_UngatePeripheralClock() \n\n\n
 471:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 472:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral);
 473:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  
 474:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 475:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 476:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @param  peripheral  The peripheral for which the clock has to be ungated. \b Range: Use type @re
 477:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                    to identify the peripheral.
 478:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 479:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 480:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 481:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 482:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Enables the supply of clock to the selected peripheral.\n\n
 483:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * By default when the device powers on, the peripheral clock will be gated for the 
 484:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * peripherals that support clock gating.
 485:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The peripheral clock should be enabled before using it for any functionality.
 486:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC1
 487:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * fPCLK is the source of clock to various peripherals. Some peripherals support clock gate.
 488:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Software can request for individual ungating of such peripheral clocks by setting respective bit
 489:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * in the \a SCU_CGATCLR0 register.
 490:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 491:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC4
 492:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * fPERI is the source of clock to various peripherals. Some peripherals support clock gate.
 493:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Software can request for individual ungating of such peripheral clocks by setting the respective
 494:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * SCU_CGATCLR0, \a SCU_CGATCLR1 or \a SCU_CGATCLR2 registers.
 495:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 496:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 497:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 498:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_IsPeripheralClockGated(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 499:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 500:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral);
 501:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 502:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 503:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 504:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @param  peripheral  The peripheral for which the check for clock gating has to be done. 
 505:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_PERIPHERAL_CLOCK_t to identify the peripheral
 506:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 507:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return bool Status of the peripheral clock gating. \b Range: true if the peripheral clock is ga
 508:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *              false if the peripheral clock ungated(gate de-asserted).
 509:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 510:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 511:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Gives the status of peripheral clock gating.\n\n
 512:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC1
 513:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Checks the status of peripheral clock gating using the register CGATSTAT0.
 514:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 515:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC4
 516:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Checks the status of peripheral clock gating using one of CGATSTAT0, CGATSTAT1 or CGATSTAT2 regi
 517:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 518:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * It is recommended to use this API before
 519:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * enabling the gating of any peripherals through \a XMC_SCU_CLOCK_GatePeripheralClock() API.
 520:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 521:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 522:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_UngatePeripheralClock(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 523:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 524:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral);
 525:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** #endif
 526:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 527:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** 
 528:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** /**
 529:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * @return  uint32_t  Status of the register mirror update.\n
 530:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                    \b Range: Use the bit mask of the SCU_GENERAL_MIRRSTS register for the mirror
 531:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                    interest. e.g.: SCU_GENERAL_MIRRSTS_RTC_CTR_Msk. Multiple update events can b
 532:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *                    using \a OR operation.
 533:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  *
 534:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 535:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the status of hibernate domain register update, when the respective mirror registers ar
 536:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * The hibernate domain is connected to the core domain via SPI serial communication. MIRRSTS is a 
 537:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * representing the communication of changed value of a mirror register to its corresponding regist
 538:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * hibernate domain. The bit fields of the register indicate
 539:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * that a corresponding register of the hibernate domain is ready to accept a write or that the com
 540:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * is busy with executing the previous operation.\n
 541:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpos
 542:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****  */
 543:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
 544:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** {
  74              	 .loc 2 544 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI4:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 00AF     	 add r7,sp,#0
  84              	.LCFI5:
  85              	 .cfi_def_cfa_register 7
 545:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h ****   return(SCU_GENERAL->MIRRSTS);
  86              	 .loc 2 545 0
  87 0004 034B     	 ldr r3,.L7
  88 0006 D3F8C430 	 ldr r3,[r3,#196]
 546:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_scu.h **** }
  89              	 .loc 2 546 0
  90 000a 1846     	 mov r0,r3
  91 000c BD46     	 mov sp,r7
  92              	.LCFI6:
  93              	 .cfi_def_cfa_register 13
  94              	 
  95 000e 5DF8047B 	 ldr r7,[sp],#4
  96              	.LCFI7:
  97              	 .cfi_restore 7
  98              	 .cfi_def_cfa_offset 0
  99 0012 7047     	 bx lr
 100              	.L8:
 101              	 .align 2
 102              	.L7:
 103 0014 00400050 	 .word 1342193664
 104              	 .cfi_endproc
 105              	.LFE175:
 107              	 .section .text.XMC_RTC_Enable,"ax",%progbits
 108              	 .align 2
 109              	 .global XMC_RTC_Enable
 110              	 .thumb
 111              	 .thumb_func
 113              	XMC_RTC_Enable:
 114              	.LFB176:
 115              	 .file 3 "../Libraries/XMCLib/src/xmc4_rtc.c"
   1:../Libraries/XMCLib/src/xmc4_rtc.c **** /**
   2:../Libraries/XMCLib/src/xmc4_rtc.c ****  * @file xmc4_rtc.c
   3:../Libraries/XMCLib/src/xmc4_rtc.c ****  * @date 2017-08-04
   4:../Libraries/XMCLib/src/xmc4_rtc.c ****  *
   5:../Libraries/XMCLib/src/xmc4_rtc.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc4_rtc.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc4_rtc.c ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc4_rtc.c ****  *
   9:../Libraries/XMCLib/src/xmc4_rtc.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc4_rtc.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc4_rtc.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc4_rtc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc4_rtc.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc4_rtc.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc4_rtc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc4_rtc.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc4_rtc.c ****  * 
  18:../Libraries/XMCLib/src/xmc4_rtc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc4_rtc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc4_rtc.c ****  * 
  21:../Libraries/XMCLib/src/xmc4_rtc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc4_rtc.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc4_rtc.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc4_rtc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc4_rtc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc4_rtc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc4_rtc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc4_rtc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc4_rtc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc4_rtc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc4_rtc.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc4_rtc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc4_rtc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc4_rtc.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc4_rtc.c ****  *
  36:../Libraries/XMCLib/src/xmc4_rtc.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc4_rtc.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc4_rtc.c ****  *
  39:../Libraries/XMCLib/src/xmc4_rtc.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc4_rtc.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc4_rtc.c ****  *      
  42:../Libraries/XMCLib/src/xmc4_rtc.c ****  * 2016-03-09:
  43:../Libraries/XMCLib/src/xmc4_rtc.c ****  *     - Optimize write only registers
  44:../Libraries/XMCLib/src/xmc4_rtc.c ****  *      
  45:../Libraries/XMCLib/src/xmc4_rtc.c ****  * 2017-08-04:
  46:../Libraries/XMCLib/src/xmc4_rtc.c ****  *     - Changed XMC_RTC_EnableHibernationWakeUp() and XMC_RTC_DisableHibernationWakeUpcheck() 
  47:../Libraries/XMCLib/src/xmc4_rtc.c ****  *       Check SCU_MIRRSTS to ensure that no transfer over serial interface is pending to the RTC_C
  48:../Libraries/XMCLib/src/xmc4_rtc.c ****  *
  49:../Libraries/XMCLib/src/xmc4_rtc.c ****  * @endcond 
  50:../Libraries/XMCLib/src/xmc4_rtc.c ****  *
  51:../Libraries/XMCLib/src/xmc4_rtc.c ****  */
  52:../Libraries/XMCLib/src/xmc4_rtc.c **** 
  53:../Libraries/XMCLib/src/xmc4_rtc.c **** /**
  54:../Libraries/XMCLib/src/xmc4_rtc.c ****  * @brief RTC driver for XMC microcontroller family.
  55:../Libraries/XMCLib/src/xmc4_rtc.c ****  *
  56:../Libraries/XMCLib/src/xmc4_rtc.c ****  */
  57:../Libraries/XMCLib/src/xmc4_rtc.c **** 
  58:../Libraries/XMCLib/src/xmc4_rtc.c **** /**************************************************************************************************
  59:../Libraries/XMCLib/src/xmc4_rtc.c ****  * HEADER FILES
  60:../Libraries/XMCLib/src/xmc4_rtc.c ****  **************************************************************************************************
  61:../Libraries/XMCLib/src/xmc4_rtc.c **** #include <xmc_rtc.h>
  62:../Libraries/XMCLib/src/xmc4_rtc.c **** 
  63:../Libraries/XMCLib/src/xmc4_rtc.c **** #if UC_FAMILY == XMC4
  64:../Libraries/XMCLib/src/xmc4_rtc.c **** #include <xmc_scu.h>
  65:../Libraries/XMCLib/src/xmc4_rtc.c **** 
  66:../Libraries/XMCLib/src/xmc4_rtc.c **** /**************************************************************************************************
  67:../Libraries/XMCLib/src/xmc4_rtc.c ****  * API IMPLEMENTATION
  68:../Libraries/XMCLib/src/xmc4_rtc.c ****  **************************************************************************************************
  69:../Libraries/XMCLib/src/xmc4_rtc.c **** 
  70:../Libraries/XMCLib/src/xmc4_rtc.c **** /*
  71:../Libraries/XMCLib/src/xmc4_rtc.c ****  * Enables RTC peripheral for programming its registers
  72:../Libraries/XMCLib/src/xmc4_rtc.c ****  */
  73:../Libraries/XMCLib/src/xmc4_rtc.c **** void XMC_RTC_Enable(void)
  74:../Libraries/XMCLib/src/xmc4_rtc.c **** {
 116              	 .loc 3 74 0
 117              	 .cfi_startproc
 118              	 
 119              	 
 120 0000 80B5     	 push {r7,lr}
 121              	.LCFI8:
 122              	 .cfi_def_cfa_offset 8
 123              	 .cfi_offset 7,-8
 124              	 .cfi_offset 14,-4
 125 0002 00AF     	 add r7,sp,#0
 126              	.LCFI9:
 127              	 .cfi_def_cfa_register 7
  75:../Libraries/XMCLib/src/xmc4_rtc.c ****   XMC_SCU_HIB_EnableHibernateDomain();
 128              	 .loc 3 75 0
 129 0004 FFF7FEFF 	 bl XMC_SCU_HIB_EnableHibernateDomain
  76:../Libraries/XMCLib/src/xmc4_rtc.c **** }
 130              	 .loc 3 76 0
 131 0008 80BD     	 pop {r7,pc}
 132              	 .cfi_endproc
 133              	.LFE176:
 135 000a 00BF     	 .section .text.XMC_RTC_Disable,"ax",%progbits
 136              	 .align 2
 137              	 .global XMC_RTC_Disable
 138              	 .thumb
 139              	 .thumb_func
 141              	XMC_RTC_Disable:
 142              	.LFB177:
  77:../Libraries/XMCLib/src/xmc4_rtc.c **** 
  78:../Libraries/XMCLib/src/xmc4_rtc.c **** /*
  79:../Libraries/XMCLib/src/xmc4_rtc.c ****  * Disables RTC peripheral for programming its registers
  80:../Libraries/XMCLib/src/xmc4_rtc.c ****  */
  81:../Libraries/XMCLib/src/xmc4_rtc.c **** void XMC_RTC_Disable(void)
  82:../Libraries/XMCLib/src/xmc4_rtc.c **** {
 143              	 .loc 3 82 0
 144              	 .cfi_startproc
 145              	 
 146              	 
 147              	 
 148 0000 80B4     	 push {r7}
 149              	.LCFI10:
 150              	 .cfi_def_cfa_offset 4
 151              	 .cfi_offset 7,-4
 152 0002 00AF     	 add r7,sp,#0
 153              	.LCFI11:
 154              	 .cfi_def_cfa_register 7
  83:../Libraries/XMCLib/src/xmc4_rtc.c ****   /*
  84:../Libraries/XMCLib/src/xmc4_rtc.c ****    * Empty because disabling the hibernate
  85:../Libraries/XMCLib/src/xmc4_rtc.c ****    * domain is not done intentionally.
  86:../Libraries/XMCLib/src/xmc4_rtc.c ****    */
  87:../Libraries/XMCLib/src/xmc4_rtc.c **** }
 155              	 .loc 3 87 0
 156 0004 BD46     	 mov sp,r7
 157              	.LCFI12:
 158              	 .cfi_def_cfa_register 13
 159              	 
 160 0006 5DF8047B 	 ldr r7,[sp],#4
 161              	.LCFI13:
 162              	 .cfi_restore 7
 163              	 .cfi_def_cfa_offset 0
 164 000a 7047     	 bx lr
 165              	 .cfi_endproc
 166              	.LFE177:
 168              	 .section .text.XMC_RTC_IsEnabled,"ax",%progbits
 169              	 .align 2
 170              	 .global XMC_RTC_IsEnabled
 171              	 .thumb
 172              	 .thumb_func
 174              	XMC_RTC_IsEnabled:
 175              	.LFB178:
  88:../Libraries/XMCLib/src/xmc4_rtc.c **** 
  89:../Libraries/XMCLib/src/xmc4_rtc.c **** /*
  90:../Libraries/XMCLib/src/xmc4_rtc.c ****  * Checks RTC peripheral is enabled for programming to its registers
  91:../Libraries/XMCLib/src/xmc4_rtc.c ****  */
  92:../Libraries/XMCLib/src/xmc4_rtc.c **** bool XMC_RTC_IsEnabled(void)
  93:../Libraries/XMCLib/src/xmc4_rtc.c **** {
 176              	 .loc 3 93 0
 177              	 .cfi_startproc
 178              	 
 179              	 
 180 0000 80B5     	 push {r7,lr}
 181              	.LCFI14:
 182              	 .cfi_def_cfa_offset 8
 183              	 .cfi_offset 7,-8
 184              	 .cfi_offset 14,-4
 185 0002 00AF     	 add r7,sp,#0
 186              	.LCFI15:
 187              	 .cfi_def_cfa_register 7
  94:../Libraries/XMCLib/src/xmc4_rtc.c ****   return XMC_SCU_HIB_IsHibernateDomainEnabled();
 188              	 .loc 3 94 0
 189 0004 FFF7FEFF 	 bl XMC_SCU_HIB_IsHibernateDomainEnabled
 190 0008 0346     	 mov r3,r0
  95:../Libraries/XMCLib/src/xmc4_rtc.c **** }
 191              	 .loc 3 95 0
 192 000a 1846     	 mov r0,r3
 193 000c 80BD     	 pop {r7,pc}
 194              	 .cfi_endproc
 195              	.LFE178:
 197 000e 00BF     	 .section .text.XMC_RTC_Init,"ax",%progbits
 198              	 .align 2
 199              	 .global XMC_RTC_Init
 200              	 .thumb
 201              	 .thumb_func
 203              	XMC_RTC_Init:
 204              	.LFB179:
  96:../Libraries/XMCLib/src/xmc4_rtc.c **** 
  97:../Libraries/XMCLib/src/xmc4_rtc.c **** /*
  98:../Libraries/XMCLib/src/xmc4_rtc.c ****  * Initialize the RTC peripheral
  99:../Libraries/XMCLib/src/xmc4_rtc.c ****  */
 100:../Libraries/XMCLib/src/xmc4_rtc.c **** XMC_RTC_STATUS_t XMC_RTC_Init(const XMC_RTC_CONFIG_t *const config)
 101:../Libraries/XMCLib/src/xmc4_rtc.c **** {
 205              	 .loc 3 101 0
 206              	 .cfi_startproc
 207              	 
 208              	 
 209 0000 80B5     	 push {r7,lr}
 210              	.LCFI16:
 211              	 .cfi_def_cfa_offset 8
 212              	 .cfi_offset 7,-8
 213              	 .cfi_offset 14,-4
 214 0002 82B0     	 sub sp,sp,#8
 215              	.LCFI17:
 216              	 .cfi_def_cfa_offset 16
 217 0004 00AF     	 add r7,sp,#0
 218              	.LCFI18:
 219              	 .cfi_def_cfa_register 7
 220 0006 7860     	 str r0,[r7,#4]
 102:../Libraries/XMCLib/src/xmc4_rtc.c ****   if (XMC_RTC_IsRunning() == false)
 221              	 .loc 3 102 0
 222 0008 FFF7FEFF 	 bl XMC_RTC_IsRunning
 223 000c 0346     	 mov r3,r0
 224 000e 83F00103 	 eor r3,r3,#1
 225 0012 DBB2     	 uxtb r3,r3
 226 0014 002B     	 cmp r3,#0
 227 0016 3ED0     	 beq .L14
 103:../Libraries/XMCLib/src/xmc4_rtc.c ****   {
 104:../Libraries/XMCLib/src/xmc4_rtc.c ****     if (XMC_SCU_HIB_IsHibernateDomainEnabled() == false)
 228              	 .loc 3 104 0
 229 0018 FFF7FEFF 	 bl XMC_SCU_HIB_IsHibernateDomainEnabled
 230 001c 0346     	 mov r3,r0
 231 001e 83F00103 	 eor r3,r3,#1
 232 0022 DBB2     	 uxtb r3,r3
 233 0024 002B     	 cmp r3,#0
 234 0026 01D0     	 beq .L15
 105:../Libraries/XMCLib/src/xmc4_rtc.c ****     {
 106:../Libraries/XMCLib/src/xmc4_rtc.c ****       XMC_SCU_HIB_EnableHibernateDomain();
 235              	 .loc 3 106 0
 236 0028 FFF7FEFF 	 bl XMC_SCU_HIB_EnableHibernateDomain
 237              	.L15:
 107:../Libraries/XMCLib/src/xmc4_rtc.c ****     }
 108:../Libraries/XMCLib/src/xmc4_rtc.c ****     
 109:../Libraries/XMCLib/src/xmc4_rtc.c ****     XMC_RTC_SetPrescaler(config->prescaler);
 238              	 .loc 3 109 0
 239 002c 7B68     	 ldr r3,[r7,#4]
 240 002e 1B8A     	 ldrh r3,[r3,#16]
 241 0030 1846     	 mov r0,r3
 242 0032 FFF7FEFF 	 bl XMC_RTC_SetPrescaler
 110:../Libraries/XMCLib/src/xmc4_rtc.c ****     
 111:../Libraries/XMCLib/src/xmc4_rtc.c ****     while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 243              	 .loc 3 111 0
 244 0036 00BF     	 nop
 245              	.L16:
 246              	 .loc 3 111 0 is_stmt 0 discriminator 1
 247 0038 FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 248 003c 0346     	 mov r3,r0
 249 003e 03F40063 	 and r3,r3,#2048
 250 0042 002B     	 cmp r3,#0
 251 0044 F8D1     	 bne .L16
 112:../Libraries/XMCLib/src/xmc4_rtc.c ****     {
 113:../Libraries/XMCLib/src/xmc4_rtc.c ****       /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 114:../Libraries/XMCLib/src/xmc4_rtc.c ****     }
 115:../Libraries/XMCLib/src/xmc4_rtc.c ****     RTC->TIM0 = config->time.raw0;
 252              	 .loc 3 115 0 is_stmt 1
 253 0046 164A     	 ldr r2,.L21
 254 0048 7B68     	 ldr r3,[r7,#4]
 255 004a 1B68     	 ldr r3,[r3]
 256 004c 1362     	 str r3,[r2,#32]
 116:../Libraries/XMCLib/src/xmc4_rtc.c ****     
 117:../Libraries/XMCLib/src/xmc4_rtc.c ****     while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 257              	 .loc 3 117 0
 258 004e 00BF     	 nop
 259              	.L17:
 260              	 .loc 3 117 0 is_stmt 0 discriminator 1
 261 0050 FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 262 0054 0346     	 mov r3,r0
 263 0056 03F48053 	 and r3,r3,#4096
 264 005a 002B     	 cmp r3,#0
 265 005c F8D1     	 bne .L17
 118:../Libraries/XMCLib/src/xmc4_rtc.c ****     {
 119:../Libraries/XMCLib/src/xmc4_rtc.c ****       /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 120:../Libraries/XMCLib/src/xmc4_rtc.c ****     }
 121:../Libraries/XMCLib/src/xmc4_rtc.c ****     RTC->TIM1 = config->time.raw1;
 266              	 .loc 3 121 0 is_stmt 1
 267 005e 104A     	 ldr r2,.L21
 268 0060 7B68     	 ldr r3,[r7,#4]
 269 0062 5B68     	 ldr r3,[r3,#4]
 270 0064 5362     	 str r3,[r2,#36]
 122:../Libraries/XMCLib/src/xmc4_rtc.c ****     
 123:../Libraries/XMCLib/src/xmc4_rtc.c ****     while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk) != 0U)
 271              	 .loc 3 123 0
 272 0066 00BF     	 nop
 273              	.L18:
 274              	 .loc 3 123 0 is_stmt 0 discriminator 1
 275 0068 FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 276 006c 0346     	 mov r3,r0
 277 006e 03F40073 	 and r3,r3,#512
 278 0072 002B     	 cmp r3,#0
 279 0074 F8D1     	 bne .L18
 124:../Libraries/XMCLib/src/xmc4_rtc.c ****     {
 125:../Libraries/XMCLib/src/xmc4_rtc.c ****       /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 126:../Libraries/XMCLib/src/xmc4_rtc.c ****     }
 127:../Libraries/XMCLib/src/xmc4_rtc.c ****     RTC->ATIM0 = config->alarm.raw0;
 280              	 .loc 3 127 0 is_stmt 1
 281 0076 0A4A     	 ldr r2,.L21
 282 0078 7B68     	 ldr r3,[r7,#4]
 283 007a 9B68     	 ldr r3,[r3,#8]
 284 007c 9361     	 str r3,[r2,#24]
 128:../Libraries/XMCLib/src/xmc4_rtc.c ****     
 129:../Libraries/XMCLib/src/xmc4_rtc.c ****     while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk) != 0U)
 285              	 .loc 3 129 0
 286 007e 00BF     	 nop
 287              	.L19:
 288              	 .loc 3 129 0 is_stmt 0 discriminator 1
 289 0080 FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 290 0084 0346     	 mov r3,r0
 291 0086 03F48063 	 and r3,r3,#1024
 292 008a 002B     	 cmp r3,#0
 293 008c F8D1     	 bne .L19
 130:../Libraries/XMCLib/src/xmc4_rtc.c ****     {
 131:../Libraries/XMCLib/src/xmc4_rtc.c ****       /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 132:../Libraries/XMCLib/src/xmc4_rtc.c ****     }
 133:../Libraries/XMCLib/src/xmc4_rtc.c ****     RTC->ATIM1 = config->alarm.raw1;    
 294              	 .loc 3 133 0 is_stmt 1
 295 008e 044A     	 ldr r2,.L21
 296 0090 7B68     	 ldr r3,[r7,#4]
 297 0092 DB68     	 ldr r3,[r3,#12]
 298 0094 D361     	 str r3,[r2,#28]
 299              	.L14:
 134:../Libraries/XMCLib/src/xmc4_rtc.c ****   }  
 135:../Libraries/XMCLib/src/xmc4_rtc.c ****   return XMC_RTC_STATUS_OK;
 300              	 .loc 3 135 0
 301 0096 0023     	 movs r3,#0
 136:../Libraries/XMCLib/src/xmc4_rtc.c **** }
 302              	 .loc 3 136 0
 303 0098 1846     	 mov r0,r3
 304 009a 0837     	 adds r7,r7,#8
 305              	.LCFI19:
 306              	 .cfi_def_cfa_offset 8
 307 009c BD46     	 mov sp,r7
 308              	.LCFI20:
 309              	 .cfi_def_cfa_register 13
 310              	 
 311 009e 80BD     	 pop {r7,pc}
 312              	.L22:
 313              	 .align 2
 314              	.L21:
 315 00a0 004A0050 	 .word 1342196224
 316              	 .cfi_endproc
 317              	.LFE179:
 319              	 .section .text.XMC_RTC_EnableEvent,"ax",%progbits
 320              	 .align 2
 321              	 .global XMC_RTC_EnableEvent
 322              	 .thumb
 323              	 .thumb_func
 325              	XMC_RTC_EnableEvent:
 326              	.LFB180:
 137:../Libraries/XMCLib/src/xmc4_rtc.c **** 
 138:../Libraries/XMCLib/src/xmc4_rtc.c **** /*
 139:../Libraries/XMCLib/src/xmc4_rtc.c ****  * Enable RTC periodic and alarm event(s)
 140:../Libraries/XMCLib/src/xmc4_rtc.c ****  */ 
 141:../Libraries/XMCLib/src/xmc4_rtc.c **** void XMC_RTC_EnableEvent(const uint32_t event)
 142:../Libraries/XMCLib/src/xmc4_rtc.c **** {
 327              	 .loc 3 142 0
 328              	 .cfi_startproc
 329              	 
 330              	 
 331 0000 80B5     	 push {r7,lr}
 332              	.LCFI21:
 333              	 .cfi_def_cfa_offset 8
 334              	 .cfi_offset 7,-8
 335              	 .cfi_offset 14,-4
 336 0002 82B0     	 sub sp,sp,#8
 337              	.LCFI22:
 338              	 .cfi_def_cfa_offset 16
 339 0004 00AF     	 add r7,sp,#0
 340              	.LCFI23:
 341              	 .cfi_def_cfa_register 7
 342 0006 7860     	 str r0,[r7,#4]
 143:../Libraries/XMCLib/src/xmc4_rtc.c ****   while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_MSKSR_Msk) != 0U)
 343              	 .loc 3 143 0
 344 0008 00BF     	 nop
 345              	.L24:
 346              	 .loc 3 143 0 is_stmt 0 discriminator 1
 347 000a FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 348 000e 0346     	 mov r3,r0
 349 0010 03F48043 	 and r3,r3,#16384
 350 0014 002B     	 cmp r3,#0
 351 0016 F8D1     	 bne .L24
 144:../Libraries/XMCLib/src/xmc4_rtc.c ****   {
 145:../Libraries/XMCLib/src/xmc4_rtc.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 146:../Libraries/XMCLib/src/xmc4_rtc.c ****   }
 147:../Libraries/XMCLib/src/xmc4_rtc.c ****   RTC->MSKSR |= event;
 352              	 .loc 3 147 0 is_stmt 1
 353 0018 0449     	 ldr r1,.L25
 354 001a 044B     	 ldr r3,.L25
 355 001c 1A69     	 ldr r2,[r3,#16]
 356 001e 7B68     	 ldr r3,[r7,#4]
 357 0020 1343     	 orrs r3,r3,r2
 358 0022 0B61     	 str r3,[r1,#16]
 148:../Libraries/XMCLib/src/xmc4_rtc.c **** }
 359              	 .loc 3 148 0
 360 0024 0837     	 adds r7,r7,#8
 361              	.LCFI24:
 362              	 .cfi_def_cfa_offset 8
 363 0026 BD46     	 mov sp,r7
 364              	.LCFI25:
 365              	 .cfi_def_cfa_register 13
 366              	 
 367 0028 80BD     	 pop {r7,pc}
 368              	.L26:
 369 002a 00BF     	 .align 2
 370              	.L25:
 371 002c 004A0050 	 .word 1342196224
 372              	 .cfi_endproc
 373              	.LFE180:
 375              	 .section .text.XMC_RTC_DisableEvent,"ax",%progbits
 376              	 .align 2
 377              	 .global XMC_RTC_DisableEvent
 378              	 .thumb
 379              	 .thumb_func
 381              	XMC_RTC_DisableEvent:
 382              	.LFB181:
 149:../Libraries/XMCLib/src/xmc4_rtc.c **** 
 150:../Libraries/XMCLib/src/xmc4_rtc.c **** /*
 151:../Libraries/XMCLib/src/xmc4_rtc.c ****  * Disable RTC periodic and alarm event(s)
 152:../Libraries/XMCLib/src/xmc4_rtc.c ****  */ 
 153:../Libraries/XMCLib/src/xmc4_rtc.c **** void XMC_RTC_DisableEvent(const uint32_t event)
 154:../Libraries/XMCLib/src/xmc4_rtc.c **** {
 383              	 .loc 3 154 0
 384              	 .cfi_startproc
 385              	 
 386              	 
 387 0000 80B5     	 push {r7,lr}
 388              	.LCFI26:
 389              	 .cfi_def_cfa_offset 8
 390              	 .cfi_offset 7,-8
 391              	 .cfi_offset 14,-4
 392 0002 82B0     	 sub sp,sp,#8
 393              	.LCFI27:
 394              	 .cfi_def_cfa_offset 16
 395 0004 00AF     	 add r7,sp,#0
 396              	.LCFI28:
 397              	 .cfi_def_cfa_register 7
 398 0006 7860     	 str r0,[r7,#4]
 155:../Libraries/XMCLib/src/xmc4_rtc.c ****   while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_MSKSR_Msk) != 0U)
 399              	 .loc 3 155 0
 400 0008 00BF     	 nop
 401              	.L28:
 402              	 .loc 3 155 0 is_stmt 0 discriminator 1
 403 000a FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 404 000e 0346     	 mov r3,r0
 405 0010 03F48043 	 and r3,r3,#16384
 406 0014 002B     	 cmp r3,#0
 407 0016 F8D1     	 bne .L28
 156:../Libraries/XMCLib/src/xmc4_rtc.c ****   {
 157:../Libraries/XMCLib/src/xmc4_rtc.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 158:../Libraries/XMCLib/src/xmc4_rtc.c ****   }
 159:../Libraries/XMCLib/src/xmc4_rtc.c ****   RTC->MSKSR &= ~event;
 408              	 .loc 3 159 0 is_stmt 1
 409 0018 0449     	 ldr r1,.L29
 410 001a 044B     	 ldr r3,.L29
 411 001c 1A69     	 ldr r2,[r3,#16]
 412 001e 7B68     	 ldr r3,[r7,#4]
 413 0020 DB43     	 mvns r3,r3
 414 0022 1340     	 ands r3,r3,r2
 415 0024 0B61     	 str r3,[r1,#16]
 160:../Libraries/XMCLib/src/xmc4_rtc.c **** }
 416              	 .loc 3 160 0
 417 0026 0837     	 adds r7,r7,#8
 418              	.LCFI29:
 419              	 .cfi_def_cfa_offset 8
 420 0028 BD46     	 mov sp,r7
 421              	.LCFI30:
 422              	 .cfi_def_cfa_register 13
 423              	 
 424 002a 80BD     	 pop {r7,pc}
 425              	.L30:
 426              	 .align 2
 427              	.L29:
 428 002c 004A0050 	 .word 1342196224
 429              	 .cfi_endproc
 430              	.LFE181:
 432              	 .section .text.XMC_RTC_ClearEvent,"ax",%progbits
 433              	 .align 2
 434              	 .global XMC_RTC_ClearEvent
 435              	 .thumb
 436              	 .thumb_func
 438              	XMC_RTC_ClearEvent:
 439              	.LFB182:
 161:../Libraries/XMCLib/src/xmc4_rtc.c **** 
 162:../Libraries/XMCLib/src/xmc4_rtc.c **** /*
 163:../Libraries/XMCLib/src/xmc4_rtc.c ****  * Clear RTC periodic and alarm event(s)
 164:../Libraries/XMCLib/src/xmc4_rtc.c ****  */ 
 165:../Libraries/XMCLib/src/xmc4_rtc.c **** void XMC_RTC_ClearEvent(const uint32_t event)
 166:../Libraries/XMCLib/src/xmc4_rtc.c **** {
 440              	 .loc 3 166 0
 441              	 .cfi_startproc
 442              	 
 443              	 
 444 0000 80B5     	 push {r7,lr}
 445              	.LCFI31:
 446              	 .cfi_def_cfa_offset 8
 447              	 .cfi_offset 7,-8
 448              	 .cfi_offset 14,-4
 449 0002 82B0     	 sub sp,sp,#8
 450              	.LCFI32:
 451              	 .cfi_def_cfa_offset 16
 452 0004 00AF     	 add r7,sp,#0
 453              	.LCFI33:
 454              	 .cfi_def_cfa_register 7
 455 0006 7860     	 str r0,[r7,#4]
 167:../Libraries/XMCLib/src/xmc4_rtc.c ****   while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CLRSR_Msk) != 0U)
 456              	 .loc 3 167 0
 457 0008 00BF     	 nop
 458              	.L32:
 459              	 .loc 3 167 0 is_stmt 0 discriminator 1
 460 000a FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 461 000e 0346     	 mov r3,r0
 462 0010 03F40043 	 and r3,r3,#32768
 463 0014 002B     	 cmp r3,#0
 464 0016 F8D1     	 bne .L32
 168:../Libraries/XMCLib/src/xmc4_rtc.c ****   {
 169:../Libraries/XMCLib/src/xmc4_rtc.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 170:../Libraries/XMCLib/src/xmc4_rtc.c ****   }
 171:../Libraries/XMCLib/src/xmc4_rtc.c ****   RTC->CLRSR = event;
 465              	 .loc 3 171 0 is_stmt 1
 466 0018 024A     	 ldr r2,.L33
 467 001a 7B68     	 ldr r3,[r7,#4]
 468 001c 5361     	 str r3,[r2,#20]
 172:../Libraries/XMCLib/src/xmc4_rtc.c **** }
 469              	 .loc 3 172 0
 470 001e 0837     	 adds r7,r7,#8
 471              	.LCFI34:
 472              	 .cfi_def_cfa_offset 8
 473 0020 BD46     	 mov sp,r7
 474              	.LCFI35:
 475              	 .cfi_def_cfa_register 13
 476              	 
 477 0022 80BD     	 pop {r7,pc}
 478              	.L34:
 479              	 .align 2
 480              	.L33:
 481 0024 004A0050 	 .word 1342196224
 482              	 .cfi_endproc
 483              	.LFE182:
 485              	 .section .text.XMC_RTC_EnableHibernationWakeUp,"ax",%progbits
 486              	 .align 2
 487              	 .global XMC_RTC_EnableHibernationWakeUp
 488              	 .thumb
 489              	 .thumb_func
 491              	XMC_RTC_EnableHibernationWakeUp:
 492              	.LFB183:
 173:../Libraries/XMCLib/src/xmc4_rtc.c **** 
 174:../Libraries/XMCLib/src/xmc4_rtc.c **** void XMC_RTC_EnableHibernationWakeUp(const uint32_t event)
 175:../Libraries/XMCLib/src/xmc4_rtc.c **** {
 493              	 .loc 3 175 0
 494              	 .cfi_startproc
 495              	 
 496              	 
 497 0000 80B5     	 push {r7,lr}
 498              	.LCFI36:
 499              	 .cfi_def_cfa_offset 8
 500              	 .cfi_offset 7,-8
 501              	 .cfi_offset 14,-4
 502 0002 82B0     	 sub sp,sp,#8
 503              	.LCFI37:
 504              	 .cfi_def_cfa_offset 16
 505 0004 00AF     	 add r7,sp,#0
 506              	.LCFI38:
 507              	 .cfi_def_cfa_register 7
 508 0006 7860     	 str r0,[r7,#4]
 176:../Libraries/XMCLib/src/xmc4_rtc.c ****   while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 509              	 .loc 3 176 0
 510 0008 00BF     	 nop
 511              	.L36:
 512              	 .loc 3 176 0 is_stmt 0 discriminator 1
 513 000a FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 514 000e 0346     	 mov r3,r0
 515 0010 03F48073 	 and r3,r3,#256
 516 0014 002B     	 cmp r3,#0
 517 0016 F8D1     	 bne .L36
 177:../Libraries/XMCLib/src/xmc4_rtc.c ****   {
 178:../Libraries/XMCLib/src/xmc4_rtc.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 179:../Libraries/XMCLib/src/xmc4_rtc.c ****   }
 180:../Libraries/XMCLib/src/xmc4_rtc.c ****   RTC->CTR |= event;
 518              	 .loc 3 180 0 is_stmt 1
 519 0018 0449     	 ldr r1,.L37
 520 001a 044B     	 ldr r3,.L37
 521 001c 5A68     	 ldr r2,[r3,#4]
 522 001e 7B68     	 ldr r3,[r7,#4]
 523 0020 1343     	 orrs r3,r3,r2
 524 0022 4B60     	 str r3,[r1,#4]
 181:../Libraries/XMCLib/src/xmc4_rtc.c **** }
 525              	 .loc 3 181 0
 526 0024 0837     	 adds r7,r7,#8
 527              	.LCFI39:
 528              	 .cfi_def_cfa_offset 8
 529 0026 BD46     	 mov sp,r7
 530              	.LCFI40:
 531              	 .cfi_def_cfa_register 13
 532              	 
 533 0028 80BD     	 pop {r7,pc}
 534              	.L38:
 535 002a 00BF     	 .align 2
 536              	.L37:
 537 002c 004A0050 	 .word 1342196224
 538              	 .cfi_endproc
 539              	.LFE183:
 541              	 .section .text.XMC_RTC_DisableHibernationWakeUp,"ax",%progbits
 542              	 .align 2
 543              	 .global XMC_RTC_DisableHibernationWakeUp
 544              	 .thumb
 545              	 .thumb_func
 547              	XMC_RTC_DisableHibernationWakeUp:
 548              	.LFB184:
 182:../Libraries/XMCLib/src/xmc4_rtc.c **** 
 183:../Libraries/XMCLib/src/xmc4_rtc.c **** void XMC_RTC_DisableHibernationWakeUp(const uint32_t event)
 184:../Libraries/XMCLib/src/xmc4_rtc.c **** {
 549              	 .loc 3 184 0
 550              	 .cfi_startproc
 551              	 
 552              	 
 553 0000 80B5     	 push {r7,lr}
 554              	.LCFI41:
 555              	 .cfi_def_cfa_offset 8
 556              	 .cfi_offset 7,-8
 557              	 .cfi_offset 14,-4
 558 0002 82B0     	 sub sp,sp,#8
 559              	.LCFI42:
 560              	 .cfi_def_cfa_offset 16
 561 0004 00AF     	 add r7,sp,#0
 562              	.LCFI43:
 563              	 .cfi_def_cfa_register 7
 564 0006 7860     	 str r0,[r7,#4]
 185:../Libraries/XMCLib/src/xmc4_rtc.c ****   while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 565              	 .loc 3 185 0
 566 0008 00BF     	 nop
 567              	.L40:
 568              	 .loc 3 185 0 is_stmt 0 discriminator 1
 569 000a FFF7FEFF 	 bl XMC_SCU_GetMirrorStatus
 570 000e 0346     	 mov r3,r0
 571 0010 03F48073 	 and r3,r3,#256
 572 0014 002B     	 cmp r3,#0
 573 0016 F8D1     	 bne .L40
 186:../Libraries/XMCLib/src/xmc4_rtc.c ****   {
 187:../Libraries/XMCLib/src/xmc4_rtc.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 188:../Libraries/XMCLib/src/xmc4_rtc.c ****   }
 189:../Libraries/XMCLib/src/xmc4_rtc.c ****   RTC->CTR &= ~event;
 574              	 .loc 3 189 0 is_stmt 1
 575 0018 0449     	 ldr r1,.L41
 576 001a 044B     	 ldr r3,.L41
 577 001c 5A68     	 ldr r2,[r3,#4]
 578 001e 7B68     	 ldr r3,[r7,#4]
 579 0020 DB43     	 mvns r3,r3
 580 0022 1340     	 ands r3,r3,r2
 581 0024 4B60     	 str r3,[r1,#4]
 190:../Libraries/XMCLib/src/xmc4_rtc.c **** }
 582              	 .loc 3 190 0
 583 0026 0837     	 adds r7,r7,#8
 584              	.LCFI44:
 585              	 .cfi_def_cfa_offset 8
 586 0028 BD46     	 mov sp,r7
 587              	.LCFI45:
 588              	 .cfi_def_cfa_register 13
 589              	 
 590 002a 80BD     	 pop {r7,pc}
 591              	.L42:
 592              	 .align 2
 593              	.L41:
 594 002c 004A0050 	 .word 1342196224
 595              	 .cfi_endproc
 596              	.LFE184:
 598              	 .text
 599              	.Letext0:
 600              	 .file 4 "c:\\users\\va40036139\\desktop\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 601              	 .file 5 "c:\\users\\va40036139\\desktop\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 602              	 .file 6 "D:/practica/proiect/DaveCan/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 603              	 .file 7 "D:/practica/proiect/DaveCan/Libraries/CMSIS/Include/core_cm4.h"
 604              	 .file 8 "D:/practica/proiect/DaveCan/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc4_rtc.c
    {standard input}:20     .text.XMC_RTC_IsRunning:00000000 $t
    {standard input}:24     .text.XMC_RTC_IsRunning:00000000 XMC_RTC_IsRunning
    {standard input}:62     .text.XMC_RTC_IsRunning:00000020 $d
    {standard input}:67     .text.XMC_SCU_GetMirrorStatus:00000000 $t
    {standard input}:71     .text.XMC_SCU_GetMirrorStatus:00000000 XMC_SCU_GetMirrorStatus
    {standard input}:103    .text.XMC_SCU_GetMirrorStatus:00000014 $d
    {standard input}:108    .text.XMC_RTC_Enable:00000000 $t
    {standard input}:113    .text.XMC_RTC_Enable:00000000 XMC_RTC_Enable
    {standard input}:136    .text.XMC_RTC_Disable:00000000 $t
    {standard input}:141    .text.XMC_RTC_Disable:00000000 XMC_RTC_Disable
    {standard input}:169    .text.XMC_RTC_IsEnabled:00000000 $t
    {standard input}:174    .text.XMC_RTC_IsEnabled:00000000 XMC_RTC_IsEnabled
    {standard input}:198    .text.XMC_RTC_Init:00000000 $t
    {standard input}:203    .text.XMC_RTC_Init:00000000 XMC_RTC_Init
    {standard input}:315    .text.XMC_RTC_Init:000000a0 $d
    {standard input}:320    .text.XMC_RTC_EnableEvent:00000000 $t
    {standard input}:325    .text.XMC_RTC_EnableEvent:00000000 XMC_RTC_EnableEvent
    {standard input}:371    .text.XMC_RTC_EnableEvent:0000002c $d
    {standard input}:376    .text.XMC_RTC_DisableEvent:00000000 $t
    {standard input}:381    .text.XMC_RTC_DisableEvent:00000000 XMC_RTC_DisableEvent
    {standard input}:428    .text.XMC_RTC_DisableEvent:0000002c $d
    {standard input}:433    .text.XMC_RTC_ClearEvent:00000000 $t
    {standard input}:438    .text.XMC_RTC_ClearEvent:00000000 XMC_RTC_ClearEvent
    {standard input}:481    .text.XMC_RTC_ClearEvent:00000024 $d
    {standard input}:486    .text.XMC_RTC_EnableHibernationWakeUp:00000000 $t
    {standard input}:491    .text.XMC_RTC_EnableHibernationWakeUp:00000000 XMC_RTC_EnableHibernationWakeUp
    {standard input}:537    .text.XMC_RTC_EnableHibernationWakeUp:0000002c $d
    {standard input}:542    .text.XMC_RTC_DisableHibernationWakeUp:00000000 $t
    {standard input}:547    .text.XMC_RTC_DisableHibernationWakeUp:00000000 XMC_RTC_DisableHibernationWakeUp
    {standard input}:594    .text.XMC_RTC_DisableHibernationWakeUp:0000002c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_HIB_EnableHibernateDomain
XMC_SCU_HIB_IsHibernateDomainEnabled
XMC_RTC_SetPrescaler
