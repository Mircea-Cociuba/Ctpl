   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_uart.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_USIC_CH_GetTransmitBufferStatus,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_USIC_CH_GetTransmitBufferStatus:
  25              	.LFB199:
  26              	 .file 1 "D:/practica/proiect/DaveCan/Libraries/XMCLib/inc/xmc_usic.h"
   1:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
   2:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @date 2019-05-07
   4:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
   5:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @cond
   6:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
   7:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
   9:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * All rights reserved.                        
  11:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *                                             
  12:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * following conditions are met:   
  14:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  15:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer.                        
  17:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  18:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  21:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  24:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  32:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
  35:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
  36:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Change History
  37:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * --------------
  38:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
  39:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  40:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  41:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
  43:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  44:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *      
  46:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  47:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  49:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  50:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
  52:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  53:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
  56:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  57:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
  61:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  62:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
  66:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  67:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
  70:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  71:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  72:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
  73:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  74:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
  76:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  77:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  78:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  79:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
  80:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-09-08:
  81:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed value of macro XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST used in XMC_USIC_CH_SetShiftDir
  82:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
  83:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2018-09-29:
  84:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetBaudrateEx which uses the integer divider instead of the fractional d
  85:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  86:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2019-05-07:
  87:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetBaudrate(), XMC_USIC_CH_GetSCLKFrequency() and XMC_USIC_CH_GetMCLKFre
  88:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
  89:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @endcond
  90:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
  91:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
  92:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
  93:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
  94:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
  95:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
  96:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
  97:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
  98:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
  99:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
 100:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 101:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 102:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
 103:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 104:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 105:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 106:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 107:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
 108:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 109:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 110:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 111:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 112:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 113:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 114:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 115:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 116:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 117:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 118:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 119:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 120:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 121:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  friendly format.
 122:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 123:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 124:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 125:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 126:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 127:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 128:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 129:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 130:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 131:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * MACROS
 132:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 133:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 134:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 135:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 136:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 137:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 138:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 139:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 140:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 141:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 142:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 143:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 144:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 145:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 146:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 147:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 148:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 149:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 150:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 151:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 152:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 153:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 154:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 155:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 156:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 157:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 158:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 159:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 160:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 161:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 162:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 163:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 164:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 165:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 166:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 167:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 168:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 169:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 170:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 171:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * ENUMS
 172:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 173:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 174:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 175:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 176:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 177:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 178:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 179:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 180:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 181:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 182:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 183:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 184:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 185:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 186:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 187:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 188:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 189:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 190:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 191:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 192:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 193:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 194:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 195:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 196:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 197:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 198:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 199:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 200:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 201:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 202:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 203:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 204:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 205:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 206:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 207:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 208:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 209:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 210:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 211:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 212:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 213:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 214:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 215:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 216:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 217:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 218:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 219:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 220:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 221:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 222:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 223:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 224:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 225:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 226:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 227:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 228:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 229:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 230:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 231:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 232:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 233:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 234:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 235:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 236:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 237:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 238:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 239:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 240:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 241:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 242:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 243:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 244:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 245:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 246:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 247:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 248:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 249:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 250:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 251:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 252:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 253:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 254:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 255:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 256:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 257:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 258:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 259:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 260:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 261:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 262:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 263:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 264:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 265:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 266:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 267:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 268:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 269:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 270:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 271:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 272:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 273:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 274:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 275:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 276:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 277:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 278:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 279:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 280:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 281:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 282:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 283:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 284:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 285:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 286:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 287:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 288:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 289:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 290:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 291:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 292:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 293:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 294:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 295:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 296:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 297:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 298:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 299:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 300:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 301:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 302:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 303:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 304:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 305:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 306:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 307:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 308:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 309:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 310:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 311:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 312:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 313:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 314:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 315:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 316:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 317:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 318:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 319:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 320:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 321:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 322:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 323:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 324:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 325:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 326:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 327:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 328:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 329:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 330:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 331:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 332:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 333:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 334:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 335:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 336:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 337:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 338:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 339:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 340:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 341:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 342:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 343:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 344:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 345:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 346:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 347:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 348:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 349:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 350:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 351:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 352:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 353:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 354:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 355:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 356:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 357:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 358:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 359:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 360:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 361:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 362:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 363:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 364:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 365:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 366:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 367:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 368:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 369:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 370:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 371:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 372:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 373:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 374:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 375:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 376:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 377:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 378:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 379:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 380:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 381:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 382:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 383:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 384:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 385:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 386:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 387:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 388:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 389:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 390:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 391:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 392:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 393:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 394:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 395:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 396:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 397:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 398:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 399:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 400:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 401:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 402:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 403:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 404:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 405:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 406:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 407:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 408:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 409:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 410:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 411:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 412:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 413:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 414:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 415:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 416:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 417:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 418:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 419:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 420:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 421:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 422:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 423:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 424:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 425:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 426:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 427:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 428:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 429:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 430:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 431:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 432:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 433:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 434:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 435:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 436:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 437:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 438:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 439:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 440:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 441:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 442:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 443:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 444:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 445:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 446:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 447:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 448:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 449:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 450:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 451:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 452:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 453:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 454:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 455:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 456:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 457:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 458:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
 459:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 460:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 461:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 462:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Pos /**< Shift MSB first. The 
 463:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 464:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 465:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 466:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 467:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 468:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 469:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 470:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 471:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 472:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma push
 473:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma anon_unions
 474:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 475:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning 586
 476:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 477:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 478:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 479:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 480:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 481:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 482:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 483:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 484:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 485:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 486:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 487:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 488:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 489:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 490:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 491:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 492:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 493:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 494:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 495:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 496:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 497:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 498:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 499:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 500:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 501:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 502:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 503:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 504:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 505:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 506:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 507:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 508:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 509:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   };
 510:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 511:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 512:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 513:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 514:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 515:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 516:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 517:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 518:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 519:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   };
 520:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 521:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 522:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 523:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 524:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 525:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 526:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 527:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 528:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 529:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 530:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 531:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 532:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 533:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 534:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 535:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 536:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 537:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 538:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 539:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 540:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 541:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 542:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 543:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 544:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 545:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 546:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma pop
 547:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 548:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning restore
 549:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 550:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 551:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 552:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 553:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 554:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 555:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 556:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** extern "C" {
 557:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 558:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 559:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 560:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 561:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 562:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 563:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 564:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 565:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 566:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 567:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 568:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 569:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 570:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 571:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 572:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
 573:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 574:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 575:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 576:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 577:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 578:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 579:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 580:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 581:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 582:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 583:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 584:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 585:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 586:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 587:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
 588:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 589:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 590:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 591:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 592:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 593:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 594:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 595:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 596:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 597:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 598:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 599:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 600:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 601:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 602:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 603:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 604:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 605:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 606:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 607:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 608:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 609:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 610:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 611:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 612:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 613:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 614:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 615:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 616:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 617:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 618:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 619:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 620:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 621:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 622:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 623:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 624:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 625:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 626:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 627:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 628:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 629:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 630:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 631:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 632:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 633:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 634:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 635:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 636:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 637:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 638:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 639:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 640:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 641:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 642:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 643:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 644:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 645:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 646:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 647:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 648:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 649:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 650:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 651:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 652:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 653:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 654:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 655:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 656:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 657:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 658:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 659:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 660:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 661:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 662:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 663:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 664:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 665:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 666:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 667:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 668:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 669:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 670:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 671:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 672:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 673:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. Only integer dividers of peripheral clock are achievable
 674:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 675:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *            This can be related to the number of samples for each logic state of the data signal.
 676:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *            \b Range: 1 to 32. Value should be chosen based on the protocol used.
 677:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 678:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *      \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 679:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *            @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 680:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 681:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 682:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel using the integer divider which restrics the achieva
 683:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 684:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 685:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 686:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 687:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 688:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 689:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 690:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_
 691:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 692:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 693:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 694:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 695:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 696:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel for .\n
 697:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 698:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 699:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used baudrate (fCTQIN) of a USIC channel. \n\n
 700:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png	 
 701:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png	 
 702:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 703:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 704:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 705:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 706:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetBaudrate(XMC_USIC_CH_t *const channel);
 707:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 708:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 709:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 710:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 711:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 712:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 713:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 714:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used SCLK frequency of a USIC channel. \n\n
 715:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png	 
 716:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png	 
 717:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 718:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 719:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 720:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 721:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetSCLKFrequency(XMC_USIC_CH_t *const channel);
 722:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 723:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 724:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 725:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
 726:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return baudrate currently used by USIC channel.\n
 727:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 728:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 729:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Calculates the current used MCLK frequency of a USIC channel. \n\n
 730:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @image html ../images/usic_brg.png	 
 731:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @image latex ../images/usic_brg.png	 
 732:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 733:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 734:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBaudrateMode(), XMC_USIC_CH_SetBaudrate(), XMC_USIC_CH_SetBaudrateEx() \n\n\n
 735:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 736:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** uint32_t XMC_USIC_CH_GetMCLKFrequency(XMC_USIC_CH_t *const channel);
 737:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 738:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 739:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 740:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 741:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 742:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 743:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 744:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 745:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 746:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 747:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 748:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 749:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 750:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 751:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 752:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 753:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 754:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 755:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 756:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 757:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 758:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 759:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 												 const uint32_t oversampling,
 760:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 761:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 762:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 763:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 764:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 765:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 766:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 767:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 768:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 769:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 770:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 771:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 772:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 773:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 774:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 775:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 776:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 777:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *  
 778:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 779:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 780:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 781:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 782:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 783:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 784:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 785:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 786:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
 787:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 788:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 789:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 790:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 791:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 792:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 793:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 794:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 795:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 796:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 797:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 798:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 799:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 800:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 801:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 802:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 803:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 804:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
 805:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 806:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 807:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 808:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 809:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 810:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 811:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 812:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 813:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 814:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 815:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 816:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 817:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * This setting is used
 818:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 819:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 820:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 821:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 822:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 823:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 824:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 825:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 826:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
 827:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 828:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 829:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 830:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 831:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 832:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 833:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 834:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 835:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 836:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 837:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 838:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 839:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 840:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 841:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 842:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 843:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 844:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 845:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
 846:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 847:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 848:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 849:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 850:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 851:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 852:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 853:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 854:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 855:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 856:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 857:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 858:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 859:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 860:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 861:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 862:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 863:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 864:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
 865:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 866:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 867:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 868:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 869:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 870:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 871:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 872:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 873:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 874:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 875:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 876:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 877:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 878:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 879:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 880:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 881:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
 882:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 883:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 884:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 885:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 886:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 887:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 888:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 889:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 890:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 891:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 893:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 894:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 895:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 896:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 897:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
 898:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 899:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 900:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 901:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 902:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 903:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 904:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 905:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 906:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 907:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 908:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 909:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 910:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 911:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 912:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 913:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 914:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 915:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 916:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
 917:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 918:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 919:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 920:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 921:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 922:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 923:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 924:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 925:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 926:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 927:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 928:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 929:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 930:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 931:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 932:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 933:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 934:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
 935:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 936:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 937:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 938:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 939:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 940:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 941:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 942:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 943:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 944:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 945:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 946:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 947:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 948:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 949:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 950:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 951:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 952:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 953:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
 954:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 955:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 956:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 957:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 958:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 959:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 960:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 961:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 962:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 963:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 964:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 965:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 966:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 967:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 968:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 969:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 970:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 971:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
 972:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 973:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 974:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 975:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 976:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 977:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 978:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 979:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 980:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 981:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 982:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
 983:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 984:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 985:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
 986:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 987:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 988:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 989:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
 990:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 991:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 992:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
 993:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
 994:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
 995:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 996:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 997:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 998:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 999:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
1000:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1001:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1002:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1003:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
1004:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1005:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1006:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
1007:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1008:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
1009:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
1010:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
1011:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1012:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
1013:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
1014:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1015:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1016:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1017:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1018:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1019:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
1020:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1021:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1022:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1023:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
1024:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1025:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1026:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
1027:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1028:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
1029:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1030:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
1031:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1032:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1033:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1034:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1035:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1036:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1037:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1038:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1039:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1040:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1041:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
1042:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
1043:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1044:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1045:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1046:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
1047:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1048:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
1049:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1050:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
1051:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1052:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1053:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1054:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1055:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1056:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1057:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
1058:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
1059:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1060:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1061:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1062:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
1063:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
1064:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1065:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1066:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1067:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
1068:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1069:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
1070:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                              const uint16_t data,
1071:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                              const uint32_t transmit_control_information)
1072:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1073:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
1074:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1075:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1076:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1077:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1078:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1079:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1080:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1081:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1082:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1083:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1084:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1085:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1086:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1087:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1088:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1089:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1090:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1091:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1092:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1093:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1094:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1095:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1096:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1097:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1098:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1099:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1100:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1101:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1102:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1103:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1104:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1105:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1106:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1107:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1108:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1109:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1110:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1111:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1112:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1113:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1114:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1115:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1116:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1117:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1118:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1119:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1120:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1121:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value 
1122:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1123:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1124:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1125:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1126:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1127:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1128:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1129:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1130:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1131:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1132:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1133:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1134:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1135:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1136:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1137:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1138:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1139:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1140:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1141:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1142:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1143:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1144:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1145:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1146:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1147:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1148:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1149:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1150:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1151:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1152:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1153:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1154:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1155:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1156:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1157:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1158:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1159:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1160:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1161:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1162:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1163:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly. 
1164:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1165:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1166:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1167:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1168:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1169:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1170:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1171:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1172:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1173:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1174:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1175:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1176:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1177:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1178:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1179:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1180:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1181:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1182:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1183:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1184:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1185:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1186:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1187:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1188:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1189:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1190:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1191:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1192:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1193:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
1194:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1195:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1196:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1197:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1198:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1199:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1200:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1201:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1202:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1203:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1204:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1205:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1206:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1207:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1208:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1209:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1210:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1211:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
1212:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1213:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1214:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1215:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1216:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1217:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1218:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1219:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1220:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1221:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1222:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1223:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1224:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1225:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1226:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1227:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1228:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1229:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1230:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1231:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1232:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1233:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1234:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1235:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1236:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1237:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1238:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                          const uint32_t service_request);
1239:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1240:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1241:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1242:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1243:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1244:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1245:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1246:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1247:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1248:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1249:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1250:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1251:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1252:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1253:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1254:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1255:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1256:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1257:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
  27              	 .loc 1 1257 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
1258:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
  43              	 .loc 1 1258 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a 9B6B     	 ldr r3,[r3,#56]
  46 000c DBB2     	 uxtb r3,r3
  47 000e 23F07F03 	 bic r3,r3,#127
  48 0012 DBB2     	 uxtb r3,r3
1259:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
  49              	 .loc 1 1259 0
  50 0014 1846     	 mov r0,r3
  51 0016 0C37     	 adds r7,r7,#12
  52              	.LCFI3:
  53              	 .cfi_def_cfa_offset 4
  54 0018 BD46     	 mov sp,r7
  55              	.LCFI4:
  56              	 .cfi_def_cfa_register 13
  57              	 
  58 001a 5DF8047B 	 ldr r7,[sp],#4
  59              	.LCFI5:
  60              	 .cfi_restore 7
  61              	 .cfi_def_cfa_offset 0
  62 001e 7047     	 bx lr
  63              	 .cfi_endproc
  64              	.LFE199:
  66              	 .section .text.XMC_USIC_CH_SetMode,"ax",%progbits
  67              	 .align 2
  68              	 .thumb
  69              	 .thumb_func
  71              	XMC_USIC_CH_SetMode:
  72              	.LFB234:
1260:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1261:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1262:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1263:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1264:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1265:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1266:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1267:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1268:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1269:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1270:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1271:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1272:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1273:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1274:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1275:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1276:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1277:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1278:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1279:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1280:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1281:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1282:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1283:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1284:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1285:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1286:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1287:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1288:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1289:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1290:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1291:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1292:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1293:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *                              
1294:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1295:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1296:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1297:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1298:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1299:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1300:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1301:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1302:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1303:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1304:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1305:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1306:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1307:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1308:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1309:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1310:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1311:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1312:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1313:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1314:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1315:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1316:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1317:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1318:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1319:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1320:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1321:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1322:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1323:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1324:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1325:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1326:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1327:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1328:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1329:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1330:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1331:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1332:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1333:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1334:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1335:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1336:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1337:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1338:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1339:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1340:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1341:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1342:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1343:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1344:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1345:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1346:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1347:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1348:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1349:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1350:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1351:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1352:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1353:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1354:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1355:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1356:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1357:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1358:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1359:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1360:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1361:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1362:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1363:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1364:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1365:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1366:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1367:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1368:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1369:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1370:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1371:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1372:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1373:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1374:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1375:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1376:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1377:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1378:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1379:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1380:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1381:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1382:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1383:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1384:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1385:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1386:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1387:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1388:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1389:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1390:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1391:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1392:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1393:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1394:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1395:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1396:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1397:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1398:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1399:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1400:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1401:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1402:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1403:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1404:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1405:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1406:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1407:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1408:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1409:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1410:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1411:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1412:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1413:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1414:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1415:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1416:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1417:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * generated if enabled. 
1418:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1419:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1420:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1421:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1422:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1423:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1424:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1425:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1426:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1427:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1428:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1429:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1430:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1431:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1432:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1433:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1434:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1435:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1436:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1437:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1438:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1439:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1440:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1441:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1442:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1443:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1444:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1445:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1446:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1447:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1448:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1449:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1450:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1451:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1452:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1453:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1454:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1455:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1456:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1457:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1458:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1459:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1460:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1461:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1462:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1463:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1464:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1465:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1466:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1467:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1468:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1469:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1470:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1471:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1472:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1473:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1474:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1475:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1476:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1477:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1478:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1479:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1480:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1481:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1482:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1483:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1484:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1485:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1486:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1487:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1488:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1489:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1490:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1491:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1492:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1493:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1494:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1495:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1496:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1497:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1498:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1499:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1500:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1501:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1502:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1503:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1504:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1505:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1506:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1507:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1508:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1509:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1510:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1511:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1512:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1513:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1514:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1515:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1516:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1517:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1518:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1519:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1520:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1521:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1522:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1523:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1524:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1525:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1526:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1527:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1528:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1529:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1530:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1531:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1532:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1533:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1534:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1535:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1536:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1537:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1538:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
1539:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1540:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1541:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1542:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1543:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1544:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1545:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1546:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1547:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1548:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1549:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1550:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1551:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1552:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1553:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1554:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1555:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1556:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1557:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1558:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1559:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1560:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1561:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1562:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1563:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1564:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1565:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1566:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1567:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1568:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1569:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1570:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1571:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1572:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1573:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1574:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1575:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1576:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1577:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1578:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1579:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1580:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1581:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1582:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1583:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1584:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1585:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1586:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1587:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1588:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1589:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1590:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1591:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1592:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1593:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1594:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1595:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1596:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1597:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1598:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1599:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1600:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1601:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1602:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1603:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1604:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1605:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1606:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1607:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1608:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1609:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1610:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1611:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1612:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1613:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1614:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1615:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1616:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1617:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1618:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1619:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1620:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1621:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1622:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1623:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1624:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1625:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1626:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1627:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1628:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1629:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1630:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1631:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1632:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1633:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1634:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1635:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1636:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1637:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1638:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1639:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1640:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1641:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1642:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1643:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1644:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1645:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1646:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1647:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1648:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1649:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1650:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1651:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1652:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1653:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1654:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1655:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1656:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1657:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1658:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1659:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1660:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1661:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1662:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1663:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1664:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1665:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1666:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1667:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1668:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1669:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1670:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1671:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1672:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1673:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1674:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1675:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1676:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1677:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1678:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1679:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1680:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1681:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1682:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1683:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1684:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1685:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1686:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1687:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1688:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1689:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1690:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1691:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1692:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1693:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1694:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1695:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1696:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1697:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1698:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1699:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1700:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1701:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1702:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1703:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1704:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1705:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1706:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1707:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1708:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1709:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1710:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1711:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1712:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1713:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1714:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1715:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1716:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1717:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1718:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1719:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1720:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1721:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1722:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1723:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1724:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1725:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1726:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1727:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1728:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1729:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1730:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1731:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1732:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1733:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1734:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1735:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1736:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1737:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1738:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1739:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1740:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1741:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1742:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1743:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1744:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1745:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1746:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1747:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1748:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1749:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1750:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1751:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1752:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1753:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1754:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1755:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1756:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1757:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1758:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1759:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1760:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1761:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1762:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1763:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1764:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1765:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1766:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1767:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1768:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1769:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1770:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1771:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1772:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1773:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1774:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1775:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1776:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
1777:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1778:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1779:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1780:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1781:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1782:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1783:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1784:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1785:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1786:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1787:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1788:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1789:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1790:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1791:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1792:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1793:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1794:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1795:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1796:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1797:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1798:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1799:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1800:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1801:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1802:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** */
1803:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1804:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1805:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1806:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1807:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1808:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1809:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1810:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1811:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1812:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1813:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1814:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1815:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1816:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1817:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1818:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1819:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1820:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1821:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1822:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1823:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1824:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1825:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1826:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1827:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1828:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1829:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1830:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1831:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1832:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1833:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1834:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1835:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1836:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1837:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1838:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1839:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1840:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1841:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1842:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1843:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1844:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1845:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1846:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1847:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1848:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1849:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
1850:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1851:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1852:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1853:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1854:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1855:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1856:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
1857:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1858:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1859:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1860:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1861:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1862:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1863:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1864:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1865:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1866:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1867:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1868:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1869:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1870:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1871:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1872:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1873:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1874:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1875:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1876:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1877:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1878:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1879:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1880:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1881:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1882:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1883:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
1884:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1885:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1886:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1887:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1888:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1889:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1890:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1891:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1892:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1893:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1894:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1895:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1896:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1897:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1898:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1899:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1900:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1901:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1902:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1903:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1904:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1905:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1906:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1907:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1908:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1909:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1910:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1911:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1912:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1913:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1914:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1915:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
1916:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1917:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1918:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1919:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1920:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1921:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1922:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1923:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1924:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1925:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1926:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1927:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1928:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1929:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1930:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1931:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1932:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1933:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1934:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1935:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1936:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1937:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1938:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1939:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1940:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1941:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1942:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1943:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1944:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1945:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1946:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
1947:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1948:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1949:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1950:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1951:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1952:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1953:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1954:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1955:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1956:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1957:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1958:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1959:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1960:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1961:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1962:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1963:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1964:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1965:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
1966:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1967:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1968:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1969:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1970:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1971:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1972:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1973:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1974:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1975:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1976:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1977:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1978:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1979:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
1980:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
1981:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
1982:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1983:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1984:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
1985:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
1986:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
1987:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1988:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
1989:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
1990:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the 
1991:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * receive FIFO.
1992:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1993:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1994:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1995:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
1996:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1997:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
1998:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
1999:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
2000:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
2001:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
2002:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2003:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2004:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
2005:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
2006:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
2007:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
2008:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2009:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
2010:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
2011:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
2012:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
2013:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
2014:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
2015:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
2016:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
2017:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2018:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
2019:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
2020:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
2021:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
2022:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
2023:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_RBERI_Msk |
2024:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_ARBI_Msk));
2025:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
2026:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
2027:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
2028:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2029:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2030:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
2031:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
2032:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
2033:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2034:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
2035:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2036:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
2037:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
2038:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
2039:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
2040:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
2041:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
2042:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
2043:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2044:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
2045:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
2046:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
2047:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
2048:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
2049:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
2050:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
2051:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
2052:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
2053:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2054:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2055:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2056:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
2057:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2058:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
2059:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
2060:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
2061:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2062:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
2063:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
2064:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
2065:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
2066:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
2067:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
2068:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
2069:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
2070:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2071:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2072:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2073:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
2074:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2075:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
2076:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
2077:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
2078:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2079:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
2080:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
2081:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
2082:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
2083:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
2084:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
2085:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
2086:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
2087:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2088:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2089:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
2090:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
2091:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2092:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
2093:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2094:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
2095:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
2096:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
2097:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSI
2098:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
2099:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
2100:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
2101:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
2102:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2103:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2104:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
2105:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
2106:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
2107:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
2108:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
2109:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
2110:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
2111:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
2112:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2113:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
2114:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2115:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
2116:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
2117:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
2118:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
2119:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * This value should be configured based on the slave device requirement.
2120:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
2121:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 
2122:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
2123:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
2124:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIV
2125:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
2126:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
2127:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
2128:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
2129:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                  (uint32_t)passive_level |
2130:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****                  (uint32_t)clock_output;
2131:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
2132:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** 
2133:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** /**
2134:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2135:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2136:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @param mode USIC channel operation mode. \n
2137:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
2138:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
2139:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
2140:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2141:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
2142:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2143:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
2144:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
2145:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
2146:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  *
2147:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2148:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
2149:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****  */
2150:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
2151:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** {
  73              	 .loc 1 2151 0
  74              	 .cfi_startproc
  75              	 
  76              	 
  77              	 
  78 0000 80B4     	 push {r7}
  79              	.LCFI6:
  80              	 .cfi_def_cfa_offset 4
  81              	 .cfi_offset 7,-4
  82 0002 83B0     	 sub sp,sp,#12
  83              	.LCFI7:
  84              	 .cfi_def_cfa_offset 16
  85 0004 00AF     	 add r7,sp,#0
  86              	.LCFI8:
  87              	 .cfi_def_cfa_register 7
  88 0006 7860     	 str r0,[r7,#4]
  89 0008 0B46     	 mov r3,r1
  90 000a FB70     	 strb r3,[r7,#3]
2152:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
  91              	 .loc 1 2152 0
  92 000c 7B68     	 ldr r3,[r7,#4]
  93 000e 1B6C     	 ldr r3,[r3,#64]
  94 0010 23F00F02 	 bic r2,r3,#15
  95 0014 FB78     	 ldrb r3,[r7,#3]
  96 0016 1A43     	 orrs r2,r2,r3
  97 0018 7B68     	 ldr r3,[r7,#4]
  98 001a 1A64     	 str r2,[r3,#64]
2153:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_usic.h **** }
  99              	 .loc 1 2153 0
 100 001c 0C37     	 adds r7,r7,#12
 101              	.LCFI9:
 102              	 .cfi_def_cfa_offset 4
 103 001e BD46     	 mov sp,r7
 104              	.LCFI10:
 105              	 .cfi_def_cfa_register 13
 106              	 
 107 0020 5DF8047B 	 ldr r7,[sp],#4
 108              	.LCFI11:
 109              	 .cfi_restore 7
 110              	 .cfi_def_cfa_offset 0
 111 0024 7047     	 bx lr
 112              	 .cfi_endproc
 113              	.LFE234:
 115 0026 00BF     	 .section .text.XMC_UART_CH_GetStatusFlag,"ax",%progbits
 116              	 .align 2
 117              	 .thumb
 118              	 .thumb_func
 120              	XMC_UART_CH_GetStatusFlag:
 121              	.LFB241:
 122              	 .file 2 "D:/practica/proiect/DaveCan/Libraries/XMCLib/inc/xmc_uart.h"
   1:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  /**
   2:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @file xmc_uart.h
   3:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @date 2019-05-07
   4:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
   5:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @cond
   6:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
   7:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
   9:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * All rights reserved.                        
  11:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *                                             
  12:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * following conditions are met:   
  14:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *                                                                              
  15:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * disclaimer.                        
  17:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 
  18:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 
  21:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * products derived from this software without specific prior written permission.                  
  23:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *                                                                              
  24:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *                                                                              
  32:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
  35:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
  36:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Change History
  37:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * --------------
  38:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
  39:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 2015-02-20:
  40:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Initial
  41:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *      
  42:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 2015-05-20:
  43:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Description updated <br>
  44:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Added XMC_UART_CH_TriggerServiceRequest() and XMC_UART_CH_SelectInterruptNodePointer <br>
  45:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
  46:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 2015-06-20:
  47:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  48:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
  49:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 2015-09-01:
  50:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Modified XMC_UART_CH_SetInputSource() for avoiding complete DXCR register overwriting. <br
  51:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Modified XMC_UART_CH_EVENT_t enum for supporting XMC_UART_CH_EnableEvent() and XMC_UART_CH
  52:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *       for supporting multiple events configuration <br>
  53:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 
  54:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 2016-05-20:
  55:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Added XMC_UART_CH_EnableDataTransmission() and XMC_UART_CH_DisableDataTransmission()
  56:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
  57:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 2017-10-25:
  58:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Added XMC_UART_CH_EnableMasterClock() and XMC_UART_CH_DisableMasterClock()
  59:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
  60:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 2019-05-07:
  61:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Added normal_divider_mode to XMC_UART_CH_CONFIG_t configuration structure.
  62:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *       It selects normal divider mode for baudrate generator instead of default fractional divide
  63:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *     - Added XMC_UART_CH_SetBaudrateEx()
  64:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
  65:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @endcond 
  66:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
  67:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
  68:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
  69:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #ifndef XMC_UART_H
  70:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART_H
  71:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
  72:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
  73:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * HEADER FILES
  74:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
  75:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
  76:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #include "xmc_usic.h"
  77:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
  78:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
  79:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @addtogroup XMClib XMC Peripheral Library
  80:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @{
  81:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
  82:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
  83:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
  84:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @addtogroup UART
  85:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @brief Universal Asynchronous Receiver/Transmitter (UART) driver for XMC microcontroller family.
  86:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
  87:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * The UART driver uses Universal Serial Interface Channel(USIC) module to implement UART protocol.
  88:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * It provides APIs to configure USIC channel for UART communication. The driver enables the user
  89:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * in getting the status of UART protocol events, configuring interrupt service requests, protocol
  90:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * related parameter configuration etc.
  91:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 
  92:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * UART driver features:
  93:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Configuration structure XMC_UART_CH_CONFIG_t and initialization function XMC_UART_CH_Init()
  94:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Enumeration of events with their bit masks @ref XMC_UART_CH_EVENT_t, @ref XMC_UART_CH_STATUS_
  95:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Allows the selection of input source for the DX0 input stage using the API XMC_UART_CH_SetInp
  96:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Allows configuration of baudrate using XMC_UART_CH_SetBaudrate() and configuration of data le
  97:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  XMC_UART_CH_SetWordLength() and XMC_UART_CH_SetFrameLength()
  98:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Provides the status of UART protocol events, XMC_UART_CH_GetStatusFlag()
  99:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Allows transmission of data using XMC_UART_CH_Transmit() and gets received data using XMC_UAR
 100:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 
 101:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @{
 102:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 103:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 104:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
 105:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * MACROS
 106:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
 107:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 108:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #if defined(USIC0)
 109:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART0_CH0 XMC_USIC0_CH0 /**< USIC0 channel 0 base address */
 110:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART0_CH1 XMC_USIC0_CH1 /**< USIC0 channel 1 base address */
 111:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 112:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 113:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #if defined(USIC1)
 114:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART1_CH0 XMC_USIC1_CH0 /**< USIC1 channel 0 base address */
 115:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART1_CH1 XMC_USIC1_CH1 /**< USIC1 channel 1 base address */
 116:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 117:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 118:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #if defined(USIC2)
 119:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART2_CH0 XMC_USIC2_CH0 /**< USIC2 channel 0 base address */
 120:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART2_CH1 XMC_USIC2_CH1 /**< USIC2 channel 1 base address */
 121:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 122:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 123:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
 124:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * ENUMS
 125:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
 126:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 127:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 128:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * UART driver status
 129:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 130:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_STATUS
 131:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 132:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_OK,     /**< UART driver status : OK*/
 133:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_ERROR,  /**< UART driver status : ERROR */
 134:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_BUSY    /**< UART driver status : BUSY */
 135:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_STATUS_t;
 136:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 137:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 138:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** * UART portocol status. The enum values can be used for getting the status of UART channel.
 139:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** *
 140:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** */
 141:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_STATUS_FLAG
 142:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 143:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE = USIC_CH_PSR_ASCMode_TXIDLE_Msk,                 /**< 
 144:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEPTION_IDLE = USIC_CH_PSR_ASCMode_RXIDLE_Msk,                    /**< 
 145:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED = USIC_CH_PSR_ASCMode_SBD_Msk,       /**< 
 146:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_COLLISION_DETECTED = USIC_CH_PSR_ASCMode_COL_Msk,                   /**< 
 147:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVER_NOISE_DETECTED = USIC_CH_PSR_ASCMode_RNS_Msk,              /**< 
 148:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_FORMAT_ERROR_IN_STOP_BIT_0 = USIC_CH_PSR_ASCMode_FER0_Msk,          /**< 
 149:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_FORMAT_ERROR_IN_STOP_BIT_1 = USIC_CH_PSR_ASCMode_FER1_Msk,          /**< 
 150:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVE_FRAME_FINISHED = USIC_CH_PSR_ASCMode_RFF_Msk,               /**< 
 151:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMITTER_FRAME_FINISHED = USIC_CH_PSR_ASCMode_TFF_Msk,           /**< 
 152:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSFER_STATUS_BUSY = USIC_CH_PSR_ASCMode_BUSY_Msk,                /**< 
 153:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_ASCMode_RSIF_Msk,           /**< 
 154:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_ASCMode_DLIF_Msk,                /**< 
 155:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_ASCMode_TSIF_Msk,           /**< 
 156:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_ASCMode_TBIF_Msk,          /**< 
 157:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_ASCMode_RIF_Msk,                   /**< 
 158:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_ASCMode_AIF_Msk,       /**< 
 159:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_ASCMode_BRGIF_Msk      /**< 
 160:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_STATUS_FLAG_t;
 161:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 162:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 163:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** * UART configuration events. The enums can be used for configuring events using the CCR register.
 164:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** */
 165:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_CH_UART_EVENT
 166:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 167:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 168:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 169:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 170:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 171:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 172:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 173:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 174:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   
 175:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_SYNCHRONIZATION_BREAK = USIC_CH_PCR_ASCMode_SBIEN_Msk, /**< Event synchronizati
 176:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_COLLISION = USIC_CH_PCR_ASCMode_CDEN_Msk,              /**< Event collision */
 177:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_RECEIVER_NOISE = USIC_CH_PCR_ASCMode_RNIEN_Msk,        /**< Event receiver nois
 178:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_FORMAT_ERROR = USIC_CH_PCR_ASCMode_FEIEN_Msk,          /**< Event format error 
 179:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_FRAME_FINISHED = USIC_CH_PCR_ASCMode_FFIEN_Msk         /**< Event frame finishe
 180:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_EVENT_t;
 181:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 182:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 183:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * UART Input sampling frequency options
 184:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 185:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_INPUT_SAMPLING_FREQ
 186:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 187:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_SAMPLING_FREQ_FPERIPH            = XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH,    
 188:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_D
 189:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_INPUT_SAMPLING_FREQ_t;
 190:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 191:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 192:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * UART input stages
 193:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 194:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_INPUT
 195:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 196:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_RXD = 0UL   /**< UART input stage DX0*/
 197:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #if UC_FAMILY == XMC1
 198:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   ,
 199:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_RXD1 = 3UL, /**< UART input stage DX3*/
 200:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_RXD2 = 5UL  /**< UART input stage DX5*/
 201:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 202:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_INPUT_t;
 203:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 204:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 205:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 206:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * UART channel interrupt node pointers
 207:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 208:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_INTERRUPT_NODE_POINTER
 209:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 210:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANS
 211:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANS
 212:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEI
 213:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTER
 214:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTO
 215:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_INTERRUPT_NODE_POINTER_t;
 216:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 217:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
 218:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * DATA STRUCTURES
 219:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
 220:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 221:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 222:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * UART initialization structure
 223:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** */
 224:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** typedef struct XMC_UART_CH_CONFIG
 225:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 226:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   uint32_t baudrate;                         /**< Desired baudrate. \b Range: minimum= 100, maximum
 227:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   bool normal_divider_mode;                  /**< Selects normal divider mode for baudrate generato
 228:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   uint8_t data_bits;                         /**< Number of bits for the data field. Value configur
 229:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****                                                   \b Range: minimum= 1, maximum= 16*/
 230:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   uint8_t frame_length;                      /**< Indicates nmber of bits in a frame. Configured as
 231:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****                                                   \b Range: minimum= 1, maximum= 63*/
 232:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   uint8_t stop_bits;                         /**< Number of stop bits. \b Range: minimum= 1, maximu
 233:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   uint8_t oversampling;						           /**< Number of samples for a symbol(DCTQ).\b Range: minimum
 234:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_PARITY_MODE_t parity_mode;     /**< Parity mode. \b Range: @ref XMC_USIC_CH_PARITY_MO
 235:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****                                                   @ref XMC_USIC_CH_PARITY_MODE_ODD*/
 236:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_CONFIG_t;
 237:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 238:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
 239:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * API PROTOTYPES
 240:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
 241:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 242:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #ifdef __cplusplus
 243:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** extern "C" {
 244:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 245:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 246:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 247:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 248:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, XMC_UART0_CH1,XMC_UART1_CH0, XMC_UART1_CH1,XMC_UART2_CH0, XM
 249:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param config Constant pointer to UART configuration structure of type @ref XMC_UART_CH_CONFIG_t
 250:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status of initializing the USIC channel for UART protocol.\n
 251:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: @ref XMC_UART_CH_STATUS_OK if initialization is successful.\n
 252:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *                    @ref XMC_UART_CH_STATUS_ERROR if configuration of baudrate failed.
 253:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 254:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 255:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Initializes the USIC channel for UART protocol.\n\n
 256:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * During the initialization, USIC channel is enabled, baudrate is configured with the defined over
 257:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * in the intialization structure. If the oversampling value is set to 0 in the structure, the defa
 258:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * is considered. Sampling point for each symbol is configured at the half of sampling period. Symb
 259:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * majority decision among 3 samples. 
 260:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Word length is configured with the number of data bits. If the value of \a frame_length is 0, th
 261:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * is set to the same value as word length. If \a frame_length is greater than 0, it is set as the 
 262:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Parity mode is set to the value configured for \a parity_mode.
 263:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * The USIC channel should be set to UART mode by calling the XMC_UART_CH_Start() API after the ini
 264:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 265:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 266:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 267:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 268:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config);
 269:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 270:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 271:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 272:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 273:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 274:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 275:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 276:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the USIC channel operation mode to UART mode.\n\n
 277:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * CCR register bitfield \a Mode is set to 2(UART mode). This API should be called after configurin
 278:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * the USIC channel. Transmission and reception can happen only when the UART mode is set. 
 279:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * This is an inline function.
 280:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 281:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 282:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 283:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 284:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
 285:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 286:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPER
 287:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** }
 288:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 289:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 290:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 291:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 292:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status to indicate if the communication channel is stopped successf
 293:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *                              @ref XMC_UART_CH_STATUS_OK if the communication channel is stopped.
 294:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *                              @ref XMC_UART_CH_STATUS_BUSY if the communication channel is busy.
 295:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 296:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 297:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Stops the UART communication.\n\n
 298:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * CCR register bitfield \a Mode is reset. This disables the communication.
 299:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Before starting the communication again, the channel has to be reconfigured.
 300:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 301:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 302:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Init() \n\n\n
 303:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 304:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** XMC_UART_CH_STATUS_t XMC_UART_CH_Stop(XMC_USIC_CH_t *const channel);
 305:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 306:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 307:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 308:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				   \b Range: @ref XMC_UART0_CH0, XMC_UART0_CH1 ,XMC_UART1_CH0, XMC_UART1_CH1, XMC_UART2_CH0,
 309:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param rate Desired baudrate. \n
 310:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *           \b Range: minimum value = 100, maximum value depends on the peripheral clock frequency
 311:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				   and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/
 312:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 313:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 This can be related to the number of samples for each logic state of the data signal.\n
 314:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 \b Range: 4 to 32. Value should be chosen based on the protocol used.
 315:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status indicating the baudrate configuration.\n
 316:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 			     \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 317:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 318:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 319:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description:</b><br>
 320:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the bus speed in bits per second.\n\n
 321:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Derives the values of \a STEP and PDIV to arrive at the optimum realistic speed possible.
 322:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \a oversampling is the number of samples to be taken for each symbol of UART protocol.
 323:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Default \a oversampling of 16 is considered if the input \a oversampling is less than 4. It is r
 324:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * a minimum oversampling of 4 for UART.
 325:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 326:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 327:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Init(), XMC_UART_CH_Stop(), XMC_USIC_CH_GetBaudrate()
 328:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 329:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** XMC_UART_CH_STATUS_t XMC_UART_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 330:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 331:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 332:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 333:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				   \b Range: @ref XMC_UART0_CH0, XMC_UART0_CH1 ,XMC_UART1_CH0, XMC_UART1_CH1, XMC_UART2_CH0,
 334:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param rate Desired baudrate. \n
 335:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *           \b Range: minimum value = 100, maximum value depends on the peripheral clock frequency
 336:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				   and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/
 337:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 338:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 This can be related to the number of samples for each logic state of the data signal.\n
 339:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 \b Range: 4 to 32. Value should be chosen based on the protocol used.
 340:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param normal_divider_mode Selects normal divider mode for baudrate generator instead of default
 341:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status indicating the baudrate configuration.\n
 342:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 			     \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 343:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 344:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 345:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description:</b><br>
 346:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the bus speed in bits per second.\n\n
 347:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Derives the values of \a STEP and PDIV to arrive at the optimum realistic speed possible.
 348:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \a oversampling is the number of samples to be taken for each symbol of UART protocol.
 349:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Default \a oversampling of 16 is considered if the input \a oversampling is less than 4. It is r
 350:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * a minimum oversampling of 4 for UART.
 351:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 352:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 353:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Init(), XMC_UART_CH_Stop(), XMC_USIC_CH_GetBaudrate()
 354:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 355:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** XMC_UART_CH_STATUS_t XMC_UART_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_
 356:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 357:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 358:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 359:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 360:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  data Data to be transmitted. \n 
 361:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: 16 bit unsigned data within the range 0 to 65535. Actual size of
 362:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *          data transmitted depends on the configured number of bits for the UART protocol in the 
 363:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 364:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 365:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 366:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Transmits data over serial communication channel using UART protocol.\n\n
 367:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Based on the channel configuration, data is either put to the transmit FIFO or to TBUF register.
 368:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Before putting data to TBUF, the API waits for TBUF to finish shifting its contents to shift reg
 369:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * So user can continuously execute the API without checking for TBUF busy status. Based on the num
 370:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * data bits configured, the lower significant bits will be extracted for transmission.
 371:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 372:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Note: When FIFO is not configured, the API waits for the TBUF to be available. 
 373:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * This makes the execution a blocking call.
 374:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 375:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 376:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_GetReceivedData() \n\n\n
 377:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 378:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data);
 379:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 380:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 381:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 382:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 383:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return uint16_t Received data over UART communication channel.
 384:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 385:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Provides one word of data received over UART communication channel.\n\n
 386:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Based on the channel configuration, data is either read from the receive FIFO or RBUF register.
 387:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Before returning the value, there is no check for data validity. User should check the appropria
 388:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * data receive flags(standard receive/alternative receive/FIFO standard receive/FIFO alternative r
 389:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * before executing the API. Reading from an empty receive FIFO can generate a receive error event.
 390:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 391:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 392:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_GetStatusFlag(), XMC_UART_CH_Transmit() \n\n\n
 393:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 394:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel);
 395:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 396:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 397:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 398:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 399:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  word_length Data word length. \n
 400:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: minimum= 1, maximum= 16.
 401:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 402:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 403:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 404:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the data word length in number of bits.\n\n
 405:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Word length can range from 1 to 16. It indicates the number of data bits in a data word.
 406:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * The value of \a word_length will be decremented by 1 before setting the value to \a SCTR registe
 407:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * If the UART data bits is more than 16, then the frame length should be set to the actual number 
 408:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * word length should be configured with the number of bits expected in each transaction. For examp
 409:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * for UART communication is 20 bits, then the frame length should be set as 20. Word length can be
 410:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * transmit and receive handling. If data is stored as 8bit array, then the word length can be set 
 411:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * a full message of UART data should be transmitted/ received as 3 data words.
 412:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 413:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 414:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_SetFrameLength() \n\n\n
 415:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 416:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
 417:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 418:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_SetWordLength(channel, word_length);
 419:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** }
 420:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 421:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 422:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 423:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 424:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  frame_length Number of data bits in each UART frame. \n
 425:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: minimum= 1, maximum= 64.
 426:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 427:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 428:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 429:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the number of data bits for UART communication.\n\n
 430:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * The frame length is configured by setting the input value to \a SCTR register.
 431:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * The value of \a frame_length will be decremented by 1, before setting it to the register.
 432:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Frame length should not be set to 64 for UART communication.
 433:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 434:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 435:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_SetWordLength() \n\n\n
 436:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 437:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
 438:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 439:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_SetFrameLength(channel, frame_length);
 440:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** }
 441:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 442:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 443:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 444:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 445:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  event Event bitmasks to enable. Use the type @ref XMC_UART_CH_EVENT_t for naming events.
 446:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART_CH_EVENT_RECEIVE_START, @ref XMC_UART_CH_EVENT_DATA_LOST,
 447:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  @ref XMC_UART_CH_EVENT_TRANSMIT_SHIFT, @ref XMC_UART_CH_EVENT_TRANSMIT_BUFFER,
 448:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  etc.
 449:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 450:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 451:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 452:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Enables interrupt events for UART communication.\n\n
 453:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 454:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @ref XMC_UART_CH_EVENT_t enumerates multiple event bitmasks. These enumerations can be used as i
 455:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Events are configured by setting bits in the CCR register.
 456:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 457:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_DisableEvent(), XMC_UART_CH_SetInterruptNodePointer(), XMC_UART_CH_GetStatusFlag() \
 458:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 459:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 460:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 461:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 462:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 463:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 464:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  event Bitmask of events to disable. Use the type @ref XMC_UART_CH_EVENT_t for naming eve
 465:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART_CH_EVENT_RECEIVE_START, @ref XMC_UART_CH_EVENT_DATA_LOST,
 466:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  @ref XMC_UART_CH_EVENT_TRANSMIT_SHIFT, @ref XMC_UART_CH_EVENT_TRANSMIT_BUFFER,
 467:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  etc.
 468:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 469:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 470:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 471:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Disables the interrupt events by clearing the bits in CCR register.\n\n
 472:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 473:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EVENT_FLAG_t enumerates multiple event bitmasks. These enumerations can be used as i
 474:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 475:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 476:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_ClearStatusFlag(), XMC_UART_CH_EnableEvent() \n\n\n
 477:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 478:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** void XMC_UART_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 479:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 480:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 481:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 482:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 483:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param service_request Service request number for generating protocol interrupts.\n
 484:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: 0 to 5.
 485:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 486:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 487:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 488:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the interrupt node for UART channel protocol events.\n\n
 489:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * For all the protocol events enlisted in the enumeration XMC_UART_CH_EVENT_t, one common
 490:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * interrupt gets generated. The service request connects the interrupt node to the UART 
 491:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * protocol events.
 492:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 493:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 494:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 495:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EnableEvent() \n\n\n
 496:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 497:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 498:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****                                                          const uint8_t service_request)
 499:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 500:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL, 
 501:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****                                               (uint32_t)service_request);
 502:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** }
 503:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 504:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 505:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 506:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 507:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
 508:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 						  \b Range: @ref XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
 509:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 						  			@ref XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
 510:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param service_request Service request number.\n
 511:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 						  \b Range: 0 to 5.
 512:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 513:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 514:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 515:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the interrupt node for USIC channel events. \n\n
 516:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
 517:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 518:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 519:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 520:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 521:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EnableEvent() \n\n\n
 522:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 523:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
 524:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****                                                             const XMC_UART_CH_INTERRUPT_NODE_POINTE
 525:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****                                                             const uint32_t service_request)
 526:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 527:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node
 528:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 		                                       (uint32_t)service_request);
 529:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** }
 530:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 531:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 532:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 533:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				   \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@r
 534:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  service_request_line service request number of the event to be triggered. \n
 535:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 			\b Range: 0 to 5.
 536:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 537:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 538:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 539:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Trigger a UART interrupt service request.\n\n
 540:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * When the UART service request is triggered, the NVIC interrupt associated with it will be
 541:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * generated if enabled.
 542:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 543:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 544:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_SelectInterruptNodePointer() \n\n\n
 545:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 546:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
 547:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 548:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_TriggerServiceRequest(channel, (uint32_t)service_request_line);
 549:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** }
 550:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 551:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 552:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 553:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 554:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return Status of UART channel events. \n 
 555:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: Use @ref XMC_UART_CH_STATUS_FLAG_t enumerations for
 556:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 					event bitmasks. @ref XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE, @ref XMC_UART_CH_STATUS_FLA
 557:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 					@ref XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED etc.
 558:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 559:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 560:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Provides the status of UART channel events.\n\n
 561:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Status provided by the API represents the status of multiple events at their bit positions. The 
 562:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * obtained using the enumeration XMC_UART_CH_STATUS_FLAG_t. Event status is obtained by reading
 563:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * the register PSR_ASCMode.
 564:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 565:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 566:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EnableEvent(),  XMC_UART_CH_ClearStatusFlag()\n\n\n
 567:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 568:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE uint32_t XMC_UART_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 569:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 123              	 .loc 2 569 0
 124              	 .cfi_startproc
 125              	 
 126              	 
 127              	 
 128 0000 80B4     	 push {r7}
 129              	.LCFI12:
 130              	 .cfi_def_cfa_offset 4
 131              	 .cfi_offset 7,-4
 132 0002 83B0     	 sub sp,sp,#12
 133              	.LCFI13:
 134              	 .cfi_def_cfa_offset 16
 135 0004 00AF     	 add r7,sp,#0
 136              	.LCFI14:
 137              	 .cfi_def_cfa_register 7
 138 0006 7860     	 str r0,[r7,#4]
 570:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   return channel->PSR_ASCMode;
 139              	 .loc 2 570 0
 140 0008 7B68     	 ldr r3,[r7,#4]
 141 000a 9B6C     	 ldr r3,[r3,#72]
 571:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** }
 142              	 .loc 2 571 0
 143 000c 1846     	 mov r0,r3
 144 000e 0C37     	 adds r7,r7,#12
 145              	.LCFI15:
 146              	 .cfi_def_cfa_offset 4
 147 0010 BD46     	 mov sp,r7
 148              	.LCFI16:
 149              	 .cfi_def_cfa_register 13
 150              	 
 151 0012 5DF8047B 	 ldr r7,[sp],#4
 152              	.LCFI17:
 153              	 .cfi_restore 7
 154              	 .cfi_def_cfa_offset 0
 155 0016 7047     	 bx lr
 156              	 .cfi_endproc
 157              	.LFE241:
 159              	 .section .text.XMC_UART_CH_ClearStatusFlag,"ax",%progbits
 160              	 .align 2
 161              	 .thumb
 162              	 .thumb_func
 164              	XMC_UART_CH_ClearStatusFlag:
 165              	.LFB242:
 572:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** 
 573:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** /**
 574:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 575:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 576:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @param flag UART events to be cleared. \n
 577:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: Use @ref XMC_UART_CH_STATUS_FLAG_t enumerations for
 578:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 					event bitmasks. @ref XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE, @ref XMC_UART_CH_STATUS_FLA
 579:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * 					@ref XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED etc.
 580:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 581:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 582:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 583:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Clears the status of UART channel events.\n\n
 584:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 585:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_STATUS_FLAG_t enumerates multiple event bitmasks. These enumerations can be used as 
 586:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * Events are cleared by setting the bitmask to the PSCR register.
 587:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  *
 588:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 589:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 590:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****  */
 591:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
 592:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** {
 166              	 .loc 2 592 0
 167              	 .cfi_startproc
 168              	 
 169              	 
 170              	 
 171 0000 80B4     	 push {r7}
 172              	.LCFI18:
 173              	 .cfi_def_cfa_offset 4
 174              	 .cfi_offset 7,-4
 175 0002 83B0     	 sub sp,sp,#12
 176              	.LCFI19:
 177              	 .cfi_def_cfa_offset 16
 178 0004 00AF     	 add r7,sp,#0
 179              	.LCFI20:
 180              	 .cfi_def_cfa_register 7
 181 0006 7860     	 str r0,[r7,#4]
 182 0008 3960     	 str r1,[r7]
 593:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h ****   channel->PSCR = flag;
 183              	 .loc 2 593 0
 184 000a 7B68     	 ldr r3,[r7,#4]
 185 000c 3A68     	 ldr r2,[r7]
 186 000e DA64     	 str r2,[r3,#76]
 594:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_uart.h **** }
 187              	 .loc 2 594 0
 188 0010 0C37     	 adds r7,r7,#12
 189              	.LCFI21:
 190              	 .cfi_def_cfa_offset 4
 191 0012 BD46     	 mov sp,r7
 192              	.LCFI22:
 193              	 .cfi_def_cfa_register 13
 194              	 
 195 0014 5DF8047B 	 ldr r7,[sp],#4
 196              	.LCFI23:
 197              	 .cfi_restore 7
 198              	 .cfi_def_cfa_offset 0
 199 0018 7047     	 bx lr
 200              	 .cfi_endproc
 201              	.LFE242:
 203 001a 00BF     	 .section .text.XMC_UART_CH_Init,"ax",%progbits
 204              	 .align 2
 205              	 .global XMC_UART_CH_Init
 206              	 .thumb
 207              	 .thumb_func
 209              	XMC_UART_CH_Init:
 210              	.LFB257:
 211              	 .file 3 "../Libraries/XMCLib/src/xmc_uart.c"
   1:../Libraries/XMCLib/src/xmc_uart.c **** /**
   2:../Libraries/XMCLib/src/xmc_uart.c ****  * @file xmc_uart.c
   3:../Libraries/XMCLib/src/xmc_uart.c ****  * @date 2019-05-07
   4:../Libraries/XMCLib/src/xmc_uart.c ****  *
   5:../Libraries/XMCLib/src/xmc_uart.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_uart.c ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_uart.c ****  *
   9:../Libraries/XMCLib/src/xmc_uart.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_uart.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_uart.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_uart.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_uart.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_uart.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_uart.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_uart.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_uart.c ****  * 
  18:../Libraries/XMCLib/src/xmc_uart.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_uart.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_uart.c ****  * 
  21:../Libraries/XMCLib/src/xmc_uart.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_uart.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_uart.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_uart.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_uart.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_uart.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_uart.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_uart.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_uart.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_uart.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_uart.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_uart.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_uart.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_uart.c ****  *
  36:../Libraries/XMCLib/src/xmc_uart.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_uart.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_uart.c ****  *
  39:../Libraries/XMCLib/src/xmc_uart.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_uart.c ****  *      
  42:../Libraries/XMCLib/src/xmc_uart.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_uart.c ****  *     - xmc_uart_ch_stop API implementation corrected.
  44:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Modified XMC_UART_CH_Stop() API for not setting to IDLE the channel if it is busy <br>
  45:../Libraries/XMCLib/src/xmc_uart.c ****  *
  46:../Libraries/XMCLib/src/xmc_uart.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Removed GetDriverVersion API <br>
  48:../Libraries/XMCLib/src/xmc_uart.c ****  *
  49:../Libraries/XMCLib/src/xmc_uart.c ****  * 2015-09-01:
  50:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Modified XMC_UART_CH_EnableEvent() and XMC_UART_CH_DisableEvent() for supporting multiple 
  51:../Libraries/XMCLib/src/xmc_uart.c ****  * 
  52:../Libraries/XMCLib/src/xmc_uart.c ****  * 2016-07-22:
  53:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Modified XMC_UART_CH_Init() to enable transfer status BUSY
  54:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Modified XMC_UART_CH_Stop() to check for transfer status
  55:../Libraries/XMCLib/src/xmc_uart.c ****  *
  56:../Libraries/XMCLib/src/xmc_uart.c ****  * 2019-05-07:
  57:../Libraries/XMCLib/src/xmc_uart.c ****  *     - Added XMC_UART_CH_SetBaudrateEx() which allows to select between baudrate generator normal
  58:../Libraries/XMCLib/src/xmc_uart.c ****  *
  59:../Libraries/XMCLib/src/xmc_uart.c ****  * @endcond 
  60:../Libraries/XMCLib/src/xmc_uart.c ****  *
  61:../Libraries/XMCLib/src/xmc_uart.c ****  */
  62:../Libraries/XMCLib/src/xmc_uart.c **** 
  63:../Libraries/XMCLib/src/xmc_uart.c **** /**************************************************************************************************
  64:../Libraries/XMCLib/src/xmc_uart.c ****  * HEADER FILES
  65:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
  66:../Libraries/XMCLib/src/xmc_uart.c **** 
  67:../Libraries/XMCLib/src/xmc_uart.c **** #include <xmc_scu.h>
  68:../Libraries/XMCLib/src/xmc_uart.c **** #include <xmc_uart.h>
  69:../Libraries/XMCLib/src/xmc_uart.c **** 
  70:../Libraries/XMCLib/src/xmc_uart.c **** /**************************************************************************************************
  71:../Libraries/XMCLib/src/xmc_uart.c ****  * MACROS
  72:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
  73:../Libraries/XMCLib/src/xmc_uart.c ****  
  74:../Libraries/XMCLib/src/xmc_uart.c **** #define XMC_UART_CH_OVERSAMPLING (16UL)
  75:../Libraries/XMCLib/src/xmc_uart.c **** #define XMC_UART_CH_OVERSAMPLING_MIN_VAL (4UL)
  76:../Libraries/XMCLib/src/xmc_uart.c **** 
  77:../Libraries/XMCLib/src/xmc_uart.c **** /**************************************************************************************************
  78:../Libraries/XMCLib/src/xmc_uart.c ****  * API IMPLEMENTATION
  79:../Libraries/XMCLib/src/xmc_uart.c ****  **************************************************************************************************
  80:../Libraries/XMCLib/src/xmc_uart.c **** 
  81:../Libraries/XMCLib/src/xmc_uart.c **** void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
  82:../Libraries/XMCLib/src/xmc_uart.c **** {
 212              	 .loc 3 82 0
 213              	 .cfi_startproc
 214              	 
 215              	 
 216 0000 80B5     	 push {r7,lr}
 217              	.LCFI24:
 218              	 .cfi_def_cfa_offset 8
 219              	 .cfi_offset 7,-8
 220              	 .cfi_offset 14,-4
 221 0002 84B0     	 sub sp,sp,#16
 222              	.LCFI25:
 223              	 .cfi_def_cfa_offset 24
 224 0004 00AF     	 add r7,sp,#0
 225              	.LCFI26:
 226              	 .cfi_def_cfa_register 7
 227 0006 7860     	 str r0,[r7,#4]
 228 0008 3960     	 str r1,[r7]
  83:../Libraries/XMCLib/src/xmc_uart.c ****   uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 229              	 .loc 3 83 0
 230 000a 1023     	 movs r3,#16
 231 000c FB60     	 str r3,[r7,#12]
  84:../Libraries/XMCLib/src/xmc_uart.c **** 
  85:../Libraries/XMCLib/src/xmc_uart.c ****   /* USIC channel switched on*/
  86:../Libraries/XMCLib/src/xmc_uart.c ****   XMC_USIC_CH_Enable(channel);
 232              	 .loc 3 86 0
 233 000e 7868     	 ldr r0,[r7,#4]
 234 0010 FFF7FEFF 	 bl XMC_USIC_CH_Enable
  87:../Libraries/XMCLib/src/xmc_uart.c ****   
  88:../Libraries/XMCLib/src/xmc_uart.c ****   if(config->oversampling != 0U)
 235              	 .loc 3 88 0
 236 0014 3B68     	 ldr r3,[r7]
 237 0016 1B7A     	 ldrb r3,[r3,#8]
 238 0018 002B     	 cmp r3,#0
 239 001a 02D0     	 beq .L8
  89:../Libraries/XMCLib/src/xmc_uart.c ****   {
  90:../Libraries/XMCLib/src/xmc_uart.c ****     oversampling = (uint32_t)config->oversampling;
 240              	 .loc 3 90 0
 241 001c 3B68     	 ldr r3,[r7]
 242 001e 1B7A     	 ldrb r3,[r3,#8]
 243 0020 FB60     	 str r3,[r7,#12]
 244              	.L8:
  91:../Libraries/XMCLib/src/xmc_uart.c ****   }
  92:../Libraries/XMCLib/src/xmc_uart.c ****   
  93:../Libraries/XMCLib/src/xmc_uart.c ****   /* Configure baud rate */
  94:../Libraries/XMCLib/src/xmc_uart.c ****   if (config->normal_divider_mode)
 245              	 .loc 3 94 0
 246 0022 3B68     	 ldr r3,[r7]
 247 0024 1B79     	 ldrb r3,[r3,#4]
 248 0026 002B     	 cmp r3,#0
 249 0028 07D0     	 beq .L9
  95:../Libraries/XMCLib/src/xmc_uart.c ****   {
  96:../Libraries/XMCLib/src/xmc_uart.c ****     /* Normal divider mode */
  97:../Libraries/XMCLib/src/xmc_uart.c ****     (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 250              	 .loc 3 97 0
 251 002a 3B68     	 ldr r3,[r7]
 252 002c 1B68     	 ldr r3,[r3]
 253 002e 7868     	 ldr r0,[r7,#4]
 254 0030 1946     	 mov r1,r3
 255 0032 FA68     	 ldr r2,[r7,#12]
 256 0034 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrateEx
 257 0038 06E0     	 b .L10
 258              	.L9:
  98:../Libraries/XMCLib/src/xmc_uart.c ****   }
  99:../Libraries/XMCLib/src/xmc_uart.c ****   else
 100:../Libraries/XMCLib/src/xmc_uart.c ****   {
 101:../Libraries/XMCLib/src/xmc_uart.c ****     /* Fractional divider mode */
 102:../Libraries/XMCLib/src/xmc_uart.c ****     (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 259              	 .loc 3 102 0
 260 003a 3B68     	 ldr r3,[r7]
 261 003c 1B68     	 ldr r3,[r3]
 262 003e 7868     	 ldr r0,[r7,#4]
 263 0040 1946     	 mov r1,r3
 264 0042 FA68     	 ldr r2,[r7,#12]
 265 0044 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 266              	.L10:
 103:../Libraries/XMCLib/src/xmc_uart.c ****   }
 104:../Libraries/XMCLib/src/xmc_uart.c ****     
 105:../Libraries/XMCLib/src/xmc_uart.c ****   /* Configure frame format
 106:../Libraries/XMCLib/src/xmc_uart.c ****    * Configure the number of stop bits
 107:../Libraries/XMCLib/src/xmc_uart.c ****    * Pulse length is set to 0 to have standard UART signaling, 
 108:../Libraries/XMCLib/src/xmc_uart.c ****    * i.e. the 0 level is signaled during the complete bit time
 109:../Libraries/XMCLib/src/xmc_uart.c ****    * Sampling point set equal to the half of the oversampling period
 110:../Libraries/XMCLib/src/xmc_uart.c ****    * Enable Sample Majority Decision 
 111:../Libraries/XMCLib/src/xmc_uart.c ****    * Enable Transfer Status BUSY
 112:../Libraries/XMCLib/src/xmc_uart.c ****    */
 113:../Libraries/XMCLib/src/xmc_uart.c ****   channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 267              	 .loc 3 113 0
 268 0048 3B68     	 ldr r3,[r7]
 269 004a DB79     	 ldrb r3,[r3,#7]
 270 004c 013B     	 subs r3,r3,#1
 271 004e 5A00     	 lsls r2,r3,#1
 114:../Libraries/XMCLib/src/xmc_uart.c ****                                     (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 272              	 .loc 3 114 0
 273 0050 FB68     	 ldr r3,[r7,#12]
 274 0052 5B08     	 lsrs r3,r3,#1
 275 0054 0133     	 adds r3,r3,#1
 276 0056 1B02     	 lsls r3,r3,#8
 113:../Libraries/XMCLib/src/xmc_uart.c ****                                     (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 277              	 .loc 3 113 0
 278 0058 1343     	 orrs r3,r3,r2
 279 005a 43F44033 	 orr r3,r3,#196608
 280 005e 43F00103 	 orr r3,r3,#1
 281 0062 7A68     	 ldr r2,[r7,#4]
 282 0064 D363     	 str r3,[r2,#60]
 115:../Libraries/XMCLib/src/xmc_uart.c ****                                     USIC_CH_PCR_ASCMode_SMD_Msk |
 116:../Libraries/XMCLib/src/xmc_uart.c ****                                     USIC_CH_PCR_ASCMode_RSTEN_Msk | USIC_CH_PCR_ASCMode_TSTEN_Msk);
 117:../Libraries/XMCLib/src/xmc_uart.c **** 
 118:../Libraries/XMCLib/src/xmc_uart.c ****   /* Set passive data level, high
 119:../Libraries/XMCLib/src/xmc_uart.c ****      Set word length. Data bits - 1
 120:../Libraries/XMCLib/src/xmc_uart.c ****      If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
 121:../Libraries/XMCLib/src/xmc_uart.c ****      Transmission Mode: The shift control signal is considered active if it
 122:../Libraries/XMCLib/src/xmc_uart.c ****      is at 1-level. This is the setting to be programmed to allow data transfers */
 123:../Libraries/XMCLib/src/xmc_uart.c ****   channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 283              	 .loc 3 123 0
 284 0066 3B68     	 ldr r3,[r7]
 285 0068 5B79     	 ldrb r3,[r3,#5]
 286 006a 013B     	 subs r3,r3,#1
 287 006c 1B06     	 lsls r3,r3,#24
 288 006e 43F48172 	 orr r2,r3,#258
 289 0072 7B68     	 ldr r3,[r7,#4]
 290 0074 5A63     	 str r2,[r3,#52]
 124:../Libraries/XMCLib/src/xmc_uart.c ****                              ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));
 125:../Libraries/XMCLib/src/xmc_uart.c **** 
 126:../Libraries/XMCLib/src/xmc_uart.c ****   if (config->frame_length != 0U)
 291              	 .loc 3 126 0
 292 0076 3B68     	 ldr r3,[r7]
 293 0078 9B79     	 ldrb r3,[r3,#6]
 294 007a 002B     	 cmp r3,#0
 295 007c 09D0     	 beq .L11
 127:../Libraries/XMCLib/src/xmc_uart.c ****   {
 128:../Libraries/XMCLib/src/xmc_uart.c ****     channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 296              	 .loc 3 128 0
 297 007e 7B68     	 ldr r3,[r7,#4]
 298 0080 5A6B     	 ldr r2,[r3,#52]
 299 0082 3B68     	 ldr r3,[r7]
 300 0084 9B79     	 ldrb r3,[r3,#6]
 301 0086 013B     	 subs r3,r3,#1
 302 0088 1B04     	 lsls r3,r3,#16
 303 008a 1A43     	 orrs r2,r2,r3
 304 008c 7B68     	 ldr r3,[r7,#4]
 305 008e 5A63     	 str r2,[r3,#52]
 306 0090 08E0     	 b .L12
 307              	.L11:
 129:../Libraries/XMCLib/src/xmc_uart.c ****   }
 130:../Libraries/XMCLib/src/xmc_uart.c ****   else
 131:../Libraries/XMCLib/src/xmc_uart.c ****   {
 132:../Libraries/XMCLib/src/xmc_uart.c ****     channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 308              	 .loc 3 132 0
 309 0092 7B68     	 ldr r3,[r7,#4]
 310 0094 5A6B     	 ldr r2,[r3,#52]
 311 0096 3B68     	 ldr r3,[r7]
 312 0098 5B79     	 ldrb r3,[r3,#5]
 313 009a 013B     	 subs r3,r3,#1
 314 009c 1B04     	 lsls r3,r3,#16
 315 009e 1A43     	 orrs r2,r2,r3
 316 00a0 7B68     	 ldr r3,[r7,#4]
 317 00a2 5A63     	 str r2,[r3,#52]
 318              	.L12:
 133:../Libraries/XMCLib/src/xmc_uart.c ****   }
 134:../Libraries/XMCLib/src/xmc_uart.c **** 
 135:../Libraries/XMCLib/src/xmc_uart.c ****   /* Enable transfer buffer */
 136:../Libraries/XMCLib/src/xmc_uart.c ****   channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 319              	 .loc 3 136 0
 320 00a4 7B68     	 ldr r3,[r7,#4]
 321 00a6 4FF4A062 	 mov r2,#1280
 322 00aa 9A63     	 str r2,[r3,#56]
 137:../Libraries/XMCLib/src/xmc_uart.c ****                   USIC_CH_TCSR_TDSSM_Msk;
 138:../Libraries/XMCLib/src/xmc_uart.c **** 
 139:../Libraries/XMCLib/src/xmc_uart.c ****   /* Clear protocol status */
 140:../Libraries/XMCLib/src/xmc_uart.c ****   channel->PSCR = 0xFFFFFFFFUL;
 323              	 .loc 3 140 0
 324 00ac 7B68     	 ldr r3,[r7,#4]
 325 00ae 4FF0FF32 	 mov r2,#-1
 326 00b2 DA64     	 str r2,[r3,#76]
 141:../Libraries/XMCLib/src/xmc_uart.c **** 
 142:../Libraries/XMCLib/src/xmc_uart.c ****   /* Set parity settings */
 143:../Libraries/XMCLib/src/xmc_uart.c ****   channel->CCR = (uint32_t)config->parity_mode;
 327              	 .loc 3 143 0
 328 00b4 3B68     	 ldr r3,[r7]
 329 00b6 5B89     	 ldrh r3,[r3,#10]
 330 00b8 1A46     	 mov r2,r3
 331 00ba 7B68     	 ldr r3,[r7,#4]
 332 00bc 1A64     	 str r2,[r3,#64]
 144:../Libraries/XMCLib/src/xmc_uart.c **** }
 333              	 .loc 3 144 0
 334 00be 1037     	 adds r7,r7,#16
 335              	.LCFI27:
 336              	 .cfi_def_cfa_offset 8
 337 00c0 BD46     	 mov sp,r7
 338              	.LCFI28:
 339              	 .cfi_def_cfa_register 13
 340              	 
 341 00c2 80BD     	 pop {r7,pc}
 342              	 .cfi_endproc
 343              	.LFE257:
 345              	 .section .text.XMC_UART_CH_SetBaudrate,"ax",%progbits
 346              	 .align 2
 347              	 .global XMC_UART_CH_SetBaudrate
 348              	 .thumb
 349              	 .thumb_func
 351              	XMC_UART_CH_SetBaudrate:
 352              	.LFB258:
 145:../Libraries/XMCLib/src/xmc_uart.c **** 
 146:../Libraries/XMCLib/src/xmc_uart.c **** XMC_UART_CH_STATUS_t XMC_UART_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 147:../Libraries/XMCLib/src/xmc_uart.c **** {
 353              	 .loc 3 147 0
 354              	 .cfi_startproc
 355              	 
 356              	 
 357 0000 80B5     	 push {r7,lr}
 358              	.LCFI29:
 359              	 .cfi_def_cfa_offset 8
 360              	 .cfi_offset 7,-8
 361              	 .cfi_offset 14,-4
 362 0002 86B0     	 sub sp,sp,#24
 363              	.LCFI30:
 364              	 .cfi_def_cfa_offset 32
 365 0004 00AF     	 add r7,sp,#0
 366              	.LCFI31:
 367              	 .cfi_def_cfa_register 7
 368 0006 F860     	 str r0,[r7,#12]
 369 0008 B960     	 str r1,[r7,#8]
 370 000a 7A60     	 str r2,[r7,#4]
 148:../Libraries/XMCLib/src/xmc_uart.c ****   XMC_UART_CH_STATUS_t status;
 149:../Libraries/XMCLib/src/xmc_uart.c ****   
 150:../Libraries/XMCLib/src/xmc_uart.c ****   status = XMC_UART_CH_STATUS_ERROR;
 371              	 .loc 3 150 0
 372 000c 0123     	 movs r3,#1
 373 000e FB75     	 strb r3,[r7,#23]
 151:../Libraries/XMCLib/src/xmc_uart.c ****   
 152:../Libraries/XMCLib/src/xmc_uart.c ****   if ((rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 2U)) && (oversampling >= XMC_UART_CH
 374              	 .loc 3 152 0
 375 0010 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 376 0014 0346     	 mov r3,r0
 377 0016 9A08     	 lsrs r2,r3,#2
 378 0018 BB68     	 ldr r3,[r7,#8]
 379 001a 9A42     	 cmp r2,r3
 380 001c 0CD3     	 bcc .L14
 381              	 .loc 3 152 0 is_stmt 0 discriminator 1
 382 001e 7B68     	 ldr r3,[r7,#4]
 383 0020 032B     	 cmp r3,#3
 384 0022 09D9     	 bls .L14
 153:../Libraries/XMCLib/src/xmc_uart.c ****   {
 154:../Libraries/XMCLib/src/xmc_uart.c ****     if (XMC_USIC_CH_SetBaudrate(channel, rate, oversampling) == XMC_USIC_CH_STATUS_OK)
 385              	 .loc 3 154 0 is_stmt 1
 386 0024 F868     	 ldr r0,[r7,#12]
 387 0026 B968     	 ldr r1,[r7,#8]
 388 0028 7A68     	 ldr r2,[r7,#4]
 389 002a FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 390 002e 0346     	 mov r3,r0
 391 0030 002B     	 cmp r3,#0
 392 0032 01D1     	 bne .L14
 155:../Libraries/XMCLib/src/xmc_uart.c ****     {
 156:../Libraries/XMCLib/src/xmc_uart.c ****       status = XMC_UART_CH_STATUS_OK;
 393              	 .loc 3 156 0
 394 0034 0023     	 movs r3,#0
 395 0036 FB75     	 strb r3,[r7,#23]
 396              	.L14:
 157:../Libraries/XMCLib/src/xmc_uart.c ****     }
 158:../Libraries/XMCLib/src/xmc_uart.c ****   } 
 159:../Libraries/XMCLib/src/xmc_uart.c ****   return status;
 397              	 .loc 3 159 0
 398 0038 FB7D     	 ldrb r3,[r7,#23]
 160:../Libraries/XMCLib/src/xmc_uart.c **** }
 399              	 .loc 3 160 0
 400 003a 1846     	 mov r0,r3
 401 003c 1837     	 adds r7,r7,#24
 402              	.LCFI32:
 403              	 .cfi_def_cfa_offset 8
 404 003e BD46     	 mov sp,r7
 405              	.LCFI33:
 406              	 .cfi_def_cfa_register 13
 407              	 
 408 0040 80BD     	 pop {r7,pc}
 409              	 .cfi_endproc
 410              	.LFE258:
 412 0042 00BF     	 .section .text.XMC_UART_CH_SetBaudrateEx,"ax",%progbits
 413              	 .align 2
 414              	 .global XMC_UART_CH_SetBaudrateEx
 415              	 .thumb
 416              	 .thumb_func
 418              	XMC_UART_CH_SetBaudrateEx:
 419              	.LFB259:
 161:../Libraries/XMCLib/src/xmc_uart.c **** 
 162:../Libraries/XMCLib/src/xmc_uart.c **** XMC_UART_CH_STATUS_t XMC_UART_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_
 163:../Libraries/XMCLib/src/xmc_uart.c **** {
 420              	 .loc 3 163 0
 421              	 .cfi_startproc
 422              	 
 423              	 
 424 0000 80B5     	 push {r7,lr}
 425              	.LCFI34:
 426              	 .cfi_def_cfa_offset 8
 427              	 .cfi_offset 7,-8
 428              	 .cfi_offset 14,-4
 429 0002 86B0     	 sub sp,sp,#24
 430              	.LCFI35:
 431              	 .cfi_def_cfa_offset 32
 432 0004 00AF     	 add r7,sp,#0
 433              	.LCFI36:
 434              	 .cfi_def_cfa_register 7
 435 0006 F860     	 str r0,[r7,#12]
 436 0008 B960     	 str r1,[r7,#8]
 437 000a 7A60     	 str r2,[r7,#4]
 438 000c FB70     	 strb r3,[r7,#3]
 164:../Libraries/XMCLib/src/xmc_uart.c ****   XMC_USIC_CH_STATUS_t status;
 165:../Libraries/XMCLib/src/xmc_uart.c ****   
 166:../Libraries/XMCLib/src/xmc_uart.c ****   status = XMC_UART_CH_STATUS_ERROR;
 439              	 .loc 3 166 0
 440 000e 0123     	 movs r3,#1
 441 0010 FB75     	 strb r3,[r7,#23]
 167:../Libraries/XMCLib/src/xmc_uart.c ****   
 168:../Libraries/XMCLib/src/xmc_uart.c ****   if ((rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 2U)) && (oversampling >= XMC_UART_CH
 442              	 .loc 3 168 0
 443 0012 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 444 0016 0346     	 mov r3,r0
 445 0018 9A08     	 lsrs r2,r3,#2
 446 001a BB68     	 ldr r3,[r7,#8]
 447 001c 9A42     	 cmp r2,r3
 448 001e 15D3     	 bcc .L17
 449              	 .loc 3 168 0 is_stmt 0 discriminator 1
 450 0020 7B68     	 ldr r3,[r7,#4]
 451 0022 032B     	 cmp r3,#3
 452 0024 12D9     	 bls .L17
 169:../Libraries/XMCLib/src/xmc_uart.c ****   {
 170:../Libraries/XMCLib/src/xmc_uart.c ****     if (normal_divider_mode)
 453              	 .loc 3 170 0 is_stmt 1
 454 0026 FB78     	 ldrb r3,[r7,#3]
 455 0028 002B     	 cmp r3,#0
 456 002a 07D0     	 beq .L18
 171:../Libraries/XMCLib/src/xmc_uart.c ****     {
 172:../Libraries/XMCLib/src/xmc_uart.c ****       /* Normal divider mode */
 173:../Libraries/XMCLib/src/xmc_uart.c ****       status = XMC_USIC_CH_SetBaudrateEx(channel, rate, oversampling);
 457              	 .loc 3 173 0
 458 002c F868     	 ldr r0,[r7,#12]
 459 002e B968     	 ldr r1,[r7,#8]
 460 0030 7A68     	 ldr r2,[r7,#4]
 461 0032 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrateEx
 462 0036 0346     	 mov r3,r0
 463 0038 FB75     	 strb r3,[r7,#23]
 170:../Libraries/XMCLib/src/xmc_uart.c ****     {
 464              	 .loc 3 170 0
 465 003a 09E0     	 b .L20
 466              	.L18:
 174:../Libraries/XMCLib/src/xmc_uart.c ****     }
 175:../Libraries/XMCLib/src/xmc_uart.c ****     else
 176:../Libraries/XMCLib/src/xmc_uart.c ****     {
 177:../Libraries/XMCLib/src/xmc_uart.c ****       /* Fractional divider mode */
 178:../Libraries/XMCLib/src/xmc_uart.c ****       status = XMC_USIC_CH_SetBaudrate(channel, rate, oversampling);
 467              	 .loc 3 178 0
 468 003c F868     	 ldr r0,[r7,#12]
 469 003e B968     	 ldr r1,[r7,#8]
 470 0040 7A68     	 ldr r2,[r7,#4]
 471 0042 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 472 0046 0346     	 mov r3,r0
 473 0048 FB75     	 strb r3,[r7,#23]
 170:../Libraries/XMCLib/src/xmc_uart.c ****     {
 474              	 .loc 3 170 0
 475 004a 01E0     	 b .L20
 476              	.L17:
 179:../Libraries/XMCLib/src/xmc_uart.c ****     }
 180:../Libraries/XMCLib/src/xmc_uart.c ****   }
 181:../Libraries/XMCLib/src/xmc_uart.c ****   else
 182:../Libraries/XMCLib/src/xmc_uart.c ****   {
 183:../Libraries/XMCLib/src/xmc_uart.c ****     status = XMC_USIC_CH_STATUS_ERROR;
 477              	 .loc 3 183 0
 478 004c 0123     	 movs r3,#1
 479 004e FB75     	 strb r3,[r7,#23]
 480              	.L20:
 184:../Libraries/XMCLib/src/xmc_uart.c ****   }
 185:../Libraries/XMCLib/src/xmc_uart.c ****   
 186:../Libraries/XMCLib/src/xmc_uart.c ****   return (XMC_UART_CH_STATUS_t)status;
 481              	 .loc 3 186 0
 482 0050 FB7D     	 ldrb r3,[r7,#23]
 187:../Libraries/XMCLib/src/xmc_uart.c **** }
 483              	 .loc 3 187 0
 484 0052 1846     	 mov r0,r3
 485 0054 1837     	 adds r7,r7,#24
 486              	.LCFI37:
 487              	 .cfi_def_cfa_offset 8
 488 0056 BD46     	 mov sp,r7
 489              	.LCFI38:
 490              	 .cfi_def_cfa_register 13
 491              	 
 492 0058 80BD     	 pop {r7,pc}
 493              	 .cfi_endproc
 494              	.LFE259:
 496 005a 00BF     	 .section .text.XMC_UART_CH_Transmit,"ax",%progbits
 497              	 .align 2
 498              	 .global XMC_UART_CH_Transmit
 499              	 .thumb
 500              	 .thumb_func
 502              	XMC_UART_CH_Transmit:
 503              	.LFB260:
 188:../Libraries/XMCLib/src/xmc_uart.c **** 
 189:../Libraries/XMCLib/src/xmc_uart.c **** void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
 190:../Libraries/XMCLib/src/xmc_uart.c **** {
 504              	 .loc 3 190 0
 505              	 .cfi_startproc
 506              	 
 507              	 
 508 0000 80B5     	 push {r7,lr}
 509              	.LCFI39:
 510              	 .cfi_def_cfa_offset 8
 511              	 .cfi_offset 7,-8
 512              	 .cfi_offset 14,-4
 513 0002 82B0     	 sub sp,sp,#8
 514              	.LCFI40:
 515              	 .cfi_def_cfa_offset 16
 516 0004 00AF     	 add r7,sp,#0
 517              	.LCFI41:
 518              	 .cfi_def_cfa_register 7
 519 0006 7860     	 str r0,[r7,#4]
 520 0008 0B46     	 mov r3,r1
 521 000a 7B80     	 strh r3,[r7,#2]
 191:../Libraries/XMCLib/src/xmc_uart.c ****   /* Check FIFO size */
 192:../Libraries/XMCLib/src/xmc_uart.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 522              	 .loc 3 192 0
 523 000c 7B68     	 ldr r3,[r7,#4]
 524 000e D3F80831 	 ldr r3,[r3,#264]
 525 0012 03F0E063 	 and r3,r3,#117440512
 526 0016 002B     	 cmp r3,#0
 527 0018 10D1     	 bne .L23
 193:../Libraries/XMCLib/src/xmc_uart.c ****   {
 194:../Libraries/XMCLib/src/xmc_uart.c ****     /* Wait till the Transmit Buffer is free for transmission */
 195:../Libraries/XMCLib/src/xmc_uart.c ****     while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 528              	 .loc 3 195 0
 529 001a 00BF     	 nop
 530              	.L24:
 531              	 .loc 3 195 0 is_stmt 0 discriminator 1
 532 001c 7868     	 ldr r0,[r7,#4]
 533 001e FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 534 0022 0346     	 mov r3,r0
 535 0024 802B     	 cmp r3,#128
 536 0026 F9D0     	 beq .L24
 196:../Libraries/XMCLib/src/xmc_uart.c ****     {
 197:../Libraries/XMCLib/src/xmc_uart.c ****     }
 198:../Libraries/XMCLib/src/xmc_uart.c ****   
 199:../Libraries/XMCLib/src/xmc_uart.c ****     /* Clear the Transmit Buffer indication flag */
 200:../Libraries/XMCLib/src/xmc_uart.c ****     XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATI
 537              	 .loc 3 200 0 is_stmt 1
 538 0028 7868     	 ldr r0,[r7,#4]
 539 002a 4FF40051 	 mov r1,#8192
 540 002e FFF7FEFF 	 bl XMC_UART_CH_ClearStatusFlag
 201:../Libraries/XMCLib/src/xmc_uart.c ****   
 202:../Libraries/XMCLib/src/xmc_uart.c ****     /*Transmit data */
 203:../Libraries/XMCLib/src/xmc_uart.c ****     channel->TBUF[0U] = data;
 541              	 .loc 3 203 0
 542 0032 7A88     	 ldrh r2,[r7,#2]
 543 0034 7B68     	 ldr r3,[r7,#4]
 544 0036 C3F88020 	 str r2,[r3,#128]
 545 003a 03E0     	 b .L22
 546              	.L23:
 204:../Libraries/XMCLib/src/xmc_uart.c ****   }
 205:../Libraries/XMCLib/src/xmc_uart.c ****   else
 206:../Libraries/XMCLib/src/xmc_uart.c ****   {
 207:../Libraries/XMCLib/src/xmc_uart.c ****     channel->IN[0U] = data;
 547              	 .loc 3 207 0
 548 003c 7A88     	 ldrh r2,[r7,#2]
 549 003e 7B68     	 ldr r3,[r7,#4]
 550 0040 C3F88021 	 str r2,[r3,#384]
 551              	.L22:
 208:../Libraries/XMCLib/src/xmc_uart.c ****   }
 209:../Libraries/XMCLib/src/xmc_uart.c **** }
 552              	 .loc 3 209 0
 553 0044 0837     	 adds r7,r7,#8
 554              	.LCFI42:
 555              	 .cfi_def_cfa_offset 8
 556 0046 BD46     	 mov sp,r7
 557              	.LCFI43:
 558              	 .cfi_def_cfa_register 13
 559              	 
 560 0048 80BD     	 pop {r7,pc}
 561              	 .cfi_endproc
 562              	.LFE260:
 564 004a 00BF     	 .section .text.XMC_UART_CH_GetReceivedData,"ax",%progbits
 565              	 .align 2
 566              	 .global XMC_UART_CH_GetReceivedData
 567              	 .thumb
 568              	 .thumb_func
 570              	XMC_UART_CH_GetReceivedData:
 571              	.LFB261:
 210:../Libraries/XMCLib/src/xmc_uart.c **** 
 211:../Libraries/XMCLib/src/xmc_uart.c **** uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
 212:../Libraries/XMCLib/src/xmc_uart.c **** {
 572              	 .loc 3 212 0
 573              	 .cfi_startproc
 574              	 
 575              	 
 576              	 
 577 0000 80B4     	 push {r7}
 578              	.LCFI44:
 579              	 .cfi_def_cfa_offset 4
 580              	 .cfi_offset 7,-4
 581 0002 85B0     	 sub sp,sp,#20
 582              	.LCFI45:
 583              	 .cfi_def_cfa_offset 24
 584 0004 00AF     	 add r7,sp,#0
 585              	.LCFI46:
 586              	 .cfi_def_cfa_register 7
 587 0006 7860     	 str r0,[r7,#4]
 213:../Libraries/XMCLib/src/xmc_uart.c ****   uint16_t retval;
 214:../Libraries/XMCLib/src/xmc_uart.c **** 
 215:../Libraries/XMCLib/src/xmc_uart.c ****   /* Check FIFO size */
 216:../Libraries/XMCLib/src/xmc_uart.c ****   if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 588              	 .loc 3 216 0
 589 0008 7B68     	 ldr r3,[r7,#4]
 590 000a D3F80C31 	 ldr r3,[r3,#268]
 591 000e 03F0E063 	 and r3,r3,#117440512
 592 0012 002B     	 cmp r3,#0
 593 0014 03D1     	 bne .L27
 217:../Libraries/XMCLib/src/xmc_uart.c ****   {
 218:../Libraries/XMCLib/src/xmc_uart.c ****     retval = (uint16_t)channel->RBUF;
 594              	 .loc 3 218 0
 595 0016 7B68     	 ldr r3,[r7,#4]
 596 0018 5B6D     	 ldr r3,[r3,#84]
 597 001a FB81     	 strh r3,[r7,#14]
 598 001c 03E0     	 b .L28
 599              	.L27:
 219:../Libraries/XMCLib/src/xmc_uart.c ****   }
 220:../Libraries/XMCLib/src/xmc_uart.c ****   else
 221:../Libraries/XMCLib/src/xmc_uart.c ****   {
 222:../Libraries/XMCLib/src/xmc_uart.c ****     retval = (uint16_t)channel->OUTR;
 600              	 .loc 3 222 0
 601 001e 7B68     	 ldr r3,[r7,#4]
 602 0020 D3F81C31 	 ldr r3,[r3,#284]
 603 0024 FB81     	 strh r3,[r7,#14]
 604              	.L28:
 223:../Libraries/XMCLib/src/xmc_uart.c ****   }
 224:../Libraries/XMCLib/src/xmc_uart.c **** 
 225:../Libraries/XMCLib/src/xmc_uart.c ****   return retval;
 605              	 .loc 3 225 0
 606 0026 FB89     	 ldrh r3,[r7,#14]
 226:../Libraries/XMCLib/src/xmc_uart.c **** }
 607              	 .loc 3 226 0
 608 0028 1846     	 mov r0,r3
 609 002a 1437     	 adds r7,r7,#20
 610              	.LCFI47:
 611              	 .cfi_def_cfa_offset 4
 612 002c BD46     	 mov sp,r7
 613              	.LCFI48:
 614              	 .cfi_def_cfa_register 13
 615              	 
 616 002e 5DF8047B 	 ldr r7,[sp],#4
 617              	.LCFI49:
 618              	 .cfi_restore 7
 619              	 .cfi_def_cfa_offset 0
 620 0032 7047     	 bx lr
 621              	 .cfi_endproc
 622              	.LFE261:
 624              	 .section .text.XMC_UART_CH_Stop,"ax",%progbits
 625              	 .align 2
 626              	 .global XMC_UART_CH_Stop
 627              	 .thumb
 628              	 .thumb_func
 630              	XMC_UART_CH_Stop:
 631              	.LFB262:
 227:../Libraries/XMCLib/src/xmc_uart.c **** 
 228:../Libraries/XMCLib/src/xmc_uart.c **** XMC_UART_CH_STATUS_t XMC_UART_CH_Stop(XMC_USIC_CH_t *const channel)
 229:../Libraries/XMCLib/src/xmc_uart.c **** {
 632              	 .loc 3 229 0
 633              	 .cfi_startproc
 634              	 
 635              	 
 636 0000 80B5     	 push {r7,lr}
 637              	.LCFI50:
 638              	 .cfi_def_cfa_offset 8
 639              	 .cfi_offset 7,-8
 640              	 .cfi_offset 14,-4
 641 0002 84B0     	 sub sp,sp,#16
 642              	.LCFI51:
 643              	 .cfi_def_cfa_offset 24
 644 0004 00AF     	 add r7,sp,#0
 645              	.LCFI52:
 646              	 .cfi_def_cfa_register 7
 647 0006 7860     	 str r0,[r7,#4]
 230:../Libraries/XMCLib/src/xmc_uart.c ****   XMC_UART_CH_STATUS_t status = XMC_UART_CH_STATUS_OK;
 648              	 .loc 3 230 0
 649 0008 0023     	 movs r3,#0
 650 000a FB73     	 strb r3,[r7,#15]
 231:../Libraries/XMCLib/src/xmc_uart.c **** 
 232:../Libraries/XMCLib/src/xmc_uart.c ****   if (((XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t) XMC_USIC_CH_TBUF_STATUS_BUSY) != 
 651              	 .loc 3 232 0
 652 000c 7868     	 ldr r0,[r7,#4]
 653 000e FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 654 0012 0346     	 mov r3,r0
 655 0014 DBB2     	 uxtb r3,r3
 656 0016 5BB2     	 sxtb r3,r3
 657 0018 002B     	 cmp r3,#0
 658 001a 07DB     	 blt .L31
 233:../Libraries/XMCLib/src/xmc_uart.c ****       ((XMC_UART_CH_GetStatusFlag(channel) & XMC_UART_CH_STATUS_FLAG_TRANSFER_STATUS_BUSY) != 0))
 659              	 .loc 3 233 0 discriminator 1
 660 001c 7868     	 ldr r0,[r7,#4]
 661 001e FFF7FEFF 	 bl XMC_UART_CH_GetStatusFlag
 662 0022 0346     	 mov r3,r0
 663 0024 03F40073 	 and r3,r3,#512
 232:../Libraries/XMCLib/src/xmc_uart.c ****       ((XMC_UART_CH_GetStatusFlag(channel) & XMC_UART_CH_STATUS_FLAG_TRANSFER_STATUS_BUSY) != 0))
 664              	 .loc 3 232 0 discriminator 1
 665 0028 002B     	 cmp r3,#0
 666 002a 02D0     	 beq .L32
 667              	.L31:
 234:../Libraries/XMCLib/src/xmc_uart.c ****   {
 235:../Libraries/XMCLib/src/xmc_uart.c ****     status = XMC_UART_CH_STATUS_BUSY;
 668              	 .loc 3 235 0
 669 002c 0223     	 movs r3,#2
 670 002e FB73     	 strb r3,[r7,#15]
 671 0030 03E0     	 b .L33
 672              	.L32:
 236:../Libraries/XMCLib/src/xmc_uart.c ****   }
 237:../Libraries/XMCLib/src/xmc_uart.c ****   else
 238:../Libraries/XMCLib/src/xmc_uart.c ****   {
 239:../Libraries/XMCLib/src/xmc_uart.c ****     /* USIC channel in IDLE mode */
 240:../Libraries/XMCLib/src/xmc_uart.c ****     XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 673              	 .loc 3 240 0
 674 0032 7868     	 ldr r0,[r7,#4]
 675 0034 0021     	 movs r1,#0
 676 0036 FFF7FEFF 	 bl XMC_USIC_CH_SetMode
 677              	.L33:
 241:../Libraries/XMCLib/src/xmc_uart.c ****   }
 242:../Libraries/XMCLib/src/xmc_uart.c ****   return status;
 678              	 .loc 3 242 0
 679 003a FB7B     	 ldrb r3,[r7,#15]
 243:../Libraries/XMCLib/src/xmc_uart.c **** }
 680              	 .loc 3 243 0
 681 003c 1846     	 mov r0,r3
 682 003e 1037     	 adds r7,r7,#16
 683              	.LCFI53:
 684              	 .cfi_def_cfa_offset 8
 685 0040 BD46     	 mov sp,r7
 686              	.LCFI54:
 687              	 .cfi_def_cfa_register 13
 688              	 
 689 0042 80BD     	 pop {r7,pc}
 690              	 .cfi_endproc
 691              	.LFE262:
 693              	 .section .text.XMC_UART_CH_EnableEvent,"ax",%progbits
 694              	 .align 2
 695              	 .global XMC_UART_CH_EnableEvent
 696              	 .thumb
 697              	 .thumb_func
 699              	XMC_UART_CH_EnableEvent:
 700              	.LFB263:
 244:../Libraries/XMCLib/src/xmc_uart.c **** 
 245:../Libraries/XMCLib/src/xmc_uart.c **** void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 246:../Libraries/XMCLib/src/xmc_uart.c **** {
 701              	 .loc 3 246 0
 702              	 .cfi_startproc
 703              	 
 704              	 
 705              	 
 706 0000 80B4     	 push {r7}
 707              	.LCFI55:
 708              	 .cfi_def_cfa_offset 4
 709              	 .cfi_offset 7,-4
 710 0002 83B0     	 sub sp,sp,#12
 711              	.LCFI56:
 712              	 .cfi_def_cfa_offset 16
 713 0004 00AF     	 add r7,sp,#0
 714              	.LCFI57:
 715              	 .cfi_def_cfa_register 7
 716 0006 7860     	 str r0,[r7,#4]
 717 0008 3960     	 str r1,[r7]
 247:../Libraries/XMCLib/src/xmc_uart.c ****   channel->CCR |= (event&0x1fc00U);
 718              	 .loc 3 247 0
 719 000a 7B68     	 ldr r3,[r7,#4]
 720 000c 1A6C     	 ldr r2,[r3,#64]
 721 000e 3B68     	 ldr r3,[r7]
 722 0010 03F4FE33 	 and r3,r3,#130048
 723 0014 1A43     	 orrs r2,r2,r3
 724 0016 7B68     	 ldr r3,[r7,#4]
 725 0018 1A64     	 str r2,[r3,#64]
 248:../Libraries/XMCLib/src/xmc_uart.c ****   channel->PCR_ASCMode |= (event&0xf8U);
 726              	 .loc 3 248 0
 727 001a 7B68     	 ldr r3,[r7,#4]
 728 001c DA6B     	 ldr r2,[r3,#60]
 729 001e 3B68     	 ldr r3,[r7]
 730 0020 03F0F803 	 and r3,r3,#248
 731 0024 1A43     	 orrs r2,r2,r3
 732 0026 7B68     	 ldr r3,[r7,#4]
 733 0028 DA63     	 str r2,[r3,#60]
 249:../Libraries/XMCLib/src/xmc_uart.c **** }
 734              	 .loc 3 249 0
 735 002a 0C37     	 adds r7,r7,#12
 736              	.LCFI58:
 737              	 .cfi_def_cfa_offset 4
 738 002c BD46     	 mov sp,r7
 739              	.LCFI59:
 740              	 .cfi_def_cfa_register 13
 741              	 
 742 002e 5DF8047B 	 ldr r7,[sp],#4
 743              	.LCFI60:
 744              	 .cfi_restore 7
 745              	 .cfi_def_cfa_offset 0
 746 0032 7047     	 bx lr
 747              	 .cfi_endproc
 748              	.LFE263:
 750              	 .section .text.XMC_UART_CH_DisableEvent,"ax",%progbits
 751              	 .align 2
 752              	 .global XMC_UART_CH_DisableEvent
 753              	 .thumb
 754              	 .thumb_func
 756              	XMC_UART_CH_DisableEvent:
 757              	.LFB264:
 250:../Libraries/XMCLib/src/xmc_uart.c **** 
 251:../Libraries/XMCLib/src/xmc_uart.c **** void XMC_UART_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 252:../Libraries/XMCLib/src/xmc_uart.c **** {
 758              	 .loc 3 252 0
 759              	 .cfi_startproc
 760              	 
 761              	 
 762              	 
 763 0000 80B4     	 push {r7}
 764              	.LCFI61:
 765              	 .cfi_def_cfa_offset 4
 766              	 .cfi_offset 7,-4
 767 0002 83B0     	 sub sp,sp,#12
 768              	.LCFI62:
 769              	 .cfi_def_cfa_offset 16
 770 0004 00AF     	 add r7,sp,#0
 771              	.LCFI63:
 772              	 .cfi_def_cfa_register 7
 773 0006 7860     	 str r0,[r7,#4]
 774 0008 3960     	 str r1,[r7]
 253:../Libraries/XMCLib/src/xmc_uart.c ****   channel->CCR &= (uint32_t)~(event&0x1fc00U);
 775              	 .loc 3 253 0
 776 000a 7B68     	 ldr r3,[r7,#4]
 777 000c 1A6C     	 ldr r2,[r3,#64]
 778 000e 3B68     	 ldr r3,[r7]
 779 0010 03F4FE33 	 and r3,r3,#130048
 780 0014 DB43     	 mvns r3,r3
 781 0016 1A40     	 ands r2,r2,r3
 782 0018 7B68     	 ldr r3,[r7,#4]
 783 001a 1A64     	 str r2,[r3,#64]
 254:../Libraries/XMCLib/src/xmc_uart.c ****   channel->PCR_ASCMode &= (uint32_t)~(event&0xf8U);
 784              	 .loc 3 254 0
 785 001c 7B68     	 ldr r3,[r7,#4]
 786 001e DA6B     	 ldr r2,[r3,#60]
 787 0020 3B68     	 ldr r3,[r7]
 788 0022 03F0F803 	 and r3,r3,#248
 789 0026 DB43     	 mvns r3,r3
 790 0028 1A40     	 ands r2,r2,r3
 791 002a 7B68     	 ldr r3,[r7,#4]
 792 002c DA63     	 str r2,[r3,#60]
 255:../Libraries/XMCLib/src/xmc_uart.c **** }
 793              	 .loc 3 255 0
 794 002e 0C37     	 adds r7,r7,#12
 795              	.LCFI64:
 796              	 .cfi_def_cfa_offset 4
 797 0030 BD46     	 mov sp,r7
 798              	.LCFI65:
 799              	 .cfi_def_cfa_register 13
 800              	 
 801 0032 5DF8047B 	 ldr r7,[sp],#4
 802              	.LCFI66:
 803              	 .cfi_restore 7
 804              	 .cfi_def_cfa_offset 0
 805 0036 7047     	 bx lr
 806              	 .cfi_endproc
 807              	.LFE264:
 809              	 .text
 810              	.Letext0:
 811              	 .file 4 "c:\\users\\va40036139\\desktop\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 812              	 .file 5 "c:\\users\\va40036139\\desktop\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 813              	 .file 6 "D:/practica/proiect/DaveCan/Libraries/CMSIS/Include/core_cm4.h"
 814              	 .file 7 "D:/practica/proiect/DaveCan/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_uart.c
    {standard input}:20     .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 $t
    {standard input}:24     .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 XMC_USIC_CH_GetTransmitBufferStatus
    {standard input}:67     .text.XMC_USIC_CH_SetMode:00000000 $t
    {standard input}:71     .text.XMC_USIC_CH_SetMode:00000000 XMC_USIC_CH_SetMode
    {standard input}:116    .text.XMC_UART_CH_GetStatusFlag:00000000 $t
    {standard input}:120    .text.XMC_UART_CH_GetStatusFlag:00000000 XMC_UART_CH_GetStatusFlag
    {standard input}:160    .text.XMC_UART_CH_ClearStatusFlag:00000000 $t
    {standard input}:164    .text.XMC_UART_CH_ClearStatusFlag:00000000 XMC_UART_CH_ClearStatusFlag
    {standard input}:204    .text.XMC_UART_CH_Init:00000000 $t
    {standard input}:209    .text.XMC_UART_CH_Init:00000000 XMC_UART_CH_Init
    {standard input}:346    .text.XMC_UART_CH_SetBaudrate:00000000 $t
    {standard input}:351    .text.XMC_UART_CH_SetBaudrate:00000000 XMC_UART_CH_SetBaudrate
    {standard input}:413    .text.XMC_UART_CH_SetBaudrateEx:00000000 $t
    {standard input}:418    .text.XMC_UART_CH_SetBaudrateEx:00000000 XMC_UART_CH_SetBaudrateEx
    {standard input}:497    .text.XMC_UART_CH_Transmit:00000000 $t
    {standard input}:502    .text.XMC_UART_CH_Transmit:00000000 XMC_UART_CH_Transmit
    {standard input}:565    .text.XMC_UART_CH_GetReceivedData:00000000 $t
    {standard input}:570    .text.XMC_UART_CH_GetReceivedData:00000000 XMC_UART_CH_GetReceivedData
    {standard input}:625    .text.XMC_UART_CH_Stop:00000000 $t
    {standard input}:630    .text.XMC_UART_CH_Stop:00000000 XMC_UART_CH_Stop
    {standard input}:694    .text.XMC_UART_CH_EnableEvent:00000000 $t
    {standard input}:699    .text.XMC_UART_CH_EnableEvent:00000000 XMC_UART_CH_EnableEvent
    {standard input}:751    .text.XMC_UART_CH_DisableEvent:00000000 $t
    {standard input}:756    .text.XMC_UART_CH_DisableEvent:00000000 XMC_UART_CH_DisableEvent
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_USIC_CH_Enable
XMC_USIC_CH_SetBaudrateEx
XMC_USIC_CH_SetBaudrate
XMC_SCU_CLOCK_GetPeripheralClockFrequency
