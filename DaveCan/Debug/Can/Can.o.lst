   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "Can.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CAN_MO_ResetStatus,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CAN_MO_ResetStatus:
  25              	.LFB215:
  26              	 .file 1 "D:/practica/proiect/DaveCan/Libraries/XMCLib/inc/xmc_can.h"
   1:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
   2:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @date 2017-11-09
   4:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
   5:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @cond
   6:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
   7:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMClib v2.1.22 - XMC Peripheral Driver Library 
   8:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
   9:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * All rights reserved.                        
  11:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *                                             
  12:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * following conditions are met:   
  14:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  15:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer.                        
  17:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 
  18:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 
  21:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  24:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  32:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
  35:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
  36:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Change History
  37:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * --------------
  38:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
  39:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  40:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  41:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  42:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
  43:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  44:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
  48:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  49:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *      
  52:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  53:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
  55:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  56:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
  58:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  59:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
  61:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  62:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  63:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 
  64:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  65:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  66:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  67:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
  68:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  69:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  70:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * related APIs.
  71:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  72:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  73:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  74:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  75:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
  76:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  77:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @code
  78:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  79:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  80:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  81:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  82:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * //Node configuration
  83:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  84:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  85:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * //disable configuration
  86:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  87:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  88:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  89:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @endcode
  90:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
  91:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
  92:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>  
  93:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @endcond
  94:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
  95:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
  96:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
  97:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
  98:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
  99:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 100:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 101:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 102:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 103:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 104:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 105:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 106:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 107:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 108:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 109:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #include <string.h>
 110:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 111:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 112:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 113:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 114:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 115:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 116:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 117:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 118:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 119:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 120:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 121:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 122:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 123:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * CAN nodes. 
 124:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 125:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * gateways between 
 126:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 127:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * node analysis.
 128:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 
 129:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 130:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 131:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 132:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 133:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 134:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 
 135:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 136:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 137:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 138:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 139:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 140:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 141:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 142:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 143:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 144:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 145:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 146:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 147:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 148:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 149:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 150:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 151:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 152:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 153:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 154:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 155:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 156:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 157:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 158:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 159:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 160:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 161:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 162:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 163:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * MACROS
 164:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 165:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 166:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 167:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 168:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 169:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 170:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 171:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 172:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 173:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 174:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * ENUMS
 175:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 176:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 177:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 178:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** */
 179:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 180:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 181:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 182:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 183:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 184:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 185:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 186:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 187:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 188:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 189:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 190:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** */
 191:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 192:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 193:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 194:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 195:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 196:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 197:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 198:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 199:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 200:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 201:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 202:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 203:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 204:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 205:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 206:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** */
 207:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 208:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 209:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 210:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 211:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 212:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 213:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 214:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 215:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 216:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 217:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 218:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 219:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 220:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 221:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 222:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 223:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 224:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 225:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 226:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 227:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 228:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 229:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 230:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 231:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 232:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 233:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 234:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 235:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 236:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 237:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 238:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 239:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 240:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 241:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 242:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 243:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 244:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 245:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 246:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 247:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 248:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 249:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 250:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 251:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 252:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 253:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 254:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 255:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 256:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 257:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 258:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 259:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 260:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 261:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 262:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 263:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 264:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 265:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 266:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 267:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 268:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 269:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 270:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 271:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 272:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 273:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 274:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 275:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 276:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 277:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 278:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 279:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 280:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 281:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 282:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 283:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 284:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 285:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 286:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 287:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 288:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 289:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 290:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 291:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 292:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 293:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 294:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 295:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 296:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 297:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 298:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 299:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 300:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 301:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 302:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 303:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 304:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 305:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 306:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 307:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 308:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 309:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 310:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 311:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 312:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 313:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 314:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 315:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 316:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 317:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 318:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 319:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 320:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 321:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 322:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 323:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 324:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 325:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 326:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 327:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 328:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 329:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 330:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 331:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 332:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,       /**< Bus-off status */
 333:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 334:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 335:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 336:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 337:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #endif
 338:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 339:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 340:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 341:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 342:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 343:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 344:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 345:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 346:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 347:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 348:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 349:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 350:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 351:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 352:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 353:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 354:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 355:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #endif
 356:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 357:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 358:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 359:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 360:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 361:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 362:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 363:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 364:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 365:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 366:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 367:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 368:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 369:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 370:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 371:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 372:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 373:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 374:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 375:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 376:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 377:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 378:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 379:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 380:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 381:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 382:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 383:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 384:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 385:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 386:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 387:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 388:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 389:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 390:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 391:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 392:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 393:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 394:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 395:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 396:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 397:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 398:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 399:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 400:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 401:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 402:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 403:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 404:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 405:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 406:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 407:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 408:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 409:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 410:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 411:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 412:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 413:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 414:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 415:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 416:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 417:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 418:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 419:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 420:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 421:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 422:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 423:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 424:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 425:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 426:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 427:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 428:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 429:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 430:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 431:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 432:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 433:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 434:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 435:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 436:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 437:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 438:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 439:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 440:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 441:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 442:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 443:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 444:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 445:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 446:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 447:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 448:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 449:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator 
 450:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 451:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 452:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {  
 453:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 454:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 455:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 456:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #else
 457:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 458:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #endif
 459:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 460:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #else
 461:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 462:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #endif
 463:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 464:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 465:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 466:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 467:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 468:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 469:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 470:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** */
 471:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 472:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 473:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 474:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 475:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 476:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                    the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 
 477:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 478:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 479:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 480:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 481:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 482:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 483:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 484:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 485:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 486:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 487:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 488:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 489:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 490:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 491:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 492:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 493:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 494:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 495:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 496:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 497:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 498:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 499:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 500:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 501:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 502:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 503:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 504:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 505:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 506:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 507:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 508:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 509:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 510:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 511:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 512:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 513:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 514:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** */
 515:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 516:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 517:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 518:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 519:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   #pragma push
 520:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   #pragma anon_unions
 521:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 522:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning 586
 523:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #endif
 524:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 525:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 526:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 527:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 528:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 529:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** */
 530:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 531:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 532:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 533:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   union{
 534:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 535:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 536:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection:3;   /**<   Defines function of the frame counter  */
 537:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode:2;      /**<   Determines the operation mode of the frame count
 538:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 539:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****     };
 540:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 541:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 542:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   };
 543:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 544:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 545:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 546:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 547:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** */
 548:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 549:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 550:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 551:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 552:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 553:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 554:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 555:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 556:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   union{
 557:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 558:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message ident
 559:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 560:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 561:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****     };
 562:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 563:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   };
 564:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   union{
 565:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 566:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 567:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 568:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****     };
 569:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 570:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   };
 571:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 572:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 573:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   union{
 574:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 575:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****       uint8_t can_data_byte[8];                 /**< Each position of the array represents a data b
 576:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****       uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bit
 577:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_dat
 578:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                               of the data */
 579:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****       uint64_t can_data_long;                   /** Data of the Message Object*/
 580:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****       };
 581:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 582:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 583:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 584:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 585:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 586:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 587:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   #pragma pop
 588:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 589:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning restore
 590:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #endif
 591:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 592:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * API Prototypes
 593:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 594:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 595:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** extern "C" {
 596:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #endif
 597:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 598:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 599:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 600:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 601:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 602:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 603:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 604:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 605:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 606:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 607:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 608:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 609:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 610:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 611:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 612:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 613:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 614:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 615:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 616:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 617:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 618:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *         for details.
 619:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 620:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 621:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 622:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 623:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 624:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 625:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 626:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 627:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 628:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 629:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 630:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 631:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 632:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 633:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 634:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 635:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 636:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 637:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 638:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 639:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 640:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 641:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 642:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 643:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 644:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 645:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 646:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 647:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 648:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 649:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 650:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 651:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 652:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 653:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 654:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 655:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 656:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 657:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 658:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 659:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 660:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 661:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 662:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 663:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 664:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 665:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 666:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 667:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 668:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 669:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 670:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 671:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 672:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
 673:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 674:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 675:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 676:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 677:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 678:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 679:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 680:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 681:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 682:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 683:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 684:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 685:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 686:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 687:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 688:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 689:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 690:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  register.
 691:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 692:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 693:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 694:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 695:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 696:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 697:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 698:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 699:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg1,
 700:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg2)
 701:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 702:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 703:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 704:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 705:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
 706:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 707:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 708:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 709:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 710:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 711:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 712:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 713:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 714:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 715:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 716:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 717:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 718:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 719:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 720:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 721:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 722:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 723:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 724:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 725:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 726:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 727:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 728:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 729:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 730:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
 731:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 732:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 733:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 734:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 735:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 736:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 737:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 738:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 739:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). 
 740:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 741:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 742:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 743:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 744:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 745:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 746:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 747:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 748:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN. 
 749:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 750:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 751:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 752:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 753:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 754:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 755:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 756:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 757:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 758:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 759:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 760:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 761:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 762:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 763:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 764:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 765:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 766:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 767:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 768:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 769:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 770:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 771:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 772:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 773:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 774:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 775:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 776:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 777:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 778:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 779:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 780:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 781:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * 
 782:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 783:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 784:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 785:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 786:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 787:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 788:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 789:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 790:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 791:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 792:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 793:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 794:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency 
 795:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 796:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 797:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 798:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 799:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 800:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 801:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 802:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 803:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 804:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 805:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 806:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 807:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 808:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 809:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 810:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 811:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 812:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 813:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 814:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 815:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 816:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 817:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 818:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 819:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 820:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 821:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 822:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 823:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 824:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 825:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 826:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 827:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 828:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #else
 829:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 830:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #endif
 831:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 832:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 833:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 834:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 835:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 836:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 837:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 838:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 839:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 840:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 841:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 842:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 843:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
 844:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 845:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 846:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 847:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 848:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 849:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 850:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 851:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 852:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 853:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 854:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 855:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 856:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 857:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 858:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 859:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 860:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 861:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 862:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
 863:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 864:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 865:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 866:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 867:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 868:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                           const uint32_t service_request)
 869:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 870:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 871:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
 872:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 873:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 874:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 875:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 876:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 877:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 878:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 879:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 880:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 881:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 882:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 883:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 884:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 885:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 886:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
 887:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 888:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 889:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 890:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_b
 891:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 892:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 893:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 894:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 895:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 896:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 897:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 898:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 899:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 900:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate. 
 901:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 902:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 903:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 904:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 905:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 906:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 907:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 908:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 909:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 910:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 911:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 912:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 913:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 914:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 915:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 916:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 917:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 918:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 919:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 920:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 921:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 922:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 923:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 924:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 925:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 926:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 927:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
 928:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 929:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 930:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 931:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 932:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 933:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 934:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 935:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                               const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 936:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 937:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 938:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 939:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
 940:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 941:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 942:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 943:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 944:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 945:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 946:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 947:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 948:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 949:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 950:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 951:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 952:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 953:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 954:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 955:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 956:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 957:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 958:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 959:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 960:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 961:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 962:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 963:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 964:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 965:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
 966:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 967:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 968:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 969:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 970:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 971:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 972:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 973:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 974:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 975:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 976:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 977:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 978:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 979:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 980:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 981:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 982:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 983:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 984:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 985:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
 986:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 987:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 988:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
 989:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 990:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
 991:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 992:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
 993:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
 994:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 995:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 996:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
 997:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
 998:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
 999:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1000:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1001:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1002:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1003:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1004:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1005:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1006:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1007:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1008:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1009:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1010:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1011:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1012:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1013:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1014:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1015:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1016:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1017:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1018:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1019:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1020:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1021:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1022:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1023:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1024:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1025:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1026:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1027:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1028:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1029:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1030:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1031:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1032:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1033:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1034:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1035:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1036:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1037:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1038:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1039:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1040:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1041:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1042:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1043:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1044:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1045:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1046:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1047:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1048:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1049:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1050:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1051:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1052:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1053:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1054:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1055:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1056:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1057:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1058:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1059:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1060:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1061:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1062:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1063:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1064:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1065:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1066:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1067:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
1068:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1069:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1070:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1071:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1072:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1073:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1074:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1075:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1076:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1077:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1078:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1079:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1080:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1081:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1082:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1083:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1084:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1085:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1086:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1087:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1088:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1089:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1090:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1091:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1092:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1093:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1094:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1095:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1096:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1097:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1098:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1099:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1100:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1101:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1102:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1103:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1104:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1105:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1106:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1107:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1108:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1109:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1110:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1111:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1112:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1113:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1114:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1115:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1116:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1117:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1118:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1119:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1120:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1121:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1122:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1123:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1124:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1125:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1126:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1127:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1128:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1129:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1130:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1131:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1132:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1133:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1134:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1135:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1136:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1137:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1138:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1139:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1140:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1141:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1142:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1143:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1144:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1145:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1146:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1147:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1148:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1149:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1150:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1151:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1152:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1153:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1154:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1155:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1156:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1157:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1158:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1159:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1160:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1161:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1162:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1163:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1164:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1165:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1166:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1167:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1168:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1169:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1170:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1171:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1172:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1173:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1174:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1175:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1176:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1177:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1178:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1179:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1180:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1181:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1182:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1183:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1184:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1185:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1186:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1187:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1188:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1189:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1190:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1191:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1192:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1193:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1194:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1195:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1196:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1197:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1198:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1199:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1200:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1201:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1202:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1203:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1204:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1205:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1206:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1207:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1208:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1209:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1210:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1211:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1212:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1213:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1214:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1215:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1216:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1217:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1218:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1219:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1220:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1221:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1222:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1223:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1224:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1225:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1226:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1227:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1228:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1229:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1230:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1231:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1232:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1233:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1234:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1235:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1236:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1237:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1238:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1239:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1240:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1241:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1242:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1243:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1244:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1245:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1246:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1247:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1248:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1249:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1250:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1251:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1252:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1253:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
1254:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1255:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1256:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1257:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1258:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1259:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1260:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1261:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1262:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1263:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1264:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1265:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1266:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1267:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1268:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1269:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1270:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1271:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1272:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1273:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1274:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
1275:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1276:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1277:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1278:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1279:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1280:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1281:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1282:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1283:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1284:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1285:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1286:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1287:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1288:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1289:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1290:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1291:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1292:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1293:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1294:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
1295:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1296:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1297:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1298:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1299:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1300:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1301:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1302:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1303:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1304:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1305:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1306:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Disable CAN node participation in CAN traffic. Bit INIT is automatically set when the CAN node e
1307:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * state. It configures NCR.INIT bit.
1308:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1309:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1310:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit()
1311:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1312:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1313:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1314:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
1315:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1316:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
1317:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1318:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1319:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1320:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1321:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1322:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1323:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1324:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1325:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1326:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Enable CAN node participation in CAN traffic. Bit INIT is automatically set when the CAN node en
1327:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * state. It configures NCR.INIT bit.
1328:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1329:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1330:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit()
1331:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1332:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1333:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
1334:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1335:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
1336:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1337:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1338:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1339:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1340:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1341:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1342:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1343:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1344:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1345:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Enable the CAN node, starts the participation in CAN traffic. It configures NCR.CANDIS and the N
1346:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1347:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1348:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
1349:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1350:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1351:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_Enable(XMC_CAN_NODE_t *const can_node)
1352:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1353:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CANDIS_Msk;
1354:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_ResetInitBit(can_node);
1355:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1356:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1357:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1358:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1359:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1360:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1361:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1362:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1363:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1364:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Disable the CAN node, terminates participation in CAN traffic. It configures NCR.CANDIS bit.
1365:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1366:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1367:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
1368:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1369:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1370:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_Disable(XMC_CAN_NODE_t *const can_node)
1371:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1372:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CANDIS_Msk;
1373:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1374:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1375:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1376:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1377:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1378:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1379:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1380:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1381:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Configure CAN node in Analyzer Mode. This means that messages may be received, but not transmitt
1382:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * is sent on the CAN bus upon frame reception. Active-error flags are sent recessive instead of do
1383:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * The transmit line is continuously held at recessive (1) level. XMC_CAN_NODE_SetInitBit() should 
1384:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * set / reset AnalyzerMode. It configures NCR.CALM bit.
1385:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1386:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1387:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ReSetAnalyzerMode()
1388:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1389:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1390:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1391:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1392:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
1393:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1394:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CALM_Msk;
1395:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1396:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1397:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1398:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1399:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1400:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1401:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1402:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1403:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1404:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Reset the Analyzer mode. CAN node is no more in Analyzer Mode. Please refer XMC_CAN_NODE_SetAnal
1405:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NCR.CALM bit. XMC_CAN_NODE_SetInitBit() should be called before set / reset Analyz
1406:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1407:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1408:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetAnalyzerMode()
1409:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1410:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1411:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1412:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
1413:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1414:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
1415:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1416:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1417:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
1418:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1419:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1420:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1421:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1422:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1423:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1424:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Trigger the suspension of the CAN node. An OCDS(on chip debug support) suspend trigger disables 
1425:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * soon as the CAN node becomes bus-idle or bus-off, bit INIT is internally forced to 1 to disable 
1426:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * The actual value of bit INIT remains unchanged. It configures NCR.SUSEN bit
1427:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1428:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1429:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
1430:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1431:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Note:</b><br>
1432:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Bit SUSEN is reset via OCDS(on chip debug support) Reset.
1433:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1434:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1435:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1436:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableSuspend(XMC_CAN_NODE_t *const can_node)
1437:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1438:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_SUSEN_Msk;
1439:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1440:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #else
1441:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1442:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1443:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1444:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1445:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1446:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1447:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Disables the transmission on CAN node x as soon as bus-idle is reached.
1448:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1449:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1450:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
1451:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1452:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @note Only available for XMC1400,XMC4800 and XMC4700 series
1453:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1454:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1455:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableTransmit(XMC_CAN_NODE_t *const can_node)
1456:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1457:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_TXDIS_Msk;
1458:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1459:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** #endif
1460:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1461:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1462:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1463:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1464:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1465:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_init frame counter mode selection. Refer @ref XMC_CAN_NODE_FRAME_COUNTER_t for v
1466:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1467:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1468:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1469:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1470:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Configures frame counter functions. Each CAN \a can_node is equipped with a frame counter that c
1471:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * CAN frames or obtains information about the time when a frame has been started to transmit or be
1472:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * node. It configures NFCR register.
1473:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1474:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1475:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
1476:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1477:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1478:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1479:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_FrameCounterConfigure(XMC_CAN_NODE_t *const can_node,
1480:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                         const XMC_CAN_NODE_FRAME_COUNTER_t *const can_node_init)
1481:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1482:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NFCR = (can_node->NFCR & ~(uint32_t)(CAN_NODE_NFCR_CFMOD_Msk |
1483:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                        CAN_NODE_NFCR_CFSEL_Msk)) |
1484:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                     can_node_init->nfcr;
1485:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1486:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1487:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1488:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1489:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1490:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1491:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1492:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint16_t current value of the CAN frame counter. Range :0-65535
1493:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1494:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1495:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns the frame counter value \a can_node of the CAN node. In Frame Count Mode (CFMOD = 00B),
1496:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  count value. In Time Stamp Mode (CFMOD = 01B), this API returns the captured bit time count val
1497:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  the start of a new frame. In all Bit Timing Analysis Modes (CFMOD = 10B), this API always retur
1498:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  fCLC clock cycles (measurement result) minus 1.
1499:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1500:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1501:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
1502:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1503:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1504:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1505:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint16_t XMC_CAN_NODE_GetCANFrameCounter(XMC_CAN_NODE_t *const can_node)
1506:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1507:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   return (uint16_t)(((uint32_t)(can_node->NFCR & CAN_NODE_NFCR_CFC_Msk) >> CAN_NODE_NFCR_CFC_Pos));
1508:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1509:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1510:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                      /*MO APIs*/
1511:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1512:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1513:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1514:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1515:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1516:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1517:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1518:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1519:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1520:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1521:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Data to be transmitted and data length code.
1522:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1523:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1524:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_Config()\n\n\n
1525:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1526:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1527:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1528:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1529:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo);
1530:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1531:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1532:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1533:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1534:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1535:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1536:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1537:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1538:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures transmit request for sending data frame. It configures MOCTR register. Data shall be
1539:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  using XMC_CAN_MO_UpdateData() before calling this API.
1540:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1541:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1542:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_UpdateData()\n\n\n
1543:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1544:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1545:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1546:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo);
1547:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1548:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1549:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1550:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1551:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1552:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1553:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1554:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1555:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Reads the Message Object data bytes, into message pointer passed as input parameter \a can_mo.
1556:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  can_data[0] of can_mo holds lower 4 bytes, can_data[1] of can_mo holds higher 4 bytes.
1557:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1558:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1559:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
1560:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1561:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1562:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1563:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive(XMC_CAN_MO_t *can_mo);
1564:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1565:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1566:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1567:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1568:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1569:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_STATUS_t CAN Node status. Refer @ref XMC_CAN_STATUS_t structure for details.
1570:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1571:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1572:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Reads the Message Object data bytes, into message pointer passed as input parameter \a can_mo.
1573:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  can_data[0] of can_mo holds lower 4 bytes, can_data[1] of can_mo holds higher 4 bytes.
1574:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1575:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1576:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
1577:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1578:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1579:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo);
1580:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1581:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo       Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure 
1582:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo_ptr_int   Message Object event node pointer selection. Refer @ref XMC_CAN_MO_POINT
1583:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *                for valid values.
1584:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request interrupt output line of multiCAN module.
1585:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1586:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1587:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1588:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1589:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Message Object event node pointer with \a service_request number. It configures MOIPR
1590:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1591:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1592:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
1593:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1594:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1595:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1596:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
1597:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                                 const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
1598:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                                                 const uint32_t service_request)
1599:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1600:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Ms
1601:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****                           (service_request << (uint32_t)can_mo_ptr_int);
1602:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1603:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1604:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1605:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1606:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1607:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current Message Object status.
1608:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1609:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1610:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Message Object status, that indicates message object transfer status and message object
1611:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  information such as the number of the current message object predecessor and successor message 
1612:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  the list number to which the message object is assigned.
1613:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1614:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1615:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
1616:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1617:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1618:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1619:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
1620:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1621:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_mo->can_mo_ptr->MOSTAT));
1622:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1623:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1624:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1625:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1626:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1627:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param mask   Message Object set status selection. Refer @ref XMC_CAN_MO_SET_STATUS_t for detail
1628:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *         Multiple enums can be ORed.
1629:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1630:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1631:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1632:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Message Object set Status. It configures MOCTR register.
1633:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1634:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1635:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_ResetStatus()\n\n\n
1636:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1637:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1638:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1639:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_SetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
1640:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
1641:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_mo->can_mo_ptr->MOCTR = mask;
1642:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
1643:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1644:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** /**
1645:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1646:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
1647:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @param mask   Message Object set status selection. Refer @ref XMC_CAN_MO_RESET_STATUS_t for deta
1648:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *             Multiple enums can be ORed.
1649:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1650:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1651:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1652:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *  Clears Message Object interrupt events. It configures MOCTR register.
1653:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1654:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1655:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  * None
1656:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  *
1657:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****  */
1658:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** 
1659:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo,const uint32_t mask)
1660:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** {
  27              	 .loc 1 1660 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 3960     	 str r1,[r7]
1661:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h ****   can_mo->can_mo_ptr->MOCTR = mask;
  44              	 .loc 1 1661 0
  45 000a 7B68     	 ldr r3,[r7,#4]
  46 000c 1B68     	 ldr r3,[r3]
  47 000e 3A68     	 ldr r2,[r7]
  48 0010 DA61     	 str r2,[r3,#28]
1662:D:/practica/proiect/DaveCan/Libraries/XMCLib/inc\xmc_can.h **** }
  49              	 .loc 1 1662 0
  50 0012 0C37     	 adds r7,r7,#12
  51              	.LCFI3:
  52              	 .cfi_def_cfa_offset 4
  53 0014 BD46     	 mov sp,r7
  54              	.LCFI4:
  55              	 .cfi_def_cfa_register 13
  56              	 
  57 0016 5DF8047B 	 ldr r7,[sp],#4
  58              	.LCFI5:
  59              	 .cfi_restore 7
  60              	 .cfi_def_cfa_offset 0
  61 001a 7047     	 bx lr
  62              	 .cfi_endproc
  63              	.LFE215:
  65              	 .global HandlePtr1
  66              	 .section .data.HandlePtr1,"aw",%progbits
  67              	 .align 2
  70              	HandlePtr1:
  71 0000 00000000 	 .word CAN_NODE_0
  72              	 .global can_data_arr_tx
  73              	 .section .data.can_data_arr_tx,"aw",%progbits
  74              	 .align 2
  77              	can_data_arr_tx:
  78 0000 01       	 .byte 1
  79 0001 02       	 .byte 2
  80 0002 03       	 .byte 3
  81 0003 04       	 .byte 4
  82 0004 05       	 .byte 5
  83 0005 06       	 .byte 6
  84 0006 07       	 .byte 7
  85 0007 08       	 .byte 8
  86              	 .global can_data_arr_rx
  87              	 .section .data.can_data_arr_rx,"aw",%progbits
  88              	 .align 2
  91              	can_data_arr_rx:
  92 0000 01       	 .byte 1
  93 0001 02       	 .byte 2
  94 0002 03       	 .byte 3
  95 0003 04       	 .byte 4
  96 0004 05       	 .byte 5
  97 0005 06       	 .byte 6
  98 0006 07       	 .byte 7
  99 0007 08       	 .byte 8
 100              	 .section .text.Can_Transmit,"ax",%progbits
 101              	 .align 2
 102              	 .global Can_Transmit
 103              	 .thumb
 104              	 .thumb_func
 106              	Can_Transmit:
 107              	.LFB244:
 108              	 .file 2 "../Can/Can.c"
   1:../Can/Can.c  **** /*
   2:../Can/Can.c  ****  * Can.c
   3:../Can/Can.c  ****  *
   4:../Can/Can.c  ****  *  Created on: Jul 23, 2019
   5:../Can/Can.c  ****  *      Author: uia94406
   6:../Can/Can.c  ****  */
   7:../Can/Can.c  **** 
   8:../Can/Can.c  **** 
   9:../Can/Can.c  **** #include <Dave.h>
  10:../Can/Can.c  **** #include "Can.h"
  11:../Can/Can.c  **** #include "Ctpl.h"
  12:../Can/Can.c  **** 
  13:../Can/Can.c  **** const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;//prima adresa din CAN
  14:../Can/Can.c  **** 
  15:../Can/Can.c  **** uint8_t can_data_arr_tx[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};//array de trimis
  16:../Can/Can.c  **** 
  17:../Can/Can.c  **** uint8_t can_data_arr_rx[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};//array de primit
  18:../Can/Can.c  **** 
  19:../Can/Can.c  **** void Can_Transmit(void)//functie de transmitere pe can
  20:../Can/Can.c  **** {
 109              	 .loc 2 20 0
 110              	 .cfi_startproc
 111              	 
 112              	 
 113 0000 80B5     	 push {r7,lr}
 114              	.LCFI6:
 115              	 .cfi_def_cfa_offset 8
 116              	 .cfi_offset 7,-8
 117              	 .cfi_offset 14,-4
 118 0002 82B0     	 sub sp,sp,#8
 119              	.LCFI7:
 120              	 .cfi_def_cfa_offset 16
 121 0004 00AF     	 add r7,sp,#0
 122              	.LCFI8:
 123              	 .cfi_def_cfa_register 7
  21:../Can/Can.c  **** 
  22:../Can/Can.c  **** 	CAN_NODE_STATUS_t mo_tranmit_status;//statusu mesajelor transmise
  23:../Can/Can.c  **** 	CAN_NODE_STATUS_t status_can;//statusu can
  24:../Can/Can.c  **** 	XMC_CAN_MO_t *MO_Ptr;//pointer la msj
  25:../Can/Can.c  **** 
  26:../Can/Can.c  **** 	MO_Ptr = HandlePtr1->lmobj_ptr[0]->mo_ptr;
 124              	 .loc 2 26 0
 125 0006 144B     	 ldr r3,.L4
 126 0008 1B68     	 ldr r3,[r3]
 127 000a DB68     	 ldr r3,[r3,#12]
 128 000c 1B68     	 ldr r3,[r3]
 129 000e 7B60     	 str r3,[r7,#4]
  27:../Can/Can.c  **** 
  28:../Can/Can.c  **** 	// update data for the MO to transmit
  29:../Can/Can.c  **** 
  30:../Can/Can.c  **** 	(void)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[0],&can_data_arr_tx[0]);
 130              	 .loc 2 30 0
 131 0010 114B     	 ldr r3,.L4
 132 0012 1B68     	 ldr r3,[r3]
 133 0014 DB68     	 ldr r3,[r3,#12]
 134 0016 1846     	 mov r0,r3
 135 0018 1049     	 ldr r1,.L4+4
 136 001a FFF7FEFF 	 bl CAN_NODE_MO_UpdateData
  31:../Can/Can.c  **** 
  32:../Can/Can.c  **** 	mo_tranmit_status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[0]);//Function to transmit the can 
 137              	 .loc 2 32 0
 138 001e 0E4B     	 ldr r3,.L4
 139 0020 1B68     	 ldr r3,[r3]
 140 0022 DB68     	 ldr r3,[r3,#12]
 141 0024 1846     	 mov r0,r3
 142 0026 FFF7FEFF 	 bl CAN_NODE_MO_Transmit
 143 002a 0346     	 mov r3,r0
 144 002c FB70     	 strb r3,[r7,#3]
  33:../Can/Can.c  **** 
  34:../Can/Can.c  **** 	if (mo_tranmit_status == CAN_NODE_STATUS_SUCCESS)
 145              	 .loc 2 34 0
 146 002e FB78     	 ldrb r3,[r7,#3]
 147 0030 002B     	 cmp r3,#0
 148 0032 0DD1     	 bne .L2
  35:../Can/Can.c  **** 
  36:../Can/Can.c  **** 	{
  37:../Can/Can.c  **** 		//message object transmission success.
  38:../Can/Can.c  **** 
  39:../Can/Can.c  **** 		// read the TXOK status bit
  40:../Can/Can.c  **** 		status_can = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[0]);
 149              	 .loc 2 40 0
 150 0034 084B     	 ldr r3,.L4
 151 0036 1B68     	 ldr r3,[r3]
 152 0038 DB68     	 ldr r3,[r3,#12]
 153 003a 1846     	 mov r0,r3
 154 003c FFF7FEFF 	 bl CAN_NODE_MO_GetStatus
 155 0040 0346     	 mov r3,r0
 156 0042 BB70     	 strb r3,[r7,#2]
  41:../Can/Can.c  **** 
  42:../Can/Can.c  **** 		if (status_can & XMC_CAN_MO_STATUS_TX_PENDING);
  43:../Can/Can.c  **** 		{
  44:../Can/Can.c  **** 			//Clear the transmit OK flag
  45:../Can/Can.c  **** 
  46:../Can/Can.c  **** 			XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_TX_PENDING);
 157              	 .loc 2 46 0
 158 0044 7868     	 ldr r0,[r7,#4]
 159 0046 0221     	 movs r1,#2
 160 0048 FFF7FEFF 	 bl XMC_CAN_MO_ResetStatus
  47:../Can/Can.c  **** 
  48:../Can/Can.c  **** 			Ctpl_TxNotification();
 161              	 .loc 2 48 0
 162 004c FFF7FEFF 	 bl Ctpl_TxNotification
 163              	.L2:
  49:../Can/Can.c  **** 		}
  50:../Can/Can.c  **** 
  51:../Can/Can.c  **** 	}
  52:../Can/Can.c  **** 	else
  53:../Can/Can.c  **** 	{
  54:../Can/Can.c  **** 		// message object failed to transmit.
  55:../Can/Can.c  **** 	}
  56:../Can/Can.c  **** 
  57:../Can/Can.c  **** }
 164              	 .loc 2 57 0
 165 0050 0837     	 adds r7,r7,#8
 166              	.LCFI9:
 167              	 .cfi_def_cfa_offset 8
 168 0052 BD46     	 mov sp,r7
 169              	.LCFI10:
 170              	 .cfi_def_cfa_register 13
 171              	 
 172 0054 80BD     	 pop {r7,pc}
 173              	.L5:
 174 0056 00BF     	 .align 2
 175              	.L4:
 176 0058 00000000 	 .word HandlePtr1
 177 005c 00000000 	 .word can_data_arr_tx
 178              	 .cfi_endproc
 179              	.LFE244:
 181              	 .section .text.Can_CheckForRx,"ax",%progbits
 182              	 .align 2
 183              	 .global Can_CheckForRx
 184              	 .thumb
 185              	 .thumb_func
 187              	Can_CheckForRx:
 188              	.LFB245:
  58:../Can/Can.c  **** 
  59:../Can/Can.c  **** uint32_t Can_CheckForRx(void)
  60:../Can/Can.c  **** {
 189              	 .loc 2 60 0
 190              	 .cfi_startproc
 191              	 
 192              	 
 193 0000 80B5     	 push {r7,lr}
 194              	.LCFI11:
 195              	 .cfi_def_cfa_offset 8
 196              	 .cfi_offset 7,-8
 197              	 .cfi_offset 14,-4
 198 0002 82B0     	 sub sp,sp,#8
 199              	.LCFI12:
 200              	 .cfi_def_cfa_offset 16
 201 0004 00AF     	 add r7,sp,#0
 202              	.LCFI13:
 203              	 .cfi_def_cfa_register 7
  61:../Can/Can.c  **** 	CAN_NODE_STATUS_t mo_receive_status;
  62:../Can/Can.c  **** 	XMC_CAN_MO_t *MO_Ptr_Receive;//locuri pt trimitere de msj(MO)
  63:../Can/Can.c  **** 	uint8_t i=0;
 204              	 .loc 2 63 0
 205 0006 0023     	 movs r3,#0
 206 0008 BB71     	 strb r3,[r7,#6]
  64:../Can/Can.c  **** 
  65:../Can/Can.c  **** 	MO_Ptr_Receive = HandlePtr1->lmobj_ptr[1]->mo_ptr;
 207              	 .loc 2 65 0
 208 000a 1B4B     	 ldr r3,.L11
 209 000c 1B68     	 ldr r3,[r3]
 210 000e 1B69     	 ldr r3,[r3,#16]
 211 0010 1B68     	 ldr r3,[r3]
 212 0012 3B60     	 str r3,[r7]
  66:../Can/Can.c  **** 
  67:../Can/Can.c  **** 	mo_receive_status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[1]);
 213              	 .loc 2 67 0
 214 0014 184B     	 ldr r3,.L11
 215 0016 1B68     	 ldr r3,[r3]
 216 0018 1B69     	 ldr r3,[r3,#16]
 217 001a 1846     	 mov r0,r3
 218 001c FFF7FEFF 	 bl CAN_NODE_MO_GetStatus
 219 0020 0346     	 mov r3,r0
 220 0022 FB71     	 strb r3,[r7,#7]
  68:../Can/Can.c  **** 	//Check receive pending status
  69:../Can/Can.c  **** 
  70:../Can/Can.c  **** 	if ( mo_receive_status & XMC_CAN_MO_STATUS_RX_PENDING)//verifica daca a primit
 221              	 .loc 2 70 0
 222 0024 FB79     	 ldrb r3,[r7,#7]
 223 0026 03F00103 	 and r3,r3,#1
 224 002a 002B     	 cmp r3,#0
 225 002c 1ED0     	 beq .L7
  71:../Can/Can.c  **** 	{
  72:../Can/Can.c  **** 
  73:../Can/Can.c  **** 		// Clear the flag
  74:../Can/Can.c  **** 
  75:../Can/Can.c  **** 		XMC_CAN_MO_ResetStatus(MO_Ptr_Receive,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 226              	 .loc 2 75 0
 227 002e 3868     	 ldr r0,[r7]
 228 0030 0121     	 movs r1,#1
 229 0032 FFF7FEFF 	 bl XMC_CAN_MO_ResetStatus
  76:../Can/Can.c  **** 
  77:../Can/Can.c  **** 		// Read the received Message object
  78:../Can/Can.c  **** 
  79:../Can/Can.c  **** 		mo_receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[1]);
 230              	 .loc 2 79 0
 231 0036 104B     	 ldr r3,.L11
 232 0038 1B68     	 ldr r3,[r3]
 233 003a 1B69     	 ldr r3,[r3,#16]
 234 003c 1846     	 mov r0,r3
 235 003e FFF7FEFF 	 bl CAN_NODE_MO_Receive
 236 0042 0346     	 mov r3,r0
 237 0044 FB71     	 strb r3,[r7,#7]
  80:../Can/Can.c  **** 
  81:../Can/Can.c  **** 		//todo: must check only for configured RX id - 710 - all others should not work
  82:../Can/Can.c  **** 
  83:../Can/Can.c  **** 		if (mo_receive_status == CAN_NODE_STATUS_SUCCESS)//verifica daca-i totu cu succes
 238              	 .loc 2 83 0
 239 0046 FB79     	 ldrb r3,[r7,#7]
 240 0048 002B     	 cmp r3,#0
 241 004a 0FD1     	 bne .L7
  84:../Can/Can.c  **** 		{
  85:../Can/Can.c  **** 
  86:../Can/Can.c  **** 			for(; i<8u ; i++)
 242              	 .loc 2 86 0
 243 004c 09E0     	 b .L8
 244              	.L9:
  87:../Can/Can.c  **** 			{
  88:../Can/Can.c  **** 				can_data_arr_rx[i]=MO_Ptr_Receive->can_data_byte[i];
 245              	 .loc 2 88 0 discriminator 2
 246 004e BB79     	 ldrb r3,[r7,#6]
 247 0050 BA79     	 ldrb r2,[r7,#6]
 248 0052 3968     	 ldr r1,[r7]
 249 0054 0A44     	 add r2,r2,r1
 250 0056 117C     	 ldrb r1,[r2,#16]
 251 0058 084A     	 ldr r2,.L11+4
 252 005a D154     	 strb r1,[r2,r3]
  86:../Can/Can.c  **** 			{
 253              	 .loc 2 86 0 discriminator 2
 254 005c BB79     	 ldrb r3,[r7,#6]
 255 005e 0133     	 adds r3,r3,#1
 256 0060 BB71     	 strb r3,[r7,#6]
 257              	.L8:
  86:../Can/Can.c  **** 			{
 258              	 .loc 2 86 0 is_stmt 0 discriminator 1
 259 0062 BB79     	 ldrb r3,[r7,#6]
 260 0064 072B     	 cmp r3,#7
 261 0066 F2D9     	 bls .L9
  89:../Can/Can.c  **** 			}
  90:../Can/Can.c  **** 
  91:../Can/Can.c  **** 			//notify CanTpLite
  92:../Can/Can.c  **** 			Ctpl_RxNotification();
 262              	 .loc 2 92 0 is_stmt 1
 263 0068 FFF7FEFF 	 bl Ctpl_RxNotification
 264              	.L7:
  93:../Can/Can.c  **** 		}
  94:../Can/Can.c  **** 
  95:../Can/Can.c  **** 	}
  96:../Can/Can.c  **** 
  97:../Can/Can.c  **** 	return (uint32_t)mo_receive_status;
 265              	 .loc 2 97 0
 266 006c FB79     	 ldrb r3,[r7,#7]
  98:../Can/Can.c  **** }
 267              	 .loc 2 98 0
 268 006e 1846     	 mov r0,r3
 269 0070 0837     	 adds r7,r7,#8
 270              	.LCFI14:
 271              	 .cfi_def_cfa_offset 8
 272 0072 BD46     	 mov sp,r7
 273              	.LCFI15:
 274              	 .cfi_def_cfa_register 13
 275              	 
 276 0074 80BD     	 pop {r7,pc}
 277              	.L12:
 278 0076 00BF     	 .align 2
 279              	.L11:
 280 0078 00000000 	 .word HandlePtr1
 281 007c 00000000 	 .word can_data_arr_rx
 282              	 .cfi_endproc
 283              	.LFE245:
 285              	 .section .text.Can_SetTxData,"ax",%progbits
 286              	 .align 2
 287              	 .global Can_SetTxData
 288              	 .thumb
 289              	 .thumb_func
 291              	Can_SetTxData:
 292              	.LFB246:
  99:../Can/Can.c  **** 
 100:../Can/Can.c  **** uint8_t Can_SetTxData(uint8_t* buff)//copiaza datele primite in array_tx
 101:../Can/Can.c  **** {
 293              	 .loc 2 101 0
 294              	 .cfi_startproc
 295              	 
 296              	 
 297              	 
 298 0000 80B4     	 push {r7}
 299              	.LCFI16:
 300              	 .cfi_def_cfa_offset 4
 301              	 .cfi_offset 7,-4
 302 0002 85B0     	 sub sp,sp,#20
 303              	.LCFI17:
 304              	 .cfi_def_cfa_offset 24
 305 0004 00AF     	 add r7,sp,#0
 306              	.LCFI18:
 307              	 .cfi_def_cfa_register 7
 308 0006 7860     	 str r0,[r7,#4]
 102:../Can/Can.c  **** 	uint8_t i=0;
 309              	 .loc 2 102 0
 310 0008 0023     	 movs r3,#0
 311 000a FB73     	 strb r3,[r7,#15]
 103:../Can/Can.c  **** 	if(buff != NULL)
 312              	 .loc 2 103 0
 313 000c 7B68     	 ldr r3,[r7,#4]
 314 000e 002B     	 cmp r3,#0
 315 0010 0DD0     	 beq .L14
 104:../Can/Can.c  **** 	{
 105:../Can/Can.c  **** 		//copy from buff to can_data_arr_tx
 106:../Can/Can.c  **** 		for(; i<8u ; i++)
 316              	 .loc 2 106 0
 317 0012 09E0     	 b .L15
 318              	.L16:
 107:../Can/Can.c  **** 		{
 108:../Can/Can.c  **** 			can_data_arr_tx[i]=buff[i];
 319              	 .loc 2 108 0 discriminator 2
 320 0014 FB7B     	 ldrb r3,[r7,#15]
 321 0016 FA7B     	 ldrb r2,[r7,#15]
 322 0018 7968     	 ldr r1,[r7,#4]
 323 001a 0A44     	 add r2,r2,r1
 324 001c 1178     	 ldrb r1,[r2]
 325 001e 074A     	 ldr r2,.L18
 326 0020 D154     	 strb r1,[r2,r3]
 106:../Can/Can.c  **** 		{
 327              	 .loc 2 106 0 discriminator 2
 328 0022 FB7B     	 ldrb r3,[r7,#15]
 329 0024 0133     	 adds r3,r3,#1
 330 0026 FB73     	 strb r3,[r7,#15]
 331              	.L15:
 106:../Can/Can.c  **** 		{
 332              	 .loc 2 106 0 is_stmt 0 discriminator 1
 333 0028 FB7B     	 ldrb r3,[r7,#15]
 334 002a 072B     	 cmp r3,#7
 335 002c F2D9     	 bls .L16
 336              	.L14:
 109:../Can/Can.c  **** 		}
 110:../Can/Can.c  **** 	}
 111:../Can/Can.c  **** 
 112:../Can/Can.c  **** 	return 0;
 337              	 .loc 2 112 0 is_stmt 1
 338 002e 0023     	 movs r3,#0
 113:../Can/Can.c  **** }
 339              	 .loc 2 113 0
 340 0030 1846     	 mov r0,r3
 341 0032 1437     	 adds r7,r7,#20
 342              	.LCFI19:
 343              	 .cfi_def_cfa_offset 4
 344 0034 BD46     	 mov sp,r7
 345              	.LCFI20:
 346              	 .cfi_def_cfa_register 13
 347              	 
 348 0036 5DF8047B 	 ldr r7,[sp],#4
 349              	.LCFI21:
 350              	 .cfi_restore 7
 351              	 .cfi_def_cfa_offset 0
 352 003a 7047     	 bx lr
 353              	.L19:
 354              	 .align 2
 355              	.L18:
 356 003c 00000000 	 .word can_data_arr_tx
 357              	 .cfi_endproc
 358              	.LFE246:
 360              	 .section .text.Can_GetRxData,"ax",%progbits
 361              	 .align 2
 362              	 .global Can_GetRxData
 363              	 .thumb
 364              	 .thumb_func
 366              	Can_GetRxData:
 367              	.LFB247:
 114:../Can/Can.c  **** 
 115:../Can/Can.c  **** // copiaza datele in buffer de trimitere
 116:../Can/Can.c  **** uint8_t Can_GetRxData(uint8_t* outBuffer)
 117:../Can/Can.c  **** {
 368              	 .loc 2 117 0
 369              	 .cfi_startproc
 370              	 
 371              	 
 372              	 
 373 0000 80B4     	 push {r7}
 374              	.LCFI22:
 375              	 .cfi_def_cfa_offset 4
 376              	 .cfi_offset 7,-4
 377 0002 85B0     	 sub sp,sp,#20
 378              	.LCFI23:
 379              	 .cfi_def_cfa_offset 24
 380 0004 00AF     	 add r7,sp,#0
 381              	.LCFI24:
 382              	 .cfi_def_cfa_register 7
 383 0006 7860     	 str r0,[r7,#4]
 118:../Can/Can.c  **** 
 119:../Can/Can.c  **** 	uint8_t i=0;
 384              	 .loc 2 119 0
 385 0008 0023     	 movs r3,#0
 386 000a FB73     	 strb r3,[r7,#15]
 120:../Can/Can.c  **** 	if(outBuffer != NULL)
 387              	 .loc 2 120 0
 388 000c 7B68     	 ldr r3,[r7,#4]
 389 000e 002B     	 cmp r3,#0
 390 0010 0DD0     	 beq .L21
 121:../Can/Can.c  **** 	{
 122:../Can/Can.c  **** 		for(; i<8u ; i++)
 391              	 .loc 2 122 0
 392 0012 09E0     	 b .L22
 393              	.L23:
 123:../Can/Can.c  **** 		{
 124:../Can/Can.c  **** 			outBuffer[i]=can_data_arr_rx[i];
 394              	 .loc 2 124 0 discriminator 2
 395 0014 FB7B     	 ldrb r3,[r7,#15]
 396 0016 7A68     	 ldr r2,[r7,#4]
 397 0018 1344     	 add r3,r3,r2
 398 001a FA7B     	 ldrb r2,[r7,#15]
 399 001c 0749     	 ldr r1,.L25
 400 001e 8A5C     	 ldrb r2,[r1,r2]
 401 0020 1A70     	 strb r2,[r3]
 122:../Can/Can.c  **** 		{
 402              	 .loc 2 122 0 discriminator 2
 403 0022 FB7B     	 ldrb r3,[r7,#15]
 404 0024 0133     	 adds r3,r3,#1
 405 0026 FB73     	 strb r3,[r7,#15]
 406              	.L22:
 122:../Can/Can.c  **** 		{
 407              	 .loc 2 122 0 is_stmt 0 discriminator 1
 408 0028 FB7B     	 ldrb r3,[r7,#15]
 409 002a 072B     	 cmp r3,#7
 410 002c F2D9     	 bls .L23
 411              	.L21:
 125:../Can/Can.c  **** 		}
 126:../Can/Can.c  **** 
 127:../Can/Can.c  **** 
 128:../Can/Can.c  **** 		//copy contents of can_data_arr_rx to the pointer outBuffer
 129:../Can/Can.c  **** 	}
 130:../Can/Can.c  **** 
 131:../Can/Can.c  **** 	return 0;
 412              	 .loc 2 131 0 is_stmt 1
 413 002e 0023     	 movs r3,#0
 132:../Can/Can.c  **** }
 414              	 .loc 2 132 0
 415 0030 1846     	 mov r0,r3
 416 0032 1437     	 adds r7,r7,#20
 417              	.LCFI25:
 418              	 .cfi_def_cfa_offset 4
 419 0034 BD46     	 mov sp,r7
 420              	.LCFI26:
 421              	 .cfi_def_cfa_register 13
 422              	 
 423 0036 5DF8047B 	 ldr r7,[sp],#4
 424              	.LCFI27:
 425              	 .cfi_restore 7
 426              	 .cfi_def_cfa_offset 0
 427 003a 7047     	 bx lr
 428              	.L26:
 429              	 .align 2
 430              	.L25:
 431 003c 00000000 	 .word can_data_arr_rx
 432              	 .cfi_endproc
 433              	.LFE247:
 435              	 .text
 436              	.Letext0:
 437              	 .file 3 "c:\\users\\va40036139\\desktop\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 438              	 .file 4 "c:\\users\\va40036139\\desktop\\dave_4-4-2_64bit_2018-02-23\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 439              	 .file 5 "D:/practica/proiect/DaveCan/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 440              	 .file 6 "D:/practica/proiect/DaveCan/Libraries/XMCLib/inc/xmc_gpio.h"
 441              	 .file 7 "D:/practica/proiect/DaveCan/Libraries/XMCLib/inc/xmc4_gpio.h"
 442              	 .file 8 "D:/practica/proiect/DaveCan/Dave/Generated/GLOBAL_CAN/global_can.h"
 443              	 .file 9 "D:/practica/proiect/DaveCan/Dave/Generated/CAN_NODE/can_node.h"
 444              	 .file 10 "D:/practica/proiect/DaveCan/Libraries/CMSIS/Include/core_cm4.h"
 445              	 .file 11 "D:/practica/proiect/DaveCan/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 446              	 .file 12 "D:/practica/proiect/DaveCan/Dave/Generated/CAN_NODE/can_node_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Can.c
    {standard input}:20     .text.XMC_CAN_MO_ResetStatus:00000000 $t
    {standard input}:24     .text.XMC_CAN_MO_ResetStatus:00000000 XMC_CAN_MO_ResetStatus
    {standard input}:70     .data.HandlePtr1:00000000 HandlePtr1
    {standard input}:67     .data.HandlePtr1:00000000 $d
    {standard input}:77     .data.can_data_arr_tx:00000000 can_data_arr_tx
    {standard input}:74     .data.can_data_arr_tx:00000000 $d
    {standard input}:91     .data.can_data_arr_rx:00000000 can_data_arr_rx
    {standard input}:88     .data.can_data_arr_rx:00000000 $d
    {standard input}:101    .text.Can_Transmit:00000000 $t
    {standard input}:106    .text.Can_Transmit:00000000 Can_Transmit
    {standard input}:176    .text.Can_Transmit:00000058 $d
    {standard input}:182    .text.Can_CheckForRx:00000000 $t
    {standard input}:187    .text.Can_CheckForRx:00000000 Can_CheckForRx
    {standard input}:280    .text.Can_CheckForRx:00000078 $d
    {standard input}:286    .text.Can_SetTxData:00000000 $t
    {standard input}:291    .text.Can_SetTxData:00000000 Can_SetTxData
    {standard input}:356    .text.Can_SetTxData:0000003c $d
    {standard input}:361    .text.Can_GetRxData:00000000 $t
    {standard input}:366    .text.Can_GetRxData:00000000 Can_GetRxData
    {standard input}:431    .text.Can_GetRxData:0000003c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CAN_NODE_0
CAN_NODE_MO_UpdateData
CAN_NODE_MO_Transmit
CAN_NODE_MO_GetStatus
Ctpl_TxNotification
CAN_NODE_MO_Receive
Ctpl_RxNotification
