
DaveCan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b64  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         00000070  20000000  0c002b64  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001578  20000070  0c002bd4  00010070  2**2
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 000009f8  00000000  00000000  00010070  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000aab9  00000000  00000000  00010a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e81  00000000  00000000  0001b521  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004837  00000000  00000000  0001d3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000027bc  00000000  00000000  00021bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005742  00000000  00000000  00024398  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000050ae  00000000  00000000  00029ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000880  00000000  00000000  0002eb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000004a3  00000000  00000000  0002f408  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	65 19 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     e...............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c002b64 	.word	0x0c002b64
 800024c:	20000000 	.word	0x20000000
 8000250:	00000070 	.word	0x00000070
 8000254:	0c002bd4 	.word	0x0c002bd4
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c002b64 	.word	0x0c002b64
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c002b64 	.word	0x0c002b64
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000070 	.word	0x20000070
 800027c:	00001578 	.word	0x00001578
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002b5 	.word	0x080002b5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08002a11 	.word	0x08002a11
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	080029e9 	.word	0x080029e9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002b4:	b598      	push	{r3, r4, r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <SystemInit+0x1c>)
 80002ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002be:	4614      	mov	r4, r2
 80002c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002c6:	f001 fcdd 	bl	8001c84 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002ca:	f001 fd45 	bl	8001d58 <SystemCoreClockSetup>
}
 80002ce:	bd98      	pop	{r3, r4, r7, pc}
 80002d0:	2000ffc4 	.word	0x2000ffc4

080002d4 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002da:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d03e      	beq.n	8000364 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <SystemCoreClockUpdate+0xc8>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d002      	beq.n	80002f8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	e002      	b.n	80002fe <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002f8:	f001 fd24 	bl	8001d44 <OSCHP_GetFrequency>
 80002fc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002fe:	4b27      	ldr	r3, [pc, #156]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	2b00      	cmp	r3, #0
 8000308:	d020      	beq.n	800034c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800030a:	4b24      	ldr	r3, [pc, #144]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000312:	0e1b      	lsrs	r3, r3, #24
 8000314:	3301      	adds	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000318:	4b20      	ldr	r3, [pc, #128]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	3301      	adds	r3, #1
 8000324:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <SystemCoreClockUpdate+0xc8>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e00d      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <SystemCoreClockUpdate+0xc8>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	3301      	adds	r3, #1
 8000356:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e001      	b.n	8000368 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xcc>)
 8000366:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	3301      	adds	r3, #1
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <SystemCoreClockUpdate+0xc4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	3301      	adds	r3, #1
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <SystemCoreClockUpdate+0xd0>)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	50004600 	.word	0x50004600
 800039c:	50004710 	.word	0x50004710
 80003a0:	016e3600 	.word	0x016e3600
 80003a4:	2000ffc0 	.word	0x2000ffc0

080003a8 <Os_Init>:
uint32_t TimerId_5ms;



void Os_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	TimerId_1ms = (uint32_t)SYSTIMER_CreateTimer(ONE_MILI_SEC,SYSTIMER_MODE_PERIODIC,(void*)OS_1MS_Task,NULL);
 80003ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b0:	2101      	movs	r1, #1
 80003b2:	4a15      	ldr	r2, [pc, #84]	; (8000408 <Os_Init+0x60>)
 80003b4:	2300      	movs	r3, #0
 80003b6:	f001 fb33 	bl	8001a20 <SYSTIMER_CreateTimer>
 80003ba:	4602      	mov	r2, r0
 80003bc:	4b13      	ldr	r3, [pc, #76]	; (800040c <Os_Init+0x64>)
 80003be:	601a      	str	r2, [r3, #0]
	TimerId_5ms = (uint32_t)SYSTIMER_CreateTimer(ONE_MILI_SEC * 5u,SYSTIMER_MODE_PERIODIC,(void*)OS_5MS_Task,NULL);
 80003c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80003c4:	2101      	movs	r1, #1
 80003c6:	4a12      	ldr	r2, [pc, #72]	; (8000410 <Os_Init+0x68>)
 80003c8:	2300      	movs	r3, #0
 80003ca:	f001 fb29 	bl	8001a20 <SYSTIMER_CreateTimer>
 80003ce:	4602      	mov	r2, r0
 80003d0:	4b10      	ldr	r3, [pc, #64]	; (8000414 <Os_Init+0x6c>)
 80003d2:	601a      	str	r2, [r3, #0]
	TimerId_10ms = (uint32_t)SYSTIMER_CreateTimer(ONE_MILI_SEC * 10u,SYSTIMER_MODE_PERIODIC,(void*)OS_10MS_Task,NULL);
 80003d4:	f242 7010 	movw	r0, #10000	; 0x2710
 80003d8:	2101      	movs	r1, #1
 80003da:	4a0f      	ldr	r2, [pc, #60]	; (8000418 <Os_Init+0x70>)
 80003dc:	2300      	movs	r3, #0
 80003de:	f001 fb1f 	bl	8001a20 <SYSTIMER_CreateTimer>
 80003e2:	4602      	mov	r2, r0
 80003e4:	4b0d      	ldr	r3, [pc, #52]	; (800041c <Os_Init+0x74>)
 80003e6:	601a      	str	r2, [r3, #0]

	//timer is created successfully, now start/run software timer

	SYSTIMER_StartTimer(TimerId_1ms);
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <Os_Init+0x64>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 fbb5 	bl	8001b5c <SYSTIMER_StartTimer>
	SYSTIMER_StartTimer(TimerId_5ms);
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <Os_Init+0x6c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fbb0 	bl	8001b5c <SYSTIMER_StartTimer>
	SYSTIMER_StartTimer(TimerId_10ms);
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <Os_Init+0x74>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4618      	mov	r0, r3
 8000402:	f001 fbab 	bl	8001b5c <SYSTIMER_StartTimer>
}
 8000406:	bd80      	pop	{r7, pc}
 8000408:	08000421 	.word	0x08000421
 800040c:	20000490 	.word	0x20000490
 8000410:	0800042d 	.word	0x0800042d
 8000414:	2000048c 	.word	0x2000048c
 8000418:	08000439 	.word	0x08000439
 800041c:	20000494 	.word	0x20000494

08000420 <OS_1MS_Task>:
 * input none
 * output none
 *
 * */
void OS_1MS_Task(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	Ctpl_MainFunction();
 8000424:	f001 ffa8 	bl	8002378 <Ctpl_MainFunction>
}
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop

0800042c <OS_5MS_Task>:
 * input none
 * output none
 *
 * */
void OS_5MS_Task(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	Appl_MainFunction();
 8000430:	f002 fa56 	bl	80028e0 <Appl_MainFunction>
}
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop

08000438 <OS_10MS_Task>:
 * input none
 * output none
 *
 * */
void OS_10MS_Task(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0

	dat[0]=ticker++;
	Can_SetTxData(&dat[0]);
	Can_Transmit();
#endif
}
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	460b      	mov	r3, r1
 800044e:	607a      	str	r2, [r7, #4]
 8000450:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000452:	7afb      	ldrb	r3, [r7, #11]
 8000454:	089b      	lsrs	r3, r3, #2
 8000456:	b2db      	uxtb	r3, r3
 8000458:	4618      	mov	r0, r3
 800045a:	7afb      	ldrb	r3, [r7, #11]
 800045c:	089b      	lsrs	r3, r3, #2
 800045e:	b2db      	uxtb	r3, r3
 8000460:	461a      	mov	r2, r3
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	3204      	adds	r2, #4
 8000466:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046a:	7afb      	ldrb	r3, [r7, #11]
 800046c:	f003 0303 	and.w	r3, r3, #3
 8000470:	00db      	lsls	r3, r3, #3
 8000472:	4619      	mov	r1, r3
 8000474:	23f8      	movs	r3, #248	; 0xf8
 8000476:	408b      	lsls	r3, r1
 8000478:	43db      	mvns	r3, r3
 800047a:	ea02 0103 	and.w	r1, r2, r3
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	1d02      	adds	r2, r0, #4
 8000482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800048a:	7afb      	ldrb	r3, [r7, #11]
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	4619      	mov	r1, r3
 8000490:	2303      	movs	r3, #3
 8000492:	408b      	lsls	r3, r1
 8000494:	43db      	mvns	r3, r3
 8000496:	401a      	ands	r2, r3
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	4a3a      	ldr	r2, [pc, #232]	; (8000588 <XMC_GPIO_Init+0x144>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d003      	beq.n	80004ac <XMC_GPIO_Init+0x68>
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	4a39      	ldr	r2, [pc, #228]	; (800058c <XMC_GPIO_Init+0x148>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d10a      	bne.n	80004c2 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004b0:	7afb      	ldrb	r3, [r7, #11]
 80004b2:	2101      	movs	r1, #1
 80004b4:	fa01 f303 	lsl.w	r3, r1, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	401a      	ands	r2, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	661a      	str	r2, [r3, #96]	; 0x60
 80004c0:	e042      	b.n	8000548 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	b25b      	sxtb	r3, r3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	da3c      	bge.n	8000548 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	685a      	ldr	r2, [r3, #4]
 80004d2:	7afb      	ldrb	r3, [r7, #11]
 80004d4:	409a      	lsls	r2, r3
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80004da:	7afb      	ldrb	r3, [r7, #11]
 80004dc:	08db      	lsrs	r3, r3, #3
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	4618      	mov	r0, r3
 80004e2:	7afb      	ldrb	r3, [r7, #11]
 80004e4:	08db      	lsrs	r3, r3, #3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	461a      	mov	r2, r3
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3210      	adds	r2, #16
 80004ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004f2:	7afb      	ldrb	r3, [r7, #11]
 80004f4:	f003 0307 	and.w	r3, r3, #7
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	4619      	mov	r1, r3
 80004fc:	2307      	movs	r3, #7
 80004fe:	408b      	lsls	r3, r1
 8000500:	43db      	mvns	r3, r3
 8000502:	ea02 0103 	and.w	r1, r2, r3
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	f100 0210 	add.w	r2, r0, #16
 800050c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000510:	7afb      	ldrb	r3, [r7, #11]
 8000512:	08db      	lsrs	r3, r3, #3
 8000514:	b2db      	uxtb	r3, r3
 8000516:	4618      	mov	r0, r3
 8000518:	7afb      	ldrb	r3, [r7, #11]
 800051a:	08db      	lsrs	r3, r3, #3
 800051c:	b2db      	uxtb	r3, r3
 800051e:	461a      	mov	r2, r3
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	3210      	adds	r2, #16
 8000524:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	7a1b      	ldrb	r3, [r3, #8]
 800052c:	4619      	mov	r1, r3
 800052e:	7afb      	ldrb	r3, [r7, #11]
 8000530:	f003 0307 	and.w	r3, r3, #7
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	ea42 0103 	orr.w	r1, r2, r3
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f100 0210 	add.w	r2, r0, #16
 8000544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000548:	7afb      	ldrb	r3, [r7, #11]
 800054a:	089b      	lsrs	r3, r3, #2
 800054c:	b2db      	uxtb	r3, r3
 800054e:	4618      	mov	r0, r3
 8000550:	7afb      	ldrb	r3, [r7, #11]
 8000552:	089b      	lsrs	r3, r3, #2
 8000554:	b2db      	uxtb	r3, r3
 8000556:	461a      	mov	r2, r3
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3204      	adds	r2, #4
 800055c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	7afb      	ldrb	r3, [r7, #11]
 8000568:	f003 0303 	and.w	r3, r3, #3
 800056c:	00db      	lsls	r3, r3, #3
 800056e:	fa01 f303 	lsl.w	r3, r1, r3
 8000572:	ea42 0103 	orr.w	r1, r2, r3
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	1d02      	adds	r2, r0, #4
 800057a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	48028e00 	.word	0x48028e00
 800058c:	48028f00 	.word	0x48028f00

08000590 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000596:	681b      	ldr	r3, [r3, #0]
}
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	2000ffc0 	.word	0x2000ffc0

080005a8 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 80005ac:	4b03      	ldr	r3, [pc, #12]	; (80005bc <XMC_SCU_GetMirrorStatus+0x14>)
 80005ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	50004000 	.word	0x50004000

080005c0 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80005c8:	f7ff fe84 	bl	80002d4 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <XMC_SCU_lDelay+0x3c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <XMC_SCU_lDelay+0x40>)
 80005d2:	fba2 2303 	umull	r2, r3, r2, r3
 80005d6:	0c9a      	lsrs	r2, r3, #18
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	fb02 f303 	mul.w	r3, r2, r3
 80005de:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e003      	b.n	80005ee <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80005e6:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3301      	adds	r3, #1
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d3f7      	bcc.n	80005e6 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000ffc0 	.word	0x2000ffc0
 8000600:	431bde83 	.word	0x431bde83

08000604 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800060a:	685b      	ldr	r3, [r3, #4]
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	50004074 	.word	0x50004074

0800061c <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000624:	4a03      	ldr	r2, [pc, #12]	; (8000634 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	60d3      	str	r3, [r2, #12]
}
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	50004074 	.word	0x50004074

08000638 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000638:	b5b0      	push	{r4, r5, r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af02      	add	r7, sp, #8
 800063e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000640:	2000      	movs	r0, #0
 8000642:	f000 f89b 	bl	800077c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000646:	f000 fa1d 	bl	8000a84 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	79db      	ldrb	r3, [r3, #7]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d00a      	beq.n	8000668 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000652:	f000 fa55 	bl	8000b00 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000656:	bf00      	nop
 8000658:	f000 fa40 	bl	8000adc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 800065c:	4603      	mov	r3, r0
 800065e:	f083 0301 	eor.w	r3, r3, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f7      	bne.n	8000658 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7a5b      	ldrb	r3, [r3, #9]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f8ff 	bl	8000870 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8000672:	bf00      	nop
 8000674:	f7ff ff98 	bl	80005a8 <XMC_SCU_GetMirrorStatus>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1fa      	bne.n	8000674 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	7a1b      	ldrb	r3, [r3, #8]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f9d8 	bl	8000a38 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7c1b      	ldrb	r3, [r3, #16]
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f90d 	bl	80008ac <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	7c5b      	ldrb	r3, [r3, #17]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f930 	bl	80008fc <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7c9b      	ldrb	r3, [r3, #18]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f917 	bl	80008d4 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	7cdb      	ldrb	r3, [r3, #19]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f93a 	bl	8000924 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	799b      	ldrb	r3, [r3, #6]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00a      	beq.n	80006ce <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80006b8:	f000 fa5a 	bl	8000b70 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80006bc:	bf00      	nop
 80006be:	f000 fa7f 	bl	8000bc0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80006c2:	4603      	mov	r3, r0
 80006c4:	f083 0301 	eor.w	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f7      	bne.n	80006be <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	78db      	ldrb	r3, [r3, #3]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d102      	bne.n	80006dc <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80006d6:	f000 fa97 	bl	8000c08 <XMC_SCU_CLOCK_DisableSystemPll>
 80006da:	e014      	b.n	8000706 <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80006dc:	f000 fa84 	bl	8000be8 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	8899      	ldrh	r1, [r3, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006ec:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006f2:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	4608      	mov	r0, r1
 80006fc:	4611      	mov	r1, r2
 80006fe:	462a      	mov	r2, r5
 8000700:	4623      	mov	r3, r4
 8000702:	f000 fa91 	bl	8000c28 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800070e:	d103      	bne.n	8000718 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000710:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000714:	f000 f832 	bl	800077c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000718:	f7ff fddc 	bl	80002d4 <SystemCoreClockUpdate>
}
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bdb0      	pop	{r4, r5, r7, pc}
 8000722:	bf00      	nop

08000724 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	0f1b      	lsrs	r3, r3, #28
 8000730:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000738:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	461a      	mov	r2, r3
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000748:	4413      	add	r3, r2
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	601a      	str	r2, [r3, #0]
}
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	50004414 	.word	0x50004414

0800075c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000760:	f7ff ff16 	bl	8000590 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000764:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000768:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8000772:	4618      	mov	r0, r3
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	50004600 	.word	0x50004600

0800077c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000784:	4906      	ldr	r1, [pc, #24]	; (80007a0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4313      	orrs	r3, r2
 8000792:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	50004600 	.word	0x50004600

080007a4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80007ac:	4906      	ldr	r1, [pc, #24]	; (80007c8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	50004600 	.word	0x50004600

080007cc <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80007d4:	4906      	ldr	r1, [pc, #24]	; (80007f0 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	50004600 	.word	0x50004600

080007f4 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d108      	bne.n	8000816 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000804:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800080e:	f023 0301 	bic.w	r3, r3, #1
 8000812:	60d3      	str	r3, [r2, #12]
 8000814:	e007      	b.n	8000826 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000816:	4a06      	ldr	r2, [pc, #24]	; (8000830 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	60d3      	str	r3, [r2, #12]
  }
}
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	50004710 	.word	0x50004710

08000834 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800083e:	bf00      	nop
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000842:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1f8      	bne.n	8000840 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800084e:	4907      	ldr	r1, [pc, #28]	; (800086c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000858:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800085a:	4313      	orrs	r3, r2
 800085c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	50004000 	.word	0x50004000
 800086c:	50004300 	.word	0x50004300

08000870 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800087a:	bf00      	nop
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800087e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1f8      	bne.n	800087c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800088a:	4907      	ldr	r1, [pc, #28]	; (80008a8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000894:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000896:	4313      	orrs	r3, r2
 8000898:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	50004000 	.word	0x50004000
 80008a8:	50004300 	.word	0x50004300

080008ac <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80008b4:	4906      	ldr	r1, [pc, #24]	; (80008d0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80008c2:	4313      	orrs	r3, r2
 80008c4:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	50004600 	.word	0x50004600

080008d4 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008dc:	4906      	ldr	r1, [pc, #24]	; (80008f8 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008e0:	6a1b      	ldr	r3, [r3, #32]
 80008e2:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008ea:	4313      	orrs	r3, r2
 80008ec:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	50004600 	.word	0x50004600

080008fc <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000904:	4906      	ldr	r1, [pc, #24]	; (8000920 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000908:	691b      	ldr	r3, [r3, #16]
 800090a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000912:	4313      	orrs	r3, r2
 8000914:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	50004600 	.word	0x50004600

08000924 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800092c:	4906      	ldr	r1, [pc, #24]	; (8000948 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800093a:	4313      	orrs	r3, r2
 800093c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	50004600 	.word	0x50004600

0800094c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000954:	4906      	ldr	r1, [pc, #24]	; (8000970 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000962:	4313      	orrs	r3, r2
 8000964:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	50004600 	.word	0x50004600

08000974 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800097c:	4906      	ldr	r1, [pc, #24]	; (8000998 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800098a:	4313      	orrs	r3, r2
 800098c:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	50004600 	.word	0x50004600

0800099c <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80009a4:	4906      	ldr	r1, [pc, #24]	; (80009c0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80009a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80009b2:	4313      	orrs	r3, r2
 80009b4:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	50004600 	.word	0x50004600

080009c4 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009ce:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009da:	4a16      	ldr	r2, [pc, #88]	; (8000a34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009e6:	4913      	ldr	r1, [pc, #76]	; (8000a34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009f4:	4313      	orrs	r3, r2
 80009f6:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a02:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a04:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	f023 0310 	bic.w	r3, r3, #16
 8000a0e:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a10:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a1a:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a1c:	bf00      	nop
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f9      	beq.n	8000a1e <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	50004710 	.word	0x50004710

08000a38 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a4c:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d10e      	bne.n	8000a72 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a54:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a5e:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a60:	2064      	movs	r0, #100	; 0x64
 8000a62:	f7ff fdad 	bl	80005c0 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a66:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a70:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a72:	2064      	movs	r0, #100	; 0x64
 8000a74:	f7ff fda4 	bl	80005c0 <XMC_SCU_lDelay>
}
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	50004710 	.word	0x50004710

08000a84 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d109      	bne.n	8000aa8 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a9a:	bf00      	nop
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0f9      	beq.n	8000a9c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00a      	beq.n	8000aca <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aba:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000abc:	bf00      	nop
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1f9      	bne.n	8000abe <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	50004200 	.word	0x50004200
 8000ad8:	50004400 	.word	0x50004400

08000adc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	bf0c      	ite	eq
 8000aec:	2301      	moveq	r3, #1
 8000aee:	2300      	movne	r3, #0
 8000af0:	b2db      	uxtb	r3, r3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	50004300 	.word	0x50004300

08000b00 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000b04:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000b08:	f7ff fd88 	bl	800061c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000b0c:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b16:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000b18:	bf00      	nop
 8000b1a:	f7ff fd73 	bl	8000604 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d0f8      	beq.n	8000b1a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000b28:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b2c:	f7ff fd76 	bl	800061c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b32:	2208      	movs	r2, #8
 8000b34:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000b36:	bf00      	nop
 8000b38:	f7ff fd64 	bl	8000604 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f8      	beq.n	8000b38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000b46:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000b4a:	f7ff fd67 	bl	800061c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000b4e:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000b5a:	bf00      	nop
 8000b5c:	f7ff fd52 	bl	8000604 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f8      	beq.n	8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	50004300 	.word	0x50004300

08000b70 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b70:	b5b0      	push	{r4, r5, r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000b74:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b7e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b80:	4d0d      	ldr	r5, [pc, #52]	; (8000bb8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b8a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b8e:	f001 f8d9 	bl	8001d44 <OSCHP_GetFrequency>
 8000b92:	4602      	mov	r2, r0
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000b96:	fba3 2302 	umull	r2, r3, r3, r2
 8000b9a:	0d1b      	lsrs	r3, r3, #20
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ba0:	4323      	orrs	r3, r4
 8000ba2:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000ba4:	4a03      	ldr	r2, [pc, #12]	; (8000bb4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ba6:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000bae:	6053      	str	r3, [r2, #4]
}
 8000bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	50004710 	.word	0x50004710
 8000bb8:	50004700 	.word	0x50004700
 8000bbc:	6b5fca6b 	.word	0x6b5fca6b

08000bc0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000bcc:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2301      	moveq	r3, #1
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	50004710 	.word	0x50004710

08000be8 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf6:	f023 0302 	bic.w	r3, r3, #2
 8000bfa:	6053      	str	r3, [r2, #4]
}
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	50004710 	.word	0x50004710

08000c08 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c0c:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	6053      	str	r3, [r2, #4]
}
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	50004710 	.word	0x50004710

08000c28 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60ba      	str	r2, [r7, #8]
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	4603      	mov	r3, r0
 8000c34:	81fb      	strh	r3, [r7, #14]
 8000c36:	460b      	mov	r3, r1
 8000c38:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fdd9 	bl	80007f4 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000c42:	7b7b      	ldrb	r3, [r7, #13]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	f040 8084 	bne.w	8000d52 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000c4a:	89fb      	ldrh	r3, [r7, #14]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d109      	bne.n	8000c64 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000c50:	f001 f878 	bl	8001d44 <OSCHP_GetFrequency>
 8000c54:	4602      	mov	r2, r0
 8000c56:	4b4b      	ldr	r3, [pc, #300]	; (8000d84 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000c58:	fba3 2302 	umull	r2, r3, r3, r2
 8000c5c:	0c9b      	lsrs	r3, r3, #18
 8000c5e:	059b      	lsls	r3, r3, #22
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e002      	b.n	8000c6a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000c64:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000c68:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	fb02 f203 	mul.w	r2, r2, r3
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c78:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	4a42      	ldr	r2, [pc, #264]	; (8000d88 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c82:	091b      	lsrs	r3, r3, #4
 8000c84:	0d9b      	lsrs	r3, r3, #22
 8000c86:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c88:	4a40      	ldr	r2, [pc, #256]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c8a:	4b40      	ldr	r3, [pc, #256]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c94:	4a3d      	ldr	r2, [pc, #244]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c96:	4b3d      	ldr	r3, [pc, #244]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000ca0:	493a      	ldr	r1, [pc, #232]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca2:	4b3a      	ldr	r3, [pc, #232]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000ca8:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	3a01      	subs	r2, #1
 8000cae:	0212      	lsls	r2, r2, #8
 8000cb0:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000cb8:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000cc4:	4a31      	ldr	r2, [pc, #196]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc6:	4b31      	ldr	r3, [pc, #196]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cce:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000cd0:	4a2e      	ldr	r2, [pc, #184]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f023 0310 	bic.w	r3, r3, #16
 8000cda:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000cdc:	4a2b      	ldr	r2, [pc, #172]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cde:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000ce8:	bf00      	nop
 8000cea:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0f9      	beq.n	8000cea <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cf6:	4a25      	ldr	r2, [pc, #148]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cf8:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f023 0301 	bic.w	r3, r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000d02:	bf00      	nop
 8000d04:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f9      	bne.n	8000d04 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000d14:	fba2 2303 	umull	r2, r3, r2, r3
 8000d18:	095b      	lsrs	r3, r3, #5
 8000d1a:	0d9b      	lsrs	r3, r3, #22
 8000d1c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d1e:	6a3a      	ldr	r2, [r7, #32]
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d202      	bcs.n	8000d2c <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d26:	6938      	ldr	r0, [r7, #16]
 8000d28:	f000 f838 	bl	8000d9c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	085b      	lsrs	r3, r3, #1
 8000d30:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	0d9b      	lsrs	r3, r3, #22
 8000d3a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d3c:	6a3a      	ldr	r2, [r7, #32]
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d202      	bcs.n	8000d4a <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d44:	6938      	ldr	r0, [r7, #16]
 8000d46:	f000 f829 	bl	8000d9c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000d4a:	6a38      	ldr	r0, [r7, #32]
 8000d4c:	f000 f826 	bl	8000d9c <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000d50:	e015      	b.n	8000d7e <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d52:	490e      	ldr	r1, [pc, #56]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d60:	4313      	orrs	r3, r2
 8000d62:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d64:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d70:	bf00      	nop
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d0f9      	beq.n	8000d72 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	431bde83 	.word	0x431bde83
 8000d88:	aaaaaaab 	.word	0xaaaaaaab
 8000d8c:	50004710 	.word	0x50004710
 8000d90:	f08080ff 	.word	0xf08080ff
 8000d94:	88888889 	.word	0x88888889
 8000d98:	b60b60b7 	.word	0xb60b60b7

08000d9c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000db4:	4313      	orrs	r3, r2
 8000db6:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000db8:	2032      	movs	r0, #50	; 0x32
 8000dba:	f7ff fc01 	bl	80005c0 <XMC_SCU_lDelay>
}
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	50004710 	.word	0x50004710

08000dc8 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	bf0c      	ite	eq
 8000dde:	2301      	moveq	r3, #1
 8000de0:	2300      	movne	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	4608      	mov	r0, r1
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4603      	mov	r3, r0
 8000e00:	70fb      	strb	r3, [r7, #3]
 8000e02:	460b      	mov	r3, r1
 8000e04:	70bb      	strb	r3, [r7, #2]
 8000e06:	4613      	mov	r3, r2
 8000e08:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000e0a:	78fa      	ldrb	r2, [r7, #3]
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000e0c:	78bb      	ldrb	r3, [r7, #2]
 8000e0e:	041b      	lsls	r3, r3, #16
 8000e10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000e14:	431a      	orrs	r2, r3
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8000e16:	787b      	ldrb	r3, [r7, #1]
 8000e18:	061b      	lsls	r3, r3, #24
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000e1a:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
                                          const XMC_CAN_PANCMD_t pancmd,
                                      const uint8_t arg1,
                                      const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
            (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	601a      	str	r2, [r3, #0]
}
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	bf38      	it	cc
 8000e7e:	4613      	movcc	r3, r2
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	bf28      	it	cs
 8000e9e:	4613      	movcs	r3, r2
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
                                               const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	6852      	ldr	r2, [r2, #4]
 8000ebe:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ec2:	fb02 f201 	mul.w	r2, r2, r1
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f040 808b 	bne.w	8000fe4 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x138>
  {
  uint32_t prescaler;
  uint32_t div8 = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]

  /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8000ee0:	2319      	movs	r3, #25
 8000ee2:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000eec:	e048      	b.n	8000f80 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ef6:	6979      	ldr	r1, [r7, #20]
 8000ef8:	fb01 f202 	mul.w	r2, r1, r2
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d13b      	bne.n	8000f7a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
      {
    	div8 = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d031      	beq.n	8000f7a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f1c:	d82d      	bhi.n	8000f7a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
        {
          if (prescaler >= 64)
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	2b3f      	cmp	r3, #63	; 0x3f
 8000f22:	d907      	bls.n	8000f34 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x88>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d000      	beq.n	8000f30 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x84>
            {
              continue;
 8000f2e:	e027      	b.n	8000f80 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd4>
            }
            else
            {
              div8 = 1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	8912      	ldrh	r2, [r2, #8]
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x144>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	0b5b      	lsrs	r3, r3, #13
 8000f48:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	3b01      	subs	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d90f      	bls.n	8000f7a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80c      	bhi.n	8000f7a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d909      	bls.n	8000f7a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
        		  (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2b06      	cmp	r3, #6
 8000f6a:	d806      	bhi.n	8000f7a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	895b      	ldrh	r3, [r3, #10]
 8000f70:	461a      	mov	r2, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d800      	bhi.n	8000f7a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xce>
          {
            break;
 8000f78:	e005      	b.n	8000f86 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xda>
          }


        }
      }
      --ntq;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	2b07      	cmp	r3, #7
 8000f84:	d8b3      	bhi.n	8000eee <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x42>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	d92b      	bls.n	8000fe4 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x138>
    {


      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff4d 	bl	8000e2c <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	031b      	lsls	r3, r3, #12
 8000f98:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	895b      	ldrh	r3, [r3, #10]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	019b      	lsls	r3, r3, #6
 8000fa4:	b2db      	uxtb	r3, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000fa6:	431a      	orrs	r2, r3
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8000fb2:	ea42 0103 	orr.w	r1, r2, r3
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	40d3      	lsrs	r3, r2
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8000fca:	ea41 0203 	orr.w	r2, r1, r3
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	03db      	lsls	r3, r3, #15
 8000fd2:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8000fd4:	431a      	orrs	r2, r3


      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	611a      	str	r2, [r3, #16]
                        (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                        (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                        ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                        ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ff36 	bl	8000e4c <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e000      	b.n	8000fe6 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x13a>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 8000fe4:	2301      	movs	r3, #1
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3720      	adds	r7, #32
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	d1b71759 	.word	0xd1b71759

08000ff4 <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
 8001000:	4613      	mov	r3, r2
 8001002:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 8001004:	bf00      	nop
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fede 	bl	8000dc8 <XMC_CAN_IsPanelControlReady>
 800100c:	4603      	mov	r3, r0
 800100e:	f083 0301 	eor.w	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f6      	bne.n	8001006 <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	3301      	adds	r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	78ba      	ldrb	r2, [r7, #2]
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	2102      	movs	r1, #2
 8001024:	f7ff fee4 	bl	8000df0 <XMC_CAN_PanelControl>
}
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop

08001030 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <XMC_CAN_Enable+0x30>)
 800103a:	f7ff fb73 	bl	8000724 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f023 0201 	bic.w	r2, r3, #1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 800104a:	bf00      	nop
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f9      	bne.n	800104c <XMC_CAN_Enable+0x1c>
  {
    /*Do nothing*/
  };
}
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	10000010 	.word	0x10000010

08001064 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <XMC_CAN_GetBaudrateClockFrequency>:
  return XMC_CAN_CANCLKSRC_FPERI;
#endif    
}

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
      frequency = 0;
      break;
  }
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001084:	f7ff fb6a 	bl	800075c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001088:	60f8      	str	r0, [r7, #12]
#endif  

  return frequency;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	460b      	mov	r3, r1
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f7ff ffea 	bl	800107c <XMC_CAN_GetBaudrateClockFrequency>
 80010a8:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f7ff ffc0 	bl	8001030 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 80010b0:	7afb      	ldrb	r3, [r7, #11]
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	4619      	mov	r1, r3
 80010b6:	f7ff ffd5 	bl	8001064 <XMC_CAN_SetBaudrateClockSource>

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80010c6:	2000      	movs	r0, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	f7ff fecf 	bl	8000e6c <max>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80010d6:	f7ff fed9 	bl	8000e8c <min>
 80010da:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80010e2:	69fa      	ldr	r2, [r7, #28]
 80010e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e8:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80010f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	60da      	str	r2, [r3, #12]

  return freq_n;
 800110a:	697b      	ldr	r3, [r7, #20]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t reg;
  
  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 8001124:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8001128:	095b      	lsrs	r3, r3, #5
 800112a:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	035a      	lsls	r2, r3, #13
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f003 031f 	and.w	r3, r3, #31
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	6892      	ldr	r2, [r2, #8]
 8001148:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800114c:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6812      	ldr	r2, [r2, #0]
 8001156:	6891      	ldr	r1, [r2, #8]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	430a      	orrs	r2, r1
 800115c:	609a      	str	r2, [r3, #8]
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	79db      	ldrb	r3, [r3, #7]
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d007      	beq.n	800117c <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	79db      	ldrb	r3, [r3, #7]
 8001170:	f003 0320 	and.w	r3, r3, #32
 8001174:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8001176:	2b00      	cmp	r3, #0
 8001178:	d100      	bne.n	800117c <XMC_CAN_MO_Config+0x68>
 800117a:	e060      	b.n	800123e <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8001180:	2b00      	cmp	r3, #0
 8001182:	d004      	beq.n	800118e <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;
  
  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8001188:	2b01      	cmp	r3, #1
 800118a:	d000      	beq.n	800118e <XMC_CAN_MO_Config+0x7a>
 800118c:	e057      	b.n	800123e <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2220      	movs	r2, #32
 8001194:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	79db      	ldrb	r3, [r3, #7]
 800119a:	f003 0320 	and.w	r3, r3, #32
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d128      	bne.n	80011f6 <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011b0:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80011ba:	049b      	lsls	r3, r3, #18
 80011bc:	461a      	mov	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80011d8:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80011e2:	049b      	lsls	r3, r3, #18
 80011e4:	461a      	mov	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	e009      	b.n	800120a <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6852      	ldr	r2, [r2, #4]
 80011fe:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6892      	ldr	r2, [r2, #8]
 8001208:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7e1b      	ldrb	r3, [r3, #24]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d10c      	bne.n	800122c <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f81a 	bl	800124c <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001220:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a07      	ldr	r2, [pc, #28]	; (8001244 <XMC_CAN_MO_Config+0x130>)
 8001228:	61da      	str	r2, [r3, #28]
 800122a:	e008      	b.n	800123e <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001234:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a03      	ldr	r2, [pc, #12]	; (8001248 <XMC_CAN_MO_Config+0x134>)
 800123c:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	062000c0 	.word	0x062000c0
 8001248:	00a00640 	.word	0x00a00640

0800124c <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8001254:	2303      	movs	r3, #3
 8001256:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7e1b      	ldrb	r3, [r3, #24]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d122      	bne.n	80012a6 <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2220      	movs	r2, #32
 8001266:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	7b12      	ldrb	r2, [r2, #12]
 800127a:	0612      	lsls	r2, r2, #24
 800127c:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6912      	ldr	r2, [r2, #16]
 800128c:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6952      	ldr	r2, [r2, #20]
 8001296:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOCTR_RESRTSEL_Msk);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <XMC_CAN_MO_UpdateData+0x6c>)
 800129e:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e001      	b.n	80012aa <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80012a6:	2303      	movs	r3, #3
 80012a8:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	00280040 	.word	0x00280040

080012bc <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 80012ea:	2304      	movs	r3, #4
 80012ec:	75fb      	strb	r3, [r7, #23]
 80012ee:	e00c      	b.n	800130a <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d102      	bne.n	80012fc <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 80012f6:	2302      	movs	r3, #2
 80012f8:	75fb      	strb	r3, [r7, #23]
 80012fa:	e006      	b.n	800130a <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001304:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 8001306:	2300      	movs	r3, #0
 8001308:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800130a:	7dfb      	ldrb	r3, [r7, #23]
}
 800130c:	4618      	mov	r0, r3
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001336:	0adb      	lsrs	r3, r3, #11
 8001338:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800134e:	2303      	movs	r3, #3
 8001350:	75fb      	strb	r3, [r7, #23]
 8001352:	e0a7      	b.n	80014a4 <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d102      	bne.n	8001360 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 800135a:	2302      	movs	r3, #2
 800135c:	75fb      	strb	r3, [r7, #23]
 800135e:	e0a1      	b.n	80014a4 <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2208      	movs	r2, #8
 8001366:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001372:	0f5b      	lsrs	r3, r3, #29
 8001374:	2b00      	cmp	r3, #0
 8001376:	d140      	bne.n	80013fa <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	79d3      	ldrb	r3, [r2, #7]
 800137c:	f36f 1345 	bfc	r3, #5, #1
 8001380:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	699a      	ldr	r2, [r3, #24]
 8001388:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <XMC_CAN_MO_Receive+0x19c>)
 800138a:	4013      	ands	r3, r2
 800138c:	0c9b      	lsrs	r3, r3, #18
 800138e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6853      	ldr	r3, [r2, #4]
 8001396:	f361 031c 	bfi	r3, r1, #0, #29
 800139a:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013a6:	0f5b      	lsrs	r3, r3, #29
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	b2d9      	uxtb	r1, r3
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	7ad3      	ldrb	r3, [r2, #11]
 80013b4:	f361 1345 	bfi	r3, r1, #5, #1
 80013b8:	72d3      	strb	r3, [r2, #11]
        if(can_mo->can_ide_mask == 1U)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7adb      	ldrb	r3, [r3, #11]
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00d      	beq.n	80013e4 <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <XMC_CAN_MO_Receive+0x19c>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	0c9b      	lsrs	r3, r3, #18
 80013d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6893      	ldr	r3, [r2, #8]
 80013dc:	f361 031c 	bfi	r3, r1, #0, #29
 80013e0:	6093      	str	r3, [r2, #8]
 80013e2:	e032      	b.n	800144a <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6893      	ldr	r3, [r2, #8]
 80013f2:	f361 031c 	bfi	r3, r1, #0, #29
 80013f6:	6093      	str	r3, [r2, #8]
 80013f8:	e027      	b.n	800144a <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	79d3      	ldrb	r3, [r2, #7]
 80013fe:	f043 0320 	orr.w	r3, r3, #32
 8001402:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6853      	ldr	r3, [r2, #4]
 8001412:	f361 031c 	bfi	r3, r1, #0, #29
 8001416:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6893      	ldr	r3, [r2, #8]
 8001426:	f361 031c 	bfi	r3, r1, #0, #29
 800142a:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001436:	0f5b      	lsrs	r3, r3, #29
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	b2d9      	uxtb	r1, r3
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	7ad3      	ldrb	r3, [r2, #11]
 8001444:	f361 1345 	bfi	r3, r1, #5, #1
 8001448:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001454:	0e1b      	lsrs	r3, r3, #24
 8001456:	b2da      	uxtb	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	691a      	ldr	r2, [r3, #16]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	757b      	strb	r3, [r7, #21]
    } while ((rx_pnd != 0U) && (new_data != 0U));
 800148c:	7dbb      	ldrb	r3, [r7, #22]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <XMC_CAN_MO_Receive+0x182>
 8001492:	7d7b      	ldrb	r3, [r7, #21]
 8001494:	2b00      	cmp	r3, #0
 8001496:	f47f af63 	bne.w	8001360 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 80014a0:	2300      	movs	r3, #0
 80014a2:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	371c      	adds	r7, #28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	1ffc0000 	.word	0x1ffc0000

080014b8 <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  if(event != XMC_CAN_NODE_EVENT_CFCIE)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014c8:	d006      	beq.n	80014d8 <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	e005      	b.n	80014e4 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699a      	ldr	r2, [r3, #24]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
}
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <_init>:
  }
}

/* Init */
void _init(void)
{}
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001508:	0a1b      	lsrs	r3, r3, #8
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	490d      	ldr	r1, [pc, #52]	; (8001564 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	4909      	ldr	r1, [pc, #36]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
  }
}
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b06      	cmp	r3, #6
 8001588:	bf28      	it	cs
 800158a:	2306      	movcs	r3, #6
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3306      	adds	r3, #6
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b01      	subs	r3, #1
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2201      	movs	r2, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	1e5a      	subs	r2, r3, #1
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	401a      	ands	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	1e59      	subs	r1, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80015c0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	f04f 30ff 	mov.w	r0, #4294967295
 80015f2:	213f      	movs	r1, #63	; 0x3f
 80015f4:	f7ff ff90 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8001614:	b490      	push	{r4, r7}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8001620:	496b      	ldr	r1, [pc, #428]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	3318      	adds	r3, #24
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8001634:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <SYSTIMER_lInsertTimerList+0x1c0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d109      	bne.n	8001650 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4a62      	ldr	r2, [pc, #392]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001648:	4413      	add	r3, r2
 800164a:	4a62      	ldr	r2, [pc, #392]	; (80017d4 <SYSTIMER_lInsertTimerList+0x1c0>)
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e0bb      	b.n	80017c8 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8001650:	4b60      	ldr	r3, [pc, #384]	; (80017d4 <SYSTIMER_lInsertTimerList+0x1c0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 800165a:	e0ab      	b.n	80017b4 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	461a      	mov	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	2b00      	cmp	r3, #0
 800166c:	dc7a      	bgt.n	8001764 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d026      	beq.n	80016c4 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	6859      	ldr	r1, [r3, #4]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001686:	4413      	add	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	6859      	ldr	r1, [r3, #4]
 800168e:	4850      	ldr	r0, [pc, #320]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4403      	add	r3, r0
 800169c:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 800169e:	494c      	ldr	r1, [pc, #304]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4a45      	ldr	r2, [pc, #276]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80016bc:	441a      	add	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	e01c      	b.n	80016fe <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 80016c4:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <SYSTIMER_lInsertTimerList+0x1c0>)
 80016c6:	6819      	ldr	r1, [r3, #0]
 80016c8:	4841      	ldr	r0, [pc, #260]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4403      	add	r3, r0
 80016d6:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 80016d8:	4b3e      	ldr	r3, [pc, #248]	; (80017d4 <SYSTIMER_lInsertTimerList+0x1c0>)
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4a3a      	ldr	r2, [pc, #232]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80016e8:	4413      	add	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4a36      	ldr	r2, [pc, #216]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80016f8:	4413      	add	r3, r2
 80016fa:	4a36      	ldr	r2, [pc, #216]	; (80017d4 <SYSTIMER_lInsertTimerList+0x1c0>)
 80016fc:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 80016fe:	4934      	ldr	r1, [pc, #208]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699a      	ldr	r2, [r3, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	18d1      	adds	r1, r2, r3
 8001714:	482e      	ldr	r0, [pc, #184]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4403      	add	r3, r0
 8001722:	3318      	adds	r3, #24
 8001724:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8001726:	492a      	ldr	r1, [pc, #168]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	440b      	add	r3, r1
 8001734:	6819      	ldr	r1, [r3, #0]
 8001736:	4826      	ldr	r0, [pc, #152]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4403      	add	r3, r0
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6998      	ldr	r0, [r3, #24]
 8001748:	4c21      	ldr	r4, [pc, #132]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4423      	add	r3, r4
 8001756:	3318      	adds	r3, #24
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	1ac3      	subs	r3, r0, r3
 800175c:	618b      	str	r3, [r1, #24]
        found_flag = true;
 800175e:	2301      	movs	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	e024      	b.n	80017ae <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	2b00      	cmp	r3, #0
 8001768:	dd21      	ble.n	80017ae <SYSTIMER_lInsertTimerList+0x19a>
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d11d      	bne.n	80017ae <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8001772:	4917      	ldr	r1, [pc, #92]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4413      	add	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001790:	441a      	add	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8001796:	6939      	ldr	r1, [r7, #16]
 8001798:	480d      	ldr	r0, [pc, #52]	; (80017d0 <SYSTIMER_lInsertTimerList+0x1bc>)
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4403      	add	r3, r0
 80017a6:	3318      	adds	r3, #24
 80017a8:	6019      	str	r1, [r3, #0]
          found_flag = true;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <SYSTIMER_lInsertTimerList+0x1b4>
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	f083 0301 	eor.w	r3, r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f47f af4a 	bne.w	800165c <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc90      	pop	{r4, r7}
 80017ce:	4770      	bx	lr
 80017d0:	20000498 	.word	0x20000498
 80017d4:	20000070 	.word	0x20000070

080017d8 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4413      	add	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4a29      	ldr	r2, [pc, #164]	; (8001890 <SYSTIMER_lRemoveTimerList+0xb8>)
 80017ec:	4413      	add	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d107      	bne.n	8001808 <SYSTIMER_lRemoveTimerList+0x30>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d103      	bne.n	8001808 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	e03d      	b.n	8001884 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d114      	bne.n	800183a <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1f      	ldr	r2, [pc, #124]	; (8001894 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001816:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <SYSTIMER_lRemoveTimerList+0xbc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1b      	ldr	r2, [pc, #108]	; (8001894 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	6991      	ldr	r1, [r2, #24]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	6992      	ldr	r2, [r2, #24]
 800182e:	440a      	add	r2, r1
 8001830:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e024      	b.n	8001884 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d107      	bne.n	8001852 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	e018      	b.n	8001884 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	6852      	ldr	r2, [r2, #4]
 8001864:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	6991      	ldr	r1, [r2, #24]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	6992      	ldr	r2, [r2, #24]
 8001874:	440a      	add	r2, r1
 8001876:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
  }
}
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000498 	.word	0x20000498
 8001894:	20000070 	.word	0x20000070

08001898 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 800189e:	4b2f      	ldr	r3, [pc, #188]	; (800195c <SYSTIMER_lTimerHandler+0xc4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 80018a4:	e050      	b.n	8001948 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff8f 	bl	80017d8 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	461a      	mov	r2, r3
 80018c6:	2301      	movs	r3, #1
 80018c8:	4093      	lsls	r3, r2
 80018ca:	43da      	mvns	r2, r3
 80018cc:	4b24      	ldr	r3, [pc, #144]	; (8001960 <SYSTIMER_lTimerHandler+0xc8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4013      	ands	r3, r2
 80018d2:	4a23      	ldr	r2, [pc, #140]	; (8001960 <SYSTIMER_lTimerHandler+0xc8>)
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e034      	b.n	8001942 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7b1b      	ldrb	r3, [r3, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d112      	bne.n	8001906 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7b5b      	ldrb	r3, [r3, #13]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d12c      	bne.n	8001942 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff73 	bl	80017d8 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2202      	movs	r2, #2
 80018f6:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6912      	ldr	r2, [r2, #16]
 8001900:	4610      	mov	r0, r2
 8001902:	4798      	blx	r3
 8001904:	e01d      	b.n	8001942 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7b1b      	ldrb	r3, [r3, #12]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d118      	bne.n	8001940 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7b5b      	ldrb	r3, [r3, #13]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d115      	bne.n	8001942 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff5c 	bl	80017d8 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69da      	ldr	r2, [r3, #28]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fe71 	bl	8001614 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6912      	ldr	r2, [r2, #16]
 800193a:	4610      	mov	r0, r2
 800193c:	4798      	blx	r3
 800193e:	e000      	b.n	8001942 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 8001940:	e009      	b.n	8001956 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <SYSTIMER_lTimerHandler+0xc4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <SYSTIMER_lTimerHandler+0xbe>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0a7      	beq.n	80018a6 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000070 	.word	0x20000070
 8001960:	20000074 	.word	0x20000074

08001964 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <SysTick_Handler+0x40>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <SysTick_Handler+0x44>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	3301      	adds	r3, #1
 8001976:	4a0c      	ldr	r2, [pc, #48]	; (80019a8 <SysTick_Handler+0x44>)
 8001978:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00e      	beq.n	800199e <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d905      	bls.n	8001994 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	1e5a      	subs	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	619a      	str	r2, [r3, #24]
 8001992:	e004      	b.n	800199e <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 800199a:	f7ff ff7d 	bl	8001898 <SYSTIMER_lTimerHandler>
    }
  }
}
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000070 	.word	0x20000070
 80019a8:	20000078 	.word	0x20000078

080019ac <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 80019b4:	2300      	movs	r3, #0
 80019b6:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	f083 0301 	eor.w	r3, r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d020      	beq.n	8001a08 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <SYSTIMER_Init+0x68>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 80019cc:	4812      	ldr	r0, [pc, #72]	; (8001a18 <SYSTIMER_Init+0x6c>)
 80019ce:	f7ff fdff 	bl	80015d0 <SysTick_Config>
 80019d2:	4603      	mov	r3, r0
 80019d4:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d015      	beq.n	8001a08 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 80019dc:	f7ff fd8e 	bl	80014fc <__NVIC_GetPriorityGrouping>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4618      	mov	r0, r3
 80019e4:	213f      	movs	r1, #63	; 0x3f
 80019e6:	2200      	movs	r2, #0
 80019e8:	f7ff fdc0 	bl	800156c <NVIC_EncodePriority>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f04f 30ff 	mov.w	r0, #4294967295
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff fd90 	bl	8001518 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <SYSTIMER_Init+0x70>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000070 	.word	0x20000070
 8001a18:	0001d4c0 	.word	0x0001d4c0
 8001a1c:	20000074 	.word	0x20000074

08001a20 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a42:	d202      	bcs.n	8001a4a <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
 8001a48:	e07b      	b.n	8001b42 <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	e075      	b.n	8001b3c <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2201      	movs	r2, #1
 8001a54:	409a      	lsls	r2, r3
 8001a56:	4b3e      	ldr	r3, [pc, #248]	; (8001b50 <SYSTIMER_CreateTimer+0x130>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d16a      	bne.n	8001b36 <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2201      	movs	r2, #1
 8001a64:	409a      	lsls	r2, r3
 8001a66:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <SYSTIMER_CreateTimer+0x130>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	4a38      	ldr	r2, [pc, #224]	; (8001b50 <SYSTIMER_CreateTimer+0x130>)
 8001a6e:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 8001a70:	4938      	ldr	r1, [pc, #224]	; (8001b54 <SYSTIMER_CreateTimer+0x134>)
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4613      	mov	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4413      	add	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3310      	adds	r3, #16
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 8001a84:	4933      	ldr	r1, [pc, #204]	; (8001b54 <SYSTIMER_CreateTimer+0x134>)
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	3308      	adds	r3, #8
 8001a94:	7afa      	ldrb	r2, [r7, #11]
 8001a96:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8001a98:	492e      	ldr	r1, [pc, #184]	; (8001b54 <SYSTIMER_CreateTimer+0x134>)
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4a2a      	ldr	r2, [pc, #168]	; (8001b58 <SYSTIMER_CreateTimer+0x138>)
 8001ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab4:	099b      	lsrs	r3, r3, #6
 8001ab6:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	1c59      	adds	r1, r3, #1
 8001abc:	4825      	ldr	r0, [pc, #148]	; (8001b54 <SYSTIMER_CreateTimer+0x134>)
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4403      	add	r3, r0
 8001aca:	3318      	adds	r3, #24
 8001acc:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 8001ace:	4921      	ldr	r1, [pc, #132]	; (8001b54 <SYSTIMER_CreateTimer+0x134>)
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	3318      	adds	r3, #24
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 8001ae2:	491c      	ldr	r1, [pc, #112]	; (8001b54 <SYSTIMER_CreateTimer+0x134>)
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	3308      	adds	r3, #8
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8001af6:	4917      	ldr	r1, [pc, #92]	; (8001b54 <SYSTIMER_CreateTimer+0x134>)
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	3310      	adds	r3, #16
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 8001b0a:	4912      	ldr	r1, [pc, #72]	; (8001b54 <SYSTIMER_CreateTimer+0x134>)
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	2200      	movs	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 8001b1c:	490d      	ldr	r1, [pc, #52]	; (8001b54 <SYSTIMER_CreateTimer+0x134>)
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4613      	mov	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	3301      	adds	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
        break;
 8001b34:	e005      	b.n	8001b42 <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b07      	cmp	r3, #7
 8001b40:	d986      	bls.n	8001a50 <SYSTIMER_CreateTimer+0x30>
      }
    }

  }

  return (id);
 8001b42:	69fb      	ldr	r3, [r7, #28]
}  
 8001b44:	4618      	mov	r0, r3
 8001b46:	3724      	adds	r7, #36	; 0x24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	20000074 	.word	0x20000074
 8001b54:	20000498 	.word	0x20000498
 8001b58:	10624dd3 	.word	0x10624dd3

08001b5c <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	1e5a      	subs	r2, r3, #1
 8001b6c:	491a      	ldr	r1, [pc, #104]	; (8001bd8 <SYSTIMER_StartTimer+0x7c>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	3308      	adds	r3, #8
 8001b7a:	795b      	ldrb	r3, [r3, #5]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d126      	bne.n	8001bce <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	1e5a      	subs	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	1e59      	subs	r1, r3, #1
 8001b88:	4813      	ldr	r0, [pc, #76]	; (8001bd8 <SYSTIMER_StartTimer+0x7c>)
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	440b      	add	r3, r1
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4403      	add	r3, r0
 8001b94:	3318      	adds	r3, #24
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	1c59      	adds	r1, r3, #1
 8001b9a:	480f      	ldr	r0, [pc, #60]	; (8001bd8 <SYSTIMER_StartTimer+0x7c>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4403      	add	r3, r0
 8001ba6:	3318      	adds	r3, #24
 8001ba8:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	1e5a      	subs	r2, r3, #1
 8001bae:	490a      	ldr	r1, [pc, #40]	; (8001bd8 <SYSTIMER_StartTimer+0x7c>)
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	3308      	adds	r3, #8
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fd25 	bl	8001614 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000498 	.word	0x20000498

08001bdc <SYSTIMER_GetTime>:

/*
 *  API to get the current SysTick time in microsecond.
 */
uint32_t SYSTIMER_GetTime(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return (g_systick_count * SYSTIMER_TICK_PERIOD_US);
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <SYSTIMER_GetTime+0x1c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001be8:	fb02 f303 	mul.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000078 	.word	0x20000078

08001bfc <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7a5b      	ldrb	r3, [r3, #9]
 8001c0c:	f083 0301 	eor.w	r3, r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00d      	beq.n	8001c32 <GLOBAL_CAN_Init+0x36>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4610      	mov	r0, r2
 8001c20:	2101      	movs	r1, #1
 8001c22:	461a      	mov	r2, r3
 8001c24:	f7ff fa36 	bl	8001094 <XMC_CAN_InitEx>
#endif
    handle->init_status = true;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8001c32:	7bfb      	ldrb	r3, [r7, #15]

}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7ff ffd6 	bl	8001c3c <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <SystemCoreSetup+0x94>)
 8001c94:	4a21      	ldr	r2, [pc, #132]	; (8001d1c <SystemCoreSetup+0x98>)
 8001c96:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c98:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001c9c:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <SystemCoreSetup+0x94>)
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <SystemCoreSetup+0x94>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001caa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <SystemCoreSetup+0x9c>)
 8001cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb4:	3314      	adds	r3, #20
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f023 030f 	bic.w	r3, r3, #15
 8001cc0:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f043 0303 	orr.w	r3, r3, #3
 8001cc8:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <SystemCoreSetup+0x9c>)
 8001ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd0:	3314      	adds	r3, #20
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8001cd6:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <SystemCoreSetup+0x94>)
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <SystemCoreSetup+0x94>)
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	f023 0310 	bic.w	r3, r3, #16
 8001ce0:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8001ce2:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <SystemCoreSetup+0x94>)
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <SystemCoreSetup+0x94>)
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	f023 0308 	bic.w	r3, r3, #8
 8001cec:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SystemCoreSetup+0x94>)
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <SystemCoreSetup+0x94>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8001cfa:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <SystemCoreSetup+0x94>)
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <SystemCoreSetup+0x94>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001d04:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8001d06:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <SystemCoreSetup+0x94>)
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <SystemCoreSetup+0x94>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d10:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	e000ed00 	.word	0xe000ed00
 8001d1c:	08000000 	.word	0x08000000
 8001d20:	58001000 	.word	0x58001000

08001d24 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]

  return (status);
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8001d48:	4b02      	ldr	r3, [pc, #8]	; (8001d54 <OSCHP_GetFrequency+0x10>)
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	00b71b00 	.word	0x00b71b00

08001d58 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <SystemCoreClockSetup+0x50>)
 8001d60:	1d3c      	adds	r4, r7, #4
 8001d62:	461d      	mov	r5, r3
 8001d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fc62 	bl	8000638 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7fe fd5d 	bl	8000834 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7fe fd12 	bl	80007a4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8001d80:	2004      	movs	r0, #4
 8001d82:	f7fe fde3 	bl	800094c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8001d86:	2001      	movs	r0, #1
 8001d88:	2120      	movs	r1, #32
 8001d8a:	f7fe fe1b 	bl	80009c4 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f7fe fd1c 	bl	80007cc <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8001d94:	2001      	movs	r0, #1
 8001d96:	f7fe fe01 	bl	800099c <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7fe fdea 	bl	8000974 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bdb0      	pop	{r4, r5, r7, pc}
 8001da6:	bf00      	nop
 8001da8:	08002a5c 	.word	0x08002a5c

08001dac <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
                                          const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
                                          const uint32_t service_request)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	460b      	mov	r3, r1
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	2107      	movs	r1, #7
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	401a      	ands	r2, r3
 8001dca:	7afb      	ldrb	r3, [r7, #11]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	609a      	str	r2, [r3, #8]
}
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop

08001de4 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
                                              const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop

08001e10 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	60da      	str	r2, [r3, #12]
}
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop

08001e30 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	601a      	str	r2, [r3, #0]
}
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop

08001e50 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	601a      	str	r2, [r3, #0]
}
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop

08001e70 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	601a      	str	r2, [r3, #0]
}
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop

08001e90 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 0201 	bic.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	6891      	ldr	r1, [r2, #8]
 8001ec8:	7afa      	ldrb	r2, [r7, #11]
 8001eca:	2007      	movs	r0, #7
 8001ecc:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed0:	43d2      	mvns	r2, r2
 8001ed2:	4011      	ands	r1, r2
                          (service_request << (uint32_t)can_mo_ptr_int);
 8001ed4:	7afa      	ldrb	r2, [r7, #11]
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
                                                const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
                                                const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8001edc:	430a      	orrs	r2, r1
 8001ede:	609a      	str	r2, [r3, #8]
                          (service_request << (uint32_t)can_mo_ptr_int);
}
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop

08001eec <XMC_CAN_MO_GetStatus>:
 * None
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return ((can_mo->can_mo_ptr->MOSTAT));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69db      	ldr	r3, [r3, #28]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop

08001f08 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
                                        const uint32_t event)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	6811      	ldr	r1, [r2, #0]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
}
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <CAN_NODE_MO_EnableTxEvent>:
 *     return (1);
 *  }
 *  @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001f3e:	f7ff ffe3 	bl	8001f08 <XMC_CAN_MO_EnableEvent>
}
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <CAN_NODE_MO_EnableRxEvent>:
 *  }
 *  @endcode
 */

__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001f5a:	f7ff ffd5 	bl	8001f08 <XMC_CAN_MO_EnableEvent>
}
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f831 	bl	8001fd8 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f043 0302 	orr.w	r3, r3, #2
 8001f86:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	68f9      	ldr	r1, [r7, #12]
 8001fb4:	f7ff fa80 	bl	80014b8 <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d006      	beq.n	8001fd0 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001fcc:	f7ff fa74 	bl	80014b8 <XMC_CAN_NODE_EnableEvent>
  }

}
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop

08001fd8 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fea:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8001fec:	4610      	mov	r0, r2
 8001fee:	2100      	movs	r1, #0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f7ff fedb 	bl	8001dac <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002000:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8002002:	4610      	mov	r0, r2
 8002004:	2104      	movs	r1, #4
 8002006:	461a      	mov	r2, r3
 8002008:	f7ff fed0 	bl	8001dac <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002016:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8002018:	4610      	mov	r0, r2
 800201a:	2108      	movs	r1, #8
 800201c:	461a      	mov	r2, r3
 800201e:	f7ff fec5 	bl	8001dac <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800202c:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 800202e:	4610      	mov	r0, r2
 8002030:	210c      	movs	r1, #12
 8002032:	461a      	mov	r2, r3
 8002034:	f7ff feba 	bl	8001dac <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop

08002040 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff f861 	bl	8001114 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	79db      	ldrb	r3, [r3, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	795b      	ldrb	r3, [r3, #5]
 8002062:	4610      	mov	r0, r2
 8002064:	2104      	movs	r1, #4
 8002066:	461a      	mov	r2, r3
 8002068:	f7ff ff22 	bl	8001eb0 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff5d 	bl	8001f2c <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7a1b      	ldrb	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00b      	beq.n	8002092 <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	799b      	ldrb	r3, [r3, #6]
 8002082:	4610      	mov	r0, r2
 8002084:	2100      	movs	r1, #0
 8002086:	461a      	mov	r2, r3
 8002088:	f7ff ff12 	bl	8001eb0 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff5b 	bl	8001f48 <CAN_NODE_MO_EnableRxEvent>
  }

}
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff f907 	bl	80012bc <XMC_CAN_MO_Transmit>
 80020ae:	4603      	mov	r3, r0
 80020b0:	73fb      	strb	r3, [r7, #15]
  return (status);
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff f923 	bl	8001318 <XMC_CAN_MO_Receive>
 80020d2:	4603      	mov	r3, r0
 80020d4:	73fb      	strb	r3, [r7, #15]
  return (status);
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	6852      	ldr	r2, [r2, #4]
 8002104:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff f89e 	bl	800124c <XMC_CAN_MO_UpdateData>
 8002110:	4603      	mov	r3, r0
 8002112:	73fb      	strb	r3, [r7, #15]
  return (status);
 8002114:	7bfb      	ldrb	r3, [r7, #15]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop

08002120 <CAN_NODE_MO_GetStatus>:

/*  Function to reads the status of the CAN Message Object.  */
uint32_t CAN_NODE_MO_GetStatus(const CAN_NODE_LMO_t *lmo_ptr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t status;

  XMC_ASSERT("CAN_NODE_MO_GetStatus: lmo_ptr null", lmo_ptr != NULL);

  status = XMC_CAN_MO_GetStatus(lmo_ptr->mo_ptr);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fedd 	bl	8001eec <XMC_CAN_MO_GetStatus>
 8002132:	60f8      	str	r0, [r7, #12]

  return (status);
 8002134:	68fb      	ldr	r3, [r7, #12]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop

08002140 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8002148:	2300      	movs	r3, #0
 800214a:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fd4f 	bl	8001bfc <GLOBAL_CAN_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 8002162:	7dfb      	ldrb	r3, [r7, #23]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f040 8082 	bne.w	800226e <CAN_NODE_Init+0x12e>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fe99 	bl	8000eac <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d173      	bne.n	8002268 <CAN_NODE_Init+0x128>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fe53 	bl	8001e30 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fe6e 	bl	8001e70 <XMC_CAN_NODE_SetInitBit>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <CAN_NODE_Init+0x6a>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fe34 	bl	8001e10 <XMC_CAN_NODE_EnableLoopBack>
 80021a8:	e018      	b.n	80021dc <CAN_NODE_Init+0x9c>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021b0:	6819      	ldr	r1, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021b8:	791a      	ldrb	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021c0:	4608      	mov	r0, r1
 80021c2:	4611      	mov	r1, r2
 80021c4:	461a      	mov	r2, r3
 80021c6:	f7fe f93d 	bl	8000444 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	f7ff fe04 	bl	8001de4 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fec1 	bl	8001f64 <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	e019      	b.n	800221c <CAN_NODE_Init+0xdc>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	3302      	adds	r3, #2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	791b      	ldrb	r3, [r3, #4]
 8002206:	4608      	mov	r0, r1
 8002208:	4611      	mov	r1, r2
 800220a:	461a      	mov	r2, r3
 800220c:	f7fe fef2 	bl	8000ff4 <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 8002210:	68b8      	ldr	r0, [r7, #8]
 8002212:	f7ff ff15 	bl	8002040 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3301      	adds	r3, #1
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002222:	461a      	mov	r2, r3
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	429a      	cmp	r2, r3
 8002228:	d8de      	bhi.n	80021e8 <CAN_NODE_Init+0xa8>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fe0e 	bl	8001e50 <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fe29 	bl	8001e90 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8002244:	f083 0301 	eor.w	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d011      	beq.n	8002272 <CAN_NODE_Init+0x132>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6819      	ldr	r1, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	791a      	ldrb	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225c:	4608      	mov	r0, r1
 800225e:	4611      	mov	r1, r2
 8002260:	461a      	mov	r2, r3
 8002262:	f7fe f8ef 	bl	8000444 <XMC_GPIO_Init>
 8002266:	e004      	b.n	8002272 <CAN_NODE_Init+0x132>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 8002268:	2301      	movs	r3, #1
 800226a:	75fb      	strb	r3, [r7, #23]
 800226c:	e001      	b.n	8002272 <CAN_NODE_Init+0x132>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 800226e:	2301      	movs	r3, #1
 8002270:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8002272:	7dfb      	ldrb	r3, [r7, #23]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8002282:	2300      	movs	r3, #0
 8002284:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8002286:	480d      	ldr	r0, [pc, #52]	; (80022bc <DAVE_Init+0x40>)
 8002288:	f7ff fd4c 	bl	8001d24 <CLOCK_XMC4_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d104      	bne.n	80022a0 <DAVE_Init+0x24>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
 8002296:	480a      	ldr	r0, [pc, #40]	; (80022c0 <DAVE_Init+0x44>)
 8002298:	f7ff ff52 	bl	8002140 <CAN_NODE_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d104      	bne.n	80022b0 <DAVE_Init+0x34>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
 80022a6:	4807      	ldr	r0, [pc, #28]	; (80022c4 <DAVE_Init+0x48>)
 80022a8:	f7ff fb80 	bl	80019ac <SYSTIMER_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80022b0:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000080 	.word	0x20000080
 80022c0:	08002ab4 	.word	0x08002ab4
 80022c4:	2000007c 	.word	0x2000007c

080022c8 <Ctpl_Init>:
uint32_t Ctpl_CurrentTime;
static bool Cptl_MultiFrameRxOnGoing;

/* global function definitions */
void Ctpl_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
	uint16_t i;
	rxNotif = false;
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <Ctpl_Init+0x5c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
	txNotif = false;
 80022d4:	4b14      	ldr	r3, [pc, #80]	; (8002328 <Ctpl_Init+0x60>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]

	state = CTPL_STATE_NONE;
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <Ctpl_Init+0x64>)
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
	for (i=0; i<sizeof(message); i++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	80fb      	strh	r3, [r7, #6]
 80022e4:	e006      	b.n	80022f4 <Ctpl_Init+0x2c>
	{
		message[i] = 0;
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	4a11      	ldr	r2, [pc, #68]	; (8002330 <Ctpl_Init+0x68>)
 80022ea:	2100      	movs	r1, #0
 80022ec:	54d1      	strb	r1, [r2, r3]
	uint16_t i;
	rxNotif = false;
	txNotif = false;

	state = CTPL_STATE_NONE;
	for (i=0; i<sizeof(message); i++)
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	3301      	adds	r3, #1
 80022f2:	80fb      	strh	r3, [r7, #6]
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	2b07      	cmp	r3, #7
 80022f8:	d9f5      	bls.n	80022e6 <Ctpl_Init+0x1e>
	{
		message[i] = 0;
	}
	PozDataBuffer=0;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <Ctpl_Init+0x6c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	801a      	strh	r2, [r3, #0]

	DataCtpl=Appl_GetDataPointer();
 8002300:	f000 fb32 	bl	8002968 <Appl_GetDataPointer>
 8002304:	4602      	mov	r2, r0
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <Ctpl_Init+0x70>)
 8002308:	601a      	str	r2, [r3, #0]
	SeqNrCnt = 0x21;
 800230a:	4b0c      	ldr	r3, [pc, #48]	; (800233c <Ctpl_Init+0x74>)
 800230c:	2221      	movs	r2, #33	; 0x21
 800230e:	701a      	strb	r2, [r3, #0]
	Ctpl_LastFrameTimeOut=0;
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <Ctpl_Init+0x78>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
	Cptl_MultiFrameRxOnGoing =false;
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <Ctpl_Init+0x7c>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]

}
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000084 	.word	0x20000084
 8002328:	20000085 	.word	0x20000085
 800232c:	200005cc 	.word	0x200005cc
 8002330:	200005c4 	.word	0x200005c4
 8002334:	200005b8 	.word	0x200005b8
 8002338:	200005d8 	.word	0x200005d8
 800233c:	200005d0 	.word	0x200005d0
 8002340:	200005d4 	.word	0x200005d4
 8002344:	20000086 	.word	0x20000086

08002348 <Ctpl_RxNotification>:

//data has been received
void Ctpl_RxNotification(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
	rxNotif=true;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <Ctpl_RxNotification+0x14>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
}
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000084 	.word	0x20000084

08002360 <Ctpl_TxNotification>:

//data has been send succesfuly
void Ctpl_TxNotification(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
	txNotif=true;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <Ctpl_TxNotification+0x14>)
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
}
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000085 	.word	0x20000085

08002378 <Ctpl_MainFunction>:

void Ctpl_MainFunction(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	 Ctpl_CurrentTime = SYSTIMER_GetTime();
 800237c:	f7ff fc2e 	bl	8001bdc <SYSTIMER_GetTime>
 8002380:	4602      	mov	r2, r0
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <Ctpl_MainFunction+0x34>)
 8002384:	601a      	str	r2, [r3, #0]

	 if(rxNotif==true){
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <Ctpl_MainFunction+0x38>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <Ctpl_MainFunction+0x2c>
		 Ctpl_GetRxData();   // am copiat date date din can in cptl
 800238e:	f000 f8d7 	bl	8002540 <Ctpl_GetRxData>
		 if(message[0] < (0x10))
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <Ctpl_MainFunction+0x3c>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b0f      	cmp	r3, #15
 8002398:	d802      	bhi.n	80023a0 <Ctpl_MainFunction+0x28>
		 {
			 Ctpl_SingleFrameHandler();
 800239a:	f000 f845 	bl	8002428 <Ctpl_SingleFrameHandler>
 800239e:	e001      	b.n	80023a4 <Ctpl_MainFunction+0x2c>
		 }
		 else
		 {
			Ctpl_MultiframeHandler();
 80023a0:	f000 f866 	bl	8002470 <Ctpl_MultiframeHandler>
		 }
	 }

	 rxNotif=false;
 80023a4:	4b02      	ldr	r3, [pc, #8]	; (80023b0 <Ctpl_MainFunction+0x38>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
//		 //eror CF transmit
//		Appl_ErrorNotification();
//
//	 }

}
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	200005bc 	.word	0x200005bc
 80023b0:	20000084 	.word	0x20000084
 80023b4:	200005c4 	.word	0x200005c4

080023b8 <Ctpl_SendData>:


//Function is called by the Application to send data, SF, or MF over CAN
void Ctpl_SendData(uint8_t* buffer, uint16_t LengthOfFF)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]

	uint8_t i;
	uint8_t dat[8]={ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80023c4:	2300      	movs	r3, #0
 80023c6:	733b      	strb	r3, [r7, #12]
 80023c8:	2300      	movs	r3, #0
 80023ca:	737b      	strb	r3, [r7, #13]
 80023cc:	2300      	movs	r3, #0
 80023ce:	73bb      	strb	r3, [r7, #14]
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	2300      	movs	r3, #0
 80023d6:	743b      	strb	r3, [r7, #16]
 80023d8:	2300      	movs	r3, #0
 80023da:	747b      	strb	r3, [r7, #17]
 80023dc:	2300      	movs	r3, #0
 80023de:	74bb      	strb	r3, [r7, #18]
 80023e0:	2300      	movs	r3, #0
 80023e2:	74fb      	strb	r3, [r7, #19]


	dat[0]=LengthOfFF;
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	733b      	strb	r3, [r7, #12]


	for(i=0;i<4;i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	75fb      	strb	r3, [r7, #23]
 80023ee:	e00d      	b.n	800240c <Ctpl_SendData+0x54>
	{
		dat[i+1]= buffer[i];
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	3301      	adds	r3, #1
 80023f4:	7dfa      	ldrb	r2, [r7, #23]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	440a      	add	r2, r1
 80023fa:	7812      	ldrb	r2, [r2, #0]
 80023fc:	f107 0118 	add.w	r1, r7, #24
 8002400:	440b      	add	r3, r1
 8002402:	f803 2c0c 	strb.w	r2, [r3, #-12]


	dat[0]=LengthOfFF;


	for(i=0;i<4;i++)
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	3301      	adds	r3, #1
 800240a:	75fb      	strb	r3, [r7, #23]
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d9ee      	bls.n	80023f0 <Ctpl_SendData+0x38>
	{
		dat[i+1]= buffer[i];
	}
	Can_SetTxData(&dat[0]);
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f98c 	bl	8002734 <Can_SetTxData>
	Can_Transmit();
 800241c:	f000 f91a 	bl	8002654 <Can_Transmit>

}
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop

08002428 <Ctpl_SingleFrameHandler>:

/* local function definitions */
/* Functia pt SF*/
void Ctpl_SingleFrameHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
	if(message[0]>7)
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <Ctpl_SingleFrameHandler+0x40>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b07      	cmp	r3, #7
 8002434:	d815      	bhi.n	8002462 <Ctpl_SingleFrameHandler+0x3a>
		//handler eroare
	}
	else
	{
		uint8_t i;
		for(i=0;i<message[0];i++)
 8002436:	2300      	movs	r3, #0
 8002438:	71fb      	strb	r3, [r7, #7]
 800243a:	e00b      	b.n	8002454 <Ctpl_SingleFrameHandler+0x2c>
		{
			DataCtpl[i]=message[i+1];
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <Ctpl_SingleFrameHandler+0x44>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	4413      	add	r3, r2
 8002444:	79fa      	ldrb	r2, [r7, #7]
 8002446:	3201      	adds	r2, #1
 8002448:	4907      	ldr	r1, [pc, #28]	; (8002468 <Ctpl_SingleFrameHandler+0x40>)
 800244a:	5c8a      	ldrb	r2, [r1, r2]
 800244c:	701a      	strb	r2, [r3, #0]
		//handler eroare
	}
	else
	{
		uint8_t i;
		for(i=0;i<message[0];i++)
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	3301      	adds	r3, #1
 8002452:	71fb      	strb	r3, [r7, #7]
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <Ctpl_SingleFrameHandler+0x40>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	79fa      	ldrb	r2, [r7, #7]
 800245a:	429a      	cmp	r2, r3
 800245c:	d3ee      	bcc.n	800243c <Ctpl_SingleFrameHandler+0x14>
		{
			DataCtpl[i]=message[i+1];
		}
		Appl_RxNotification();
 800245e:	f000 fab7 	bl	80029d0 <Appl_RxNotification>
	}
}
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200005c4 	.word	0x200005c4
 800246c:	200005d8 	.word	0x200005d8

08002470 <Ctpl_MultiframeHandler>:

/*Functie de MF si de impartire a frame-urilor*/
void Ctpl_MultiframeHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
	static bool isFirstFrame = true;

	if (isFirstFrame)
 8002474:	4b29      	ldr	r3, [pc, #164]	; (800251c <Ctpl_MultiframeHandler+0xac>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d025      	beq.n	80024c8 <Ctpl_MultiframeHandler+0x58>
	{
		LengthOfFF = ((message[0] & (0x000f)) << 8 )| message[1]; //lungimea mesajului
 800247c:	4b28      	ldr	r3, [pc, #160]	; (8002520 <Ctpl_MultiframeHandler+0xb0>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	b29a      	uxth	r2, r3
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <Ctpl_MultiframeHandler+0xb0>)
 800248a:	785b      	ldrb	r3, [r3, #1]
 800248c:	b29b      	uxth	r3, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	b29b      	uxth	r3, r3
 8002492:	b29a      	uxth	r2, r3
 8002494:	4b23      	ldr	r3, [pc, #140]	; (8002524 <Ctpl_MultiframeHandler+0xb4>)
 8002496:	801a      	strh	r2, [r3, #0]
		NumbersOfCF = LengthOfFF/7;  // cate CF sunt
 8002498:	4b22      	ldr	r3, [pc, #136]	; (8002524 <Ctpl_MultiframeHandler+0xb4>)
 800249a:	881a      	ldrh	r2, [r3, #0]
 800249c:	4b22      	ldr	r3, [pc, #136]	; (8002528 <Ctpl_MultiframeHandler+0xb8>)
 800249e:	fba3 1302 	umull	r1, r3, r3, r2
 80024a2:	1ad2      	subs	r2, r2, r3
 80024a4:	0852      	lsrs	r2, r2, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b1f      	ldr	r3, [pc, #124]	; (800252c <Ctpl_MultiframeHandler+0xbc>)
 80024b0:	701a      	strb	r2, [r3, #0]
		if (Ctpl_SendFlowControl() != 0) // verifica daca a fost trimis FC
 80024b2:	f000 f899 	bl	80025e8 <Ctpl_SendFlowControl>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <Ctpl_MultiframeHandler+0x50>
		{
			/* Handle flow control error */
			Appl_ErrorNotification();
 80024bc:	f000 fa78 	bl	80029b0 <Appl_ErrorNotification>
		}
		Cptl_MultiFrameRxOnGoing=true;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <Ctpl_MultiframeHandler+0xc0>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	e015      	b.n	80024f4 <Ctpl_MultiframeHandler+0x84>
	}
	else
	{   /*Verifica daca a trimis in ordine CF*/
		if(SeqNrCnt== message[0])
 80024c8:	4b15      	ldr	r3, [pc, #84]	; (8002520 <Ctpl_MultiframeHandler+0xb0>)
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <Ctpl_MultiframeHandler+0xc4>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d10d      	bne.n	80024f0 <Ctpl_MultiframeHandler+0x80>
		{
			SeqNrCnt++;
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <Ctpl_MultiframeHandler+0xc4>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b15      	ldr	r3, [pc, #84]	; (8002534 <Ctpl_MultiframeHandler+0xc4>)
 80024de:	701a      	strb	r2, [r3, #0]
			if(SeqNrCnt > 0x2f)
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <Ctpl_MultiframeHandler+0xc4>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b2f      	cmp	r3, #47	; 0x2f
 80024e6:	d905      	bls.n	80024f4 <Ctpl_MultiframeHandler+0x84>
			{
				SeqNrCnt=0x20;
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <Ctpl_MultiframeHandler+0xc4>)
 80024ea:	2220      	movs	r2, #32
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	e001      	b.n	80024f4 <Ctpl_MultiframeHandler+0x84>
			}
		}
		else
		{
			Appl_ErrorNotification();
 80024f0:	f000 fa5e 	bl	80029b0 <Appl_ErrorNotification>
		}
	}

	Ctpl_LastFrameTimeOut = Ctpl_CurrentTime;
 80024f4:	4b10      	ldr	r3, [pc, #64]	; (8002538 <Ctpl_MultiframeHandler+0xc8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a10      	ldr	r2, [pc, #64]	; (800253c <Ctpl_MultiframeHandler+0xcc>)
 80024fa:	6013      	str	r3, [r2, #0]


	if(Ctpl_ConsecutiveReading(isFirstFrame)==true)
 80024fc:	4b07      	ldr	r3, [pc, #28]	; (800251c <Ctpl_MultiframeHandler+0xac>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f000 f825 	bl	8002550 <Ctpl_ConsecutiveReading>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <Ctpl_MultiframeHandler+0xa4>
	{
		isFirstFrame=true;
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <Ctpl_MultiframeHandler+0xac>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e002      	b.n	800251a <Ctpl_MultiframeHandler+0xaa>
	}
	else
	{
		isFirstFrame = false;
 8002514:	4b01      	ldr	r3, [pc, #4]	; (800251c <Ctpl_MultiframeHandler+0xac>)
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
	}
}
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000058 	.word	0x20000058
 8002520:	200005c4 	.word	0x200005c4
 8002524:	200005ce 	.word	0x200005ce
 8002528:	24924925 	.word	0x24924925
 800252c:	200005c0 	.word	0x200005c0
 8002530:	20000086 	.word	0x20000086
 8002534:	200005d0 	.word	0x200005d0
 8002538:	200005bc 	.word	0x200005bc
 800253c:	200005d4 	.word	0x200005d4

08002540 <Ctpl_GetRxData>:

/*citeste cate 8 baiti din CAN*/
void Ctpl_GetRxData(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	Can_GetRxData((uint8_t*)&message);
 8002544:	4801      	ldr	r0, [pc, #4]	; (800254c <Ctpl_GetRxData+0xc>)
 8002546:	f000 f915 	bl	8002774 <Can_GetRxData>
}
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200005c4 	.word	0x200005c4

08002550 <Ctpl_ConsecutiveReading>:

/*citim consecutiv frame`urile*/
static bool Ctpl_ConsecutiveReading(bool isFirstFrame)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
	bool endOfMessage = false;
 800255e:	2300      	movs	r3, #0
 8002560:	73bb      	strb	r3, [r7, #14]

	if(isFirstFrame)
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <Ctpl_ConsecutiveReading+0x1c>
	{
		i = 2;
 8002568:	2302      	movs	r3, #2
 800256a:	73fb      	strb	r3, [r7, #15]
	}
	for(i;i<8;i++)
 800256c:	e029      	b.n	80025c2 <Ctpl_ConsecutiveReading+0x72>
	{
		DataCtpl[PozDataBuffer]=message[i];
 800256e:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <Ctpl_ConsecutiveReading+0x84>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a19      	ldr	r2, [pc, #100]	; (80025d8 <Ctpl_ConsecutiveReading+0x88>)
 8002574:	8812      	ldrh	r2, [r2, #0]
 8002576:	4413      	add	r3, r2
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	4918      	ldr	r1, [pc, #96]	; (80025dc <Ctpl_ConsecutiveReading+0x8c>)
 800257c:	5c8a      	ldrb	r2, [r1, r2]
 800257e:	701a      	strb	r2, [r3, #0]
		PozDataBuffer++;
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <Ctpl_ConsecutiveReading+0x88>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	3301      	adds	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <Ctpl_ConsecutiveReading+0x88>)
 800258a:	801a      	strh	r2, [r3, #0]
		if(PozDataBuffer == LengthOfFF)
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <Ctpl_ConsecutiveReading+0x88>)
 800258e:	881a      	ldrh	r2, [r3, #0]
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <Ctpl_ConsecutiveReading+0x90>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d111      	bne.n	80025bc <Ctpl_ConsecutiveReading+0x6c>
		{
			Appl_RecFinishNotification(); // notific aplicatia ca a fost trimis tot mesajul
 8002598:	f000 f9fe 	bl	8002998 <Appl_RecFinishNotification>
			Appl_RecStartNotification(PozDataBuffer); // trimitem lungimea bufferului catre aplicatie
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <Ctpl_ConsecutiveReading+0x88>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 f9eb 	bl	800297c <Appl_RecStartNotification>
			endOfMessage = true;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73bb      	strb	r3, [r7, #14]
			PozDataBuffer = 0;
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <Ctpl_ConsecutiveReading+0x88>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	801a      	strh	r2, [r3, #0]
			Cptl_MultiFrameRxOnGoing=false;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <Ctpl_ConsecutiveReading+0x94>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
			Appl_RxNotification();
 80025b6:	f000 fa0b 	bl	80029d0 <Appl_RxNotification>
			break;
 80025ba:	e005      	b.n	80025c8 <Ctpl_ConsecutiveReading+0x78>

	if(isFirstFrame)
	{
		i = 2;
	}
	for(i;i<8;i++)
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	3301      	adds	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b07      	cmp	r3, #7
 80025c6:	d9d2      	bls.n	800256e <Ctpl_ConsecutiveReading+0x1e>
			Cptl_MultiFrameRxOnGoing=false;
			Appl_RxNotification();
			break;
		}
	}
	return endOfMessage;
 80025c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200005d8 	.word	0x200005d8
 80025d8:	200005b8 	.word	0x200005b8
 80025dc:	200005c4 	.word	0x200005c4
 80025e0:	200005ce 	.word	0x200005ce
 80025e4:	20000086 	.word	0x20000086

080025e8 <Ctpl_SendFlowControl>:

/*Trimitem FC(30.00.00..),ca si o verificare pentru a continua transmisia*/
uint8_t Ctpl_SendFlowControl(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
	uint8_t retVal;
	uint8_t dat[8]={ 0x30, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55};
 80025ee:	4a10      	ldr	r2, [pc, #64]	; (8002630 <Ctpl_SendFlowControl+0x48>)
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	6810      	ldr	r0, [r2, #0]
 80025f4:	6851      	ldr	r1, [r2, #4]
 80025f6:	c303      	stmia	r3!, {r0, r1}
	retVal = Can_SetTxData(dat);
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f89a 	bl	8002734 <Can_SetTxData>
 8002600:	4603      	mov	r3, r0
 8002602:	73fb      	strb	r3, [r7, #15]
	if (0 == retVal)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10c      	bne.n	8002624 <Ctpl_SendFlowControl+0x3c>
	{
		Can_Transmit();
 800260a:	f000 f823 	bl	8002654 <Can_Transmit>
		/* To implement a timeout handler instead of a simple while() */
		while(!txNotif)
 800260e:	e002      	b.n	8002616 <Ctpl_SendFlowControl+0x2e>
		{
			// Do nothing; wait for object transmission success.
			txNotif = false;
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <Ctpl_SendFlowControl+0x4c>)
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
	retVal = Can_SetTxData(dat);
	if (0 == retVal)
	{
		Can_Transmit();
		/* To implement a timeout handler instead of a simple while() */
		while(!txNotif)
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <Ctpl_SendFlowControl+0x4c>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	f083 0301 	eor.w	r3, r3, #1
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f5      	bne.n	8002610 <Ctpl_SendFlowControl+0x28>
		{
			// Do nothing; wait for object transmission success.
			txNotif = false;
		}
	}
	return retVal;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	08002b5c 	.word	0x08002b5c
 8002634:	20000085 	.word	0x20000085

08002638 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo,const uint32_t mask)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	61da      	str	r2, [r3, #28]
}
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <Can_Transmit>:
uint8_t can_data_arr_tx[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};//array de trimis

uint8_t can_data_arr_rx[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};//array de primit

void Can_Transmit(void)//functie de transmitere pe can
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0

	CAN_NODE_STATUS_t mo_tranmit_status;//statusu mesajelor transmise
	CAN_NODE_STATUS_t status_can;//statusu can
	XMC_CAN_MO_t *MO_Ptr;//pointer la msj

	MO_Ptr = HandlePtr1->lmobj_ptr[0]->mo_ptr;
 800265a:	4b14      	ldr	r3, [pc, #80]	; (80026ac <Can_Transmit+0x58>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	607b      	str	r3, [r7, #4]

	// update data for the MO to transmit

	(void)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[0],&can_data_arr_tx[0]);
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <Can_Transmit+0x58>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	4618      	mov	r0, r3
 800266c:	4910      	ldr	r1, [pc, #64]	; (80026b0 <Can_Transmit+0x5c>)
 800266e:	f7ff fd37 	bl	80020e0 <CAN_NODE_MO_UpdateData>

	mo_tranmit_status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[0]);//Function to transmit the can MO frame
 8002672:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <Can_Transmit+0x58>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fd0d 	bl	8002098 <CAN_NODE_MO_Transmit>
 800267e:	4603      	mov	r3, r0
 8002680:	70fb      	strb	r3, [r7, #3]

	if (mo_tranmit_status == CAN_NODE_STATUS_SUCCESS)
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10d      	bne.n	80026a4 <Can_Transmit+0x50>

	{
		//message object transmission success.

		// read the TXOK status bit
		status_can = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[0]);
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <Can_Transmit+0x58>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fd46 	bl	8002120 <CAN_NODE_MO_GetStatus>
 8002694:	4603      	mov	r3, r0
 8002696:	70bb      	strb	r3, [r7, #2]

		if (status_can & XMC_CAN_MO_STATUS_TX_PENDING);
		{
			//Clear the transmit OK flag

			XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_TX_PENDING);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	2102      	movs	r1, #2
 800269c:	f7ff ffcc 	bl	8002638 <XMC_CAN_MO_ResetStatus>

			Ctpl_TxNotification();
 80026a0:	f7ff fe5e 	bl	8002360 <Ctpl_TxNotification>
	else
	{
		// message object failed to transmit.
	}

}
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	2000005c 	.word	0x2000005c
 80026b0:	20000060 	.word	0x20000060

080026b4 <Can_CheckForRx>:

uint32_t Can_CheckForRx(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
	CAN_NODE_STATUS_t mo_receive_status;
	XMC_CAN_MO_t *MO_Ptr_Receive;//locuri pt trimitere de msj(MO)
	uint8_t i=0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	71bb      	strb	r3, [r7, #6]

	MO_Ptr_Receive = HandlePtr1->lmobj_ptr[1]->mo_ptr;
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <Can_CheckForRx+0x78>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	603b      	str	r3, [r7, #0]

	mo_receive_status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[1]);
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <Can_CheckForRx+0x78>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fd26 	bl	8002120 <CAN_NODE_MO_GetStatus>
 80026d4:	4603      	mov	r3, r0
 80026d6:	71fb      	strb	r3, [r7, #7]
	//Check receive pending status

	if ( mo_receive_status & XMC_CAN_MO_STATUS_RX_PENDING)//verifica daca a primit
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01e      	beq.n	8002720 <Can_CheckForRx+0x6c>
	{

		// Clear the flag

		XMC_CAN_MO_ResetStatus(MO_Ptr_Receive,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 80026e2:	6838      	ldr	r0, [r7, #0]
 80026e4:	2101      	movs	r1, #1
 80026e6:	f7ff ffa7 	bl	8002638 <XMC_CAN_MO_ResetStatus>

		// Read the received Message object

		mo_receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[1]);
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <Can_CheckForRx+0x78>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fce3 	bl	80020bc <CAN_NODE_MO_Receive>
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]

		//todo: must check only for configured RX id - 710 - all others should not work

		if (mo_receive_status == CAN_NODE_STATUS_SUCCESS)//verifica daca-i totu cu succes
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10f      	bne.n	8002720 <Can_CheckForRx+0x6c>
		{

			for(; i<8u ; i++)
 8002700:	e009      	b.n	8002716 <Can_CheckForRx+0x62>
			{
				can_data_arr_rx[i]=MO_Ptr_Receive->can_data_byte[i];
 8002702:	79bb      	ldrb	r3, [r7, #6]
 8002704:	79ba      	ldrb	r2, [r7, #6]
 8002706:	6839      	ldr	r1, [r7, #0]
 8002708:	440a      	add	r2, r1
 800270a:	7c11      	ldrb	r1, [r2, #16]
 800270c:	4a08      	ldr	r2, [pc, #32]	; (8002730 <Can_CheckForRx+0x7c>)
 800270e:	54d1      	strb	r1, [r2, r3]
		//todo: must check only for configured RX id - 710 - all others should not work

		if (mo_receive_status == CAN_NODE_STATUS_SUCCESS)//verifica daca-i totu cu succes
		{

			for(; i<8u ; i++)
 8002710:	79bb      	ldrb	r3, [r7, #6]
 8002712:	3301      	adds	r3, #1
 8002714:	71bb      	strb	r3, [r7, #6]
 8002716:	79bb      	ldrb	r3, [r7, #6]
 8002718:	2b07      	cmp	r3, #7
 800271a:	d9f2      	bls.n	8002702 <Can_CheckForRx+0x4e>
			{
				can_data_arr_rx[i]=MO_Ptr_Receive->can_data_byte[i];
			}

			//notify CanTpLite
			Ctpl_RxNotification();
 800271c:	f7ff fe14 	bl	8002348 <Ctpl_RxNotification>
		}

	}

	return (uint32_t)mo_receive_status;
 8002720:	79fb      	ldrb	r3, [r7, #7]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	2000005c 	.word	0x2000005c
 8002730:	20000068 	.word	0x20000068

08002734 <Can_SetTxData>:

uint8_t Can_SetTxData(uint8_t* buff)//copiaza datele primite in array_tx
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 800273c:	2300      	movs	r3, #0
 800273e:	73fb      	strb	r3, [r7, #15]
	if(buff != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00d      	beq.n	8002762 <Can_SetTxData+0x2e>
	{
		//copy from buff to can_data_arr_tx
		for(; i<8u ; i++)
 8002746:	e009      	b.n	800275c <Can_SetTxData+0x28>
		{
			can_data_arr_tx[i]=buff[i];
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	440a      	add	r2, r1
 8002750:	7811      	ldrb	r1, [r2, #0]
 8002752:	4a07      	ldr	r2, [pc, #28]	; (8002770 <Can_SetTxData+0x3c>)
 8002754:	54d1      	strb	r1, [r2, r3]
{
	uint8_t i=0;
	if(buff != NULL)
	{
		//copy from buff to can_data_arr_tx
		for(; i<8u ; i++)
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	3301      	adds	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b07      	cmp	r3, #7
 8002760:	d9f2      	bls.n	8002748 <Can_SetTxData+0x14>
		{
			can_data_arr_tx[i]=buff[i];
		}
	}

	return 0;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	20000060 	.word	0x20000060

08002774 <Can_GetRxData>:

// copiaza datele in buffer de trimitere
uint8_t Can_GetRxData(uint8_t* outBuffer)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

	uint8_t i=0;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
	if(outBuffer != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00d      	beq.n	80027a2 <Can_GetRxData+0x2e>
	{
		for(; i<8u ; i++)
 8002786:	e009      	b.n	800279c <Can_GetRxData+0x28>
		{
			outBuffer[i]=can_data_arr_rx[i];
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <Can_GetRxData+0x3c>)
 8002792:	5c8a      	ldrb	r2, [r1, r2]
 8002794:	701a      	strb	r2, [r3, #0]
{

	uint8_t i=0;
	if(outBuffer != NULL)
	{
		for(; i<8u ; i++)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	3301      	adds	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b07      	cmp	r3, #7
 80027a0:	d9f2      	bls.n	8002788 <Can_GetRxData+0x14>


		//copy contents of can_data_arr_rx to the pointer outBuffer
	}

	return 0;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	20000068 	.word	0x20000068

080027b4 <rc_crc32>:
uint8_t status_notification;
static uint32_t table[256];
static int have_table ;
uint8_t ok;
uint32_t rc_crc32(uint32_t crc, const uint8_t *buf, uint32_t len)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	; 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
	uint8_t octet;
	const uint8_t *p, *q;
	crc = ~crc;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	60fb      	str	r3, [r7, #12]
	q = buf + len;
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4413      	add	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
	for (p = buf; p < q; p++) {
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e00f      	b.n	80027f4 <rc_crc32+0x40>
		octet = p;  /* Cast to unsigned octet. */
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	75fb      	strb	r3, [r7, #23]
		crc = (crc >> 8) ^ table[(crc & 0xff) ^ octet];
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	0a1a      	lsrs	r2, r3, #8
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	b2d9      	uxtb	r1, r3
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
 80027e2:	404b      	eors	r3, r1
 80027e4:	4909      	ldr	r1, [pc, #36]	; (800280c <rc_crc32+0x58>)
 80027e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027ea:	4053      	eors	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
{
	uint8_t octet;
	const uint8_t *p, *q;
	crc = ~crc;
	q = buf + len;
	for (p = buf; p < q; p++) {
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3301      	adds	r3, #1
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d3eb      	bcc.n	80027d4 <rc_crc32+0x20>
		octet = p;  /* Cast to unsigned octet. */
		crc = (crc >> 8) ^ table[(crc & 0xff) ^ octet];
	}
	return ~crc;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	43db      	mvns	r3, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	3724      	adds	r7, #36	; 0x24
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	20000088 	.word	0x20000088

08002810 <Appl_Init>:

void Appl_Init(void)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
	uint32_t rem;
	int i, j;
	len=BUFFER_SIZE;
 8002816:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <Appl_Init+0xb0>)
 8002818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800281c:	601a      	str	r2, [r3, #0]
	dataReceived=0;
 800281e:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <Appl_Init+0xb4>)
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
	status_notification=0;
 8002824:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <Appl_Init+0xb8>)
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
	have_table = 0;
 800282a:	4b28      	ldr	r3, [pc, #160]	; (80028cc <Appl_Init+0xbc>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
	ok=0;
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <Appl_Init+0xc0>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
	for(i=0;i<BUFFER_SIZE;i++)
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	e007      	b.n	800284c <Appl_Init+0x3c>
	{
		data[i]=0;
 800283c:	4a25      	ldr	r2, [pc, #148]	; (80028d4 <Appl_Init+0xc4>)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4413      	add	r3, r2
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
	len=BUFFER_SIZE;
	dataReceived=0;
	status_notification=0;
	have_table = 0;
	ok=0;
	for(i=0;i<BUFFER_SIZE;i++)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3301      	adds	r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002852:	d3f3      	bcc.n	800283c <Appl_Init+0x2c>
	{
		data[i]=0;
	}

	/* This check is not thread safe; there is no mutex. */
	if (have_table == 0) {
 8002854:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <Appl_Init+0xbc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d12b      	bne.n	80028b4 <Appl_Init+0xa4>
		/* Calculate CRC table. */
		for (i = 0; i < 256; i++) {
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	e022      	b.n	80028a8 <Appl_Init+0x98>
			rem = i;  /* remainder from polynomial division */
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	60fb      	str	r3, [r7, #12]
			for (j = 0; j < 8; j++) {
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	e012      	b.n	8002892 <Appl_Init+0x82>
				if (rem & 1) {
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <Appl_Init+0x76>
					rem >>= 1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
					rem ^= 0xedb88320;
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <Appl_Init+0xc8>)
 8002880:	4053      	eors	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e002      	b.n	800288c <Appl_Init+0x7c>
				} else
					rem >>= 1;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
	/* This check is not thread safe; there is no mutex. */
	if (have_table == 0) {
		/* Calculate CRC table. */
		for (i = 0; i < 256; i++) {
			rem = i;  /* remainder from polynomial division */
			for (j = 0; j < 8; j++) {
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3301      	adds	r3, #1
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b07      	cmp	r3, #7
 8002896:	dde9      	ble.n	800286c <Appl_Init+0x5c>
					rem >>= 1;
					rem ^= 0xedb88320;
				} else
					rem >>= 1;
			}
			table[i] = rem;
 8002898:	4910      	ldr	r1, [pc, #64]	; (80028dc <Appl_Init+0xcc>)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	/* This check is not thread safe; there is no mutex. */
	if (have_table == 0) {
		/* Calculate CRC table. */
		for (i = 0; i < 256; i++) {
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	3301      	adds	r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2bff      	cmp	r3, #255	; 0xff
 80028ac:	ddd9      	ble.n	8002862 <Appl_Init+0x52>
				} else
					rem >>= 1;
			}
			table[i] = rem;
		}
		have_table = 1;
 80028ae:	4b07      	ldr	r3, [pc, #28]	; (80028cc <Appl_Init+0xbc>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
	}
}
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	200015e4 	.word	0x200015e4
 80028c4:	200005dd 	.word	0x200005dd
 80028c8:	200005dc 	.word	0x200005dc
 80028cc:	20000488 	.word	0x20000488
 80028d0:	200015e0 	.word	0x200015e0
 80028d4:	200005e0 	.word	0x200005e0
 80028d8:	edb88320 	.word	0xedb88320
 80028dc:	20000088 	.word	0x20000088

080028e0 <Appl_MainFunction>:

void Appl_MainFunction(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
	uint32_t volatile crc=0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
	uint8_t tempData[8]={0};
 80028ea:	2300      	movs	r3, #0
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
	if(dataReceived == 1u)
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <Appl_MainFunction+0x78>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d124      	bne.n	8002944 <Appl_MainFunction+0x64>
	{
		crc=rc_crc32(0,data,len);
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <Appl_MainFunction+0x7c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2000      	movs	r0, #0
 8002900:	4917      	ldr	r1, [pc, #92]	; (8002960 <Appl_MainFunction+0x80>)
 8002902:	461a      	mov	r2, r3
 8002904:	f7ff ff56 	bl	80027b4 <rc_crc32>
 8002908:	4603      	mov	r3, r0
 800290a:	60bb      	str	r3, [r7, #8]
		dataReceived=0u;
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <Appl_MainFunction+0x78>)
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]

		//data should be put on the CAN now
		//copy crc to tempData
		uint8_t i=3;
 8002912:	2303      	movs	r3, #3
 8002914:	73fb      	strb	r3, [r7, #15]
		while(crc!=0)
 8002916:	e00d      	b.n	8002934 <Appl_MainFunction+0x54>
		{
			tempData[i]=crc;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	f107 0110 	add.w	r1, r7, #16
 8002922:	440b      	add	r3, r1
 8002924:	f803 2c10 	strb.w	r2, [r3, #-16]
			crc = crc >> 8;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	60bb      	str	r3, [r7, #8]
			i--;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	3b01      	subs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
		dataReceived=0u;

		//data should be put on the CAN now
		//copy crc to tempData
		uint8_t i=3;
		while(crc!=0)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1ee      	bne.n	8002918 <Appl_MainFunction+0x38>
			tempData[i]=crc;
			crc = crc >> 8;
			i--;
		}

		Ctpl_SendData(&tempData,4);
 800293a:	463b      	mov	r3, r7
 800293c:	4618      	mov	r0, r3
 800293e:	2104      	movs	r1, #4
 8002940:	f7ff fd3a 	bl	80023b8 <Ctpl_SendData>
	}

	if(status_notification==1)
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <Appl_MainFunction+0x84>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <Appl_MainFunction+0x70>
	{
		Appl_RxNotification();
 800294c:	f000 f840 	bl	80029d0 <Appl_RxNotification>
	}


}
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200005dd 	.word	0x200005dd
 800295c:	200015e4 	.word	0x200015e4
 8002960:	200005e0 	.word	0x200005e0
 8002964:	200005dc 	.word	0x200005dc

08002968 <Appl_GetDataPointer>:

uint8_t* Appl_GetDataPointer(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
	return &data[0];
 800296c:	4b02      	ldr	r3, [pc, #8]	; (8002978 <Appl_GetDataPointer+0x10>)
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	200005e0 	.word	0x200005e0

0800297c <Appl_RecStartNotification>:

void Appl_RecStartNotification(uint32_t receivedLenght)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	//should check if lenght is the same
	len=receivedLenght;
 8002984:	4a03      	ldr	r2, [pc, #12]	; (8002994 <Appl_RecStartNotification+0x18>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6013      	str	r3, [r2, #0]
}
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	200015e4 	.word	0x200015e4

08002998 <Appl_RecFinishNotification>:

void Appl_RecFinishNotification(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
	dataReceived=1;
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <Appl_RecFinishNotification+0x14>)
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
}
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	200005dd 	.word	0x200005dd

080029b0 <Appl_ErrorNotification>:

void Appl_ErrorNotification(uint8_t errorCode)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
	ok=1;
 80029ba:	4b04      	ldr	r3, [pc, #16]	; (80029cc <Appl_ErrorNotification+0x1c>)
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
	//stop everything - reset to default
}
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	200015e0 	.word	0x200015e0

080029d0 <Appl_RxNotification>:

void Appl_RxNotification(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
	status_notification=1;
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <Appl_RxNotification+0x14>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
}
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	200005dc 	.word	0x200005dc

080029e8 <main>:
 */



int main(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
	DAVE_STATUS_t status;

	status = DAVE_Init();           /* Initialization of DAVE APPs  */
 80029ee:	f7ff fc45 	bl	800227c <DAVE_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]

	if(status != DAVE_STATUS_SUCCESS)
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d000      	beq.n	80029fe <main+0x16>
		XMC_DEBUG("DAVE APPs initialization failed\n");

		while(1U)
		{

		}
 80029fc:	e7fe      	b.n	80029fc <main+0x14>
	}

	Os_Init();
 80029fe:	f7fd fcd3 	bl	80003a8 <Os_Init>
	Ctpl_Init();
 8002a02:	f7ff fc61 	bl	80022c8 <Ctpl_Init>
	Appl_Init();
 8002a06:	f7ff ff03 	bl	8002810 <Appl_Init>

	/* Placeholder for user application code. The while loop below can be replaced with user application code. */
	while(1U)
	{
		(void)Can_CheckForRx();
 8002a0a:	f7ff fe53 	bl	80026b4 <Can_CheckForRx>
	}
 8002a0e:	e7fc      	b.n	8002a0a <main+0x22>

08002a10 <__libc_init_array>:
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <__libc_init_array+0x3c>)
 8002a14:	4c0e      	ldr	r4, [pc, #56]	; (8002a50 <__libc_init_array+0x40>)
 8002a16:	1ae4      	subs	r4, r4, r3
 8002a18:	10a4      	asrs	r4, r4, #2
 8002a1a:	2500      	movs	r5, #0
 8002a1c:	461e      	mov	r6, r3
 8002a1e:	42a5      	cmp	r5, r4
 8002a20:	d004      	beq.n	8002a2c <__libc_init_array+0x1c>
 8002a22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a26:	4798      	blx	r3
 8002a28:	3501      	adds	r5, #1
 8002a2a:	e7f8      	b.n	8002a1e <__libc_init_array+0xe>
 8002a2c:	f7fe fd60 	bl	80014f0 <_init>
 8002a30:	4c08      	ldr	r4, [pc, #32]	; (8002a54 <__libc_init_array+0x44>)
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <__libc_init_array+0x48>)
 8002a34:	1ae4      	subs	r4, r4, r3
 8002a36:	10a4      	asrs	r4, r4, #2
 8002a38:	2500      	movs	r5, #0
 8002a3a:	461e      	mov	r6, r3
 8002a3c:	42a5      	cmp	r5, r4
 8002a3e:	d004      	beq.n	8002a4a <__libc_init_array+0x3a>
 8002a40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a44:	4798      	blx	r3
 8002a46:	3501      	adds	r5, #1
 8002a48:	e7f8      	b.n	8002a3c <__libc_init_array+0x2c>
 8002a4a:	bd70      	pop	{r4, r5, r6, pc}
 8002a4c:	20000070 	.word	0x20000070
 8002a50:	20000070 	.word	0x20000070
 8002a54:	20000070 	.word	0x20000070
 8002a58:	20000070 	.word	0x20000070
 8002a5c:	01040250 	.word	0x01040250
 8002a60:	00010000 	.word	0x00010000
 8002a64:	00000000 	.word	0x00000000
 8002a68:	00010000 	.word	0x00010000
 8002a6c:	01010101 	.word	0x01010101

08002a70 <CAN_NODE_0_gpio_out>:
 8002a70:	48028100 0000000c                       ...H....

08002a78 <CAN_NODE_0_gpio_out_config>:
 8002a78:	00000090 00000001 00000002              ............

08002a84 <CAN_NODE_0_gpio_in>:
 8002a84:	48028100 0000000d                       ...H....

08002a8c <CAN_NODE_0_gpio_in_config>:
	...

08002a98 <CAN_NODE_0_sr>:
 8002a98:	00000000                                ....

08002a9c <CAN_NODE_0_LMO_01_Config>:
 8002a9c:	20000018 01000022 00000000              ... ".......

08002aa8 <CAN_NODE_0_LMO_02_Config>:
 8002aa8:	20000038 00000023 00000001              8.. #.......

08002ab4 <CAN_NODE_0>:
 8002ab4:	20000000 48014300 2000000c 08002a9c     ... .C.H... .*..
 8002ac4:	08002aa8 00000000 00000000 00000000     .*..............
	...
 8002b40:	08002a98 08002a70 08002a78 08002a84     .*..p*..x*...*..
 8002b50:	08002a8c 00020102 00000001 55000030     .*..........0..U
 8002b60:	55555555                                UUUU
